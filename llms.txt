# Choerodon UI组件文档
================================================================================
文件: Affix.md
路径: doc\Affix.md
================================================================================

# Affix 固钉

将页面元素钉在可视范围。

## 何时使用

当内容区域比较长，需要滚动页面时，这部分内容对应的操作或者导航需要在滚动范围内始终展现。常用于侧边菜单和按钮组合。

页面可视范围过小时，慎用此功能以免遮挡页面内容。

## 代码演示

## 基本

最简单的用法。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Affix, Button } from 'choerodon-ui';

class Demo extends React.Component {
  state = {
    top: 200,
    bottom: 50,
  };

  render() {
    return (
      <div>
        <Affix offsetTop={this.state.top}>
          <Button
            type="primary"
            onClick={() => {
              this.setState({
                top: this.state.top + 10,
              });
            }}
          >
            Affix top
          </Button>
        </Affix>
        <br />
        <Affix offsetBottom={this.state.bottom}>
          <Button
            type="primary"
            onClick={() => {
              this.setState({
```

## 固定状态改变的回调

可以获得是否固定的状态。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Affix, Button } from 'choerodon-ui';

ReactDOM.render(
  <Affix offsetTop={120} onChange={affixed => console.log(affixed)}>
    <Button>120px to affix top</Button>
  </Affix>,
  document.getElementById('container'),
);
```

## 滚动容器

用target设置Affix需要监听其滚动事件的元素，默认为window。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Affix, Button } from 'choerodon-ui';

class Demo extends React.Component {
  render() {
    return (
      <div
        className="scrollable-content"
        style={{ height: 100, overflowY: 'scroll' }}
        ref={(node) => {
          this.container = node;
        }}
      >
        <div
          className="background"
          style={{
            paddingTop: 60,
            height: 300,
            backgroundImage:
              "url('https://zos.alipayobjects.com/rmsportal/RmjwQiJorKyobvI.jpg')",
          }}
        >
          <Affix target={() => this.container}>
            <Button type="primary">Fixed at the top of container</Button>
          </Affix>
        </div>
      </div>
```

## API

| 属性 | 说明 | 类型/默认值 |
| --- | --- | --- |
| offsetBottom | 距离窗口底部达到指定偏移量后触发 | 类型number |
| offsetTop | 距离窗口顶部达到指定偏移量后触发 | 类型number |
| target | 设置Affix需要监听其滚动事件的元素，值为一个返回对应 DOM 元素的函数 | 类型() => HTMLElement默认值() window |
| onChange | 固定状态改变时触发的回调函数 | 类型Function(affixed)默认值无 |

注意：Affix内的元素不要使用绝对定位，如需要绝对定位的效果，可以直接设置Affix为绝对定位：

```jsx
<Affix style={{ position: 'absolute', top: y, left: x}}>
  ...
</Affix>
```



================================================================================
文件: Alert.md
路径: doc\Alert.md
================================================================================

# Alert 警告提示

警告提示，展现需要关注的信息。

## 何时使用

- 当某个页面需要向用户显示警告的信息时。
- 非浮层的静态展现形式，始终展现，不会自动消失，用户可以点击关闭。

## 代码演示

## 基本

最简单的用法，适用于简短的警告提示。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Alert } from 'choerodon-ui';

ReactDOM.render(
  <Alert message="Success Text" type="success" />,
  document.getElementById('container'));
```

## 四种样式

共有四种样式success、info、warning、error。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Alert } from 'choerodon-ui';

ReactDOM.render(
  <div>
    <Alert style={{ margin: '4px' }} message="Success Text" type="success" />
    <Alert style={{ margin: '4px' }} message="Info Text" type="info" />
    <Alert style={{ margin: '4px' }} message="Warning Text" type="warning" />
    <Alert style={{ margin: '4px' }} message="Error Text" type="error" />
  </div>,
  document.getElementById('container'),
);
```

## 可关闭的警告提示

显示关闭按钮，点击可关闭警告提示。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Alert } from 'choerodon-ui';

const onClose = function (e) {
  console.log(e, 'I was closed.');
};

ReactDOM.render(
  <div>
    <Alert
      style={{ margin: '4px' }}
      message="Warning Text Warning Text Warning TextW arning Text Warning Text Warning TextWarning Text"
      type="warning"
      closable
      onClose={onClose}
    />
    <Alert
      style={{ margin: '4px' }}
      message="Error Text"
      description="Error Description Error Description Error Description Error Description Error Description Error Description"
      type="error"
      closable
      onClose={onClose}
    />
  </div>,
  document.getElementById('container'),
);
```

## 含有辅助性文字介绍

含有辅助性文字介绍的警告提示。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Alert } from 'choerodon-ui';

ReactDOM.render(
  <div>
    <Alert
      style={{ margin: '4px' }}
      message="Success Text"
      description="Success Description Success Description Success Description"
      type="success"
    />
    <Alert
      style={{ margin: '4px' }}
      message="Info Text"
      description="Info Description Info Description Info Description Info Description"
      type="info"
    />
    <Alert
      style={{ margin: '4px' }}
      message="Warning Text"
      description="Warning Description Warning Description Warning Description Warning Description"
      type="warning"
    />
    <Alert
      style={{ margin: '4px' }}
      message="Error Text"
      description="Error Description Error Description Error Description Error Description"
      type="error"
    />
  </div>,
  document.getElementById('container'),
);
```

## 图标

可口的图标让信息类型更加醒目。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Alert } from 'choerodon-ui';

ReactDOM.render(
  <div>
    <Alert
      style={{ margin: '4px' }}
      message="Success Tips"
      type="success"
      showIcon
    />
    <Alert
      style={{ margin: '4px' }}
      message="Informational Notes"
      type="info"
      showIcon
    />
    <Alert
      style={{ margin: '4px' }}
      message="Warning"
      type="warning"
      showIcon
    />
    <Alert style={{ margin: '4px' }} message="Error" type="error" showIcon />
    <Alert
      style={{ margin: '4px' }}
      message="Success Tips"
      description="Detailed description and advices about successful copywriting."
      type="success"
      showIcon
    />
    <Alert
      style={{ margin: '4px' }}
      message="Informational Notes"
      description="Additional description and informations about copywriting."
      type="info"
      showIcon
    />
    <Alert
      style={{ margin: '4px' }}
      message="Warning"
      description="This is a warning notice about copywriting."
      type="warning"
      showIcon
    />
    <Alert
      style={{ margin: '4px' }}
      message="Error"
      description="This is an error message about copywriting."
      type="error"
      showIcon
    />
  </div>,
  document.getElementById('container'),
);
```

## 自定义关闭

可以自定义关闭，自定义的文字会替换原先的关闭Icon。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Alert } from 'choerodon-ui';

ReactDOM.render(
  <Alert message="Info Text" type="info" closeText="Close Now" />,
  document.getElementById('container'));
```

## 顶部公告

页面顶部通告形式，默认有图标且type为 'warning'。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Alert } from 'choerodon-ui';

ReactDOM.render(
  <div>
    <Alert message="Warning text" banner />
    <br style={{ margin: '4px' }} />
    <Alert
      message="Very long warning text warning text text text text text text text"
      banner
      closable
    />
    <br style={{ margin: '4px' }} />
    <Alert showIcon={false} message="Warning text without icon" banner />
    <br style={{ margin: '4px' }} />
    <Alert type="error" message="Error text" banner />
  </div>,
  document.getElementById('container'),
);
```

## 平滑地卸载

平滑、自然的卸载提示

placeholder text here

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Alert } from 'choerodon-ui';

class App extends React.Component {
  state = {
    visiable: true,
  }

  handleClose = () => {
    this.setState({ visiable: false });
  }

  render() {
    return (
      <div>
        {
          this.state.visiable ? (
            <Alert
              message="Alert Message Text"
              type="success"
              closable
              afterClose={this.handleClose}
            />
          ) : null
        }
        <p>placeholder text here</p>
      </div>
    );
  }
```

## API

| 属性名 | 说明 | 类型/默认值 |
| --- | --- | --- |
| afterClose | 关闭动画结束后的回掉 | 类型() => void默认值- |
| banner | 是否用作顶部公告 | 类型boolean默认值false |
| closable | 默认不显示关闭按钮 | 类型boolean默认值无 |
| closeText | 自定义关闭按钮 | 类型string\|ReactNode默认值无 |
| description | 警告提示的辅助性文字介绍 | 类型string\|ReactNode默认值无 |
| message | 警告提示内容 | 类型string\|ReactNode默认值无 |
| showIcon | 是否显示辅助图标 | 类型boolean默认值false，banner模式下默认值为 true |
| iconType | 自定义图标类型，showIcon为true时有效 | 类型string默认值- |
| type | 指定警告提示的样式，有四种选择success、info、warning、error | 类型string默认值info，banner模式下默认值为warning |
| onClose | 关闭时触发的回调函数 | 类型(e: MouseEvent) => void默认值无 |



================================================================================
文件: Anchor.md
路径: doc\Anchor.md
================================================================================

# Anchor 锚点

用于跳转到页面指定位置。

## 何时使用

需要展现当前页面上可供跳转的锚点链接，以及快速在锚点之间跳转。

## 代码演示

## 基本

最简单的用法。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Anchor } from 'choerodon-ui';

const { Link } = Anchor;

ReactDOM.render(
  <Anchor>
    <Link href="#基本" title="Basic demo" />
    <Link href="#静态位置" title="Static demo" />
    <Link href="#API" title="API">
      <Link href="#anchor-props" title="Anchor Props" />
      <Link href="#link-props" title="Link Props" />
    </Link>
  </Anchor>,
  document.getElementById('container'),
);
```

## 静态位置

不浮动，状态不随页面滚动变化。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Anchor } from 'choerodon-ui';

const { Link } = Anchor;

ReactDOM.render(
  <Anchor affix={false}>
    <Link href="#基本" title="Basic demo" />
    <Link href="#静态位置" title="Static demo" />
    <Link href="#API" title="API">
      <Link href="#anchor-props" title="Anchor Props" />
      <Link href="#link-props" title="Link Props" />
    </Link>
  </Anchor>,
  document.getElementById('container'),
);
```

## 自定义 onClick 事件

点击锚点不记录历史。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Anchor } from 'choerodon-ui';

const { Link } = Anchor;

const handleClick = (e, link) => {
  e.preventDefault();
  console.log(link);
};

ReactDOM.render(
  <Anchor affix={false} onClick={handleClick}>
    <Link href="#基本" title="Basic demo" />
    <Link href="#静态位置" title="Static demo" />
    <Link href="#API" title="API">
      <Link href="#anchor-props" title="Anchor Props" />
      <Link href="#link-props" title="Link Props" />
    </Link>
  </Anchor>,
  document.getElementById('container'),
);
```

## 自定义锚点高亮

自定义锚点高亮。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Anchor } from 'choerodon-ui';

const { Link } = Anchor;

const getCurrentAnchor = () => {
  return '#components-anchor-demo-static';
};

ReactDOM.render(
  <Anchor affix={false} getCurrentAnchor={getCurrentAnchor}>
    <Link href="#基本" title="Basic demo" />
    <Link href="#静态位置" title="Static demo" />
    <Link href="#API" title="API">
      <Link href="#anchor-props" title="Anchor Props" />
      <Link href="#link-props" title="Link Props" />
    </Link>
  </Anchor>,
  document.getElementById('container'),
);
```

## 设置锚点滚动偏移量

锚点目标滚动到屏幕正中间。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Anchor } from 'choerodon-ui';

const { Link } = Anchor;

class AnchorExample extends React.Component {
  state = {
    targetOffset: undefined,
  };

  componentDidMount() {
    this.setState({
      targetOffset: window.innerHeight / 2,
    });
  }

  render() {
    return (
      <Anchor targetOffset={this.state.targetOffset}>
        <Link href="#基本" title="Basic demo" />
        <Link href="#静态位置" title="Static demo" />
        <Link href="#API" title="API">
          <Link href="#anchor-props" title="Anchor Props" />
          <Link href="#link-props" title="Link Props" />
        </Link>
      </Anchor>
    );
  }
}

ReactDOM.render(<AnchorExample />, document.getElementById('container'));
```

## API

### Anchor Props

| 属性 | 说明 | 类型/默认值 |
| --- | --- | --- |
| affix | 固定模式 | 类型boolean默认值true |
| bounds | 锚点区域边界 | 类型number默认值5(px) |
| getContainer | 指定滚动的容器 | 类型() => HTMLElement默认值() window |
| offsetBottom | 距离窗口底部达到指定偏移量后触发 | 类型number |
| offsetTop | 距离窗口顶部达到指定偏移量后触发 | 类型number |
| showInkInFixed | 固定模式是否显示小圆点 | 类型boolean默认值false |
| onClick | click事件的 handler | 类型Function(e: Event, link: Object)默认值- |
| getCurrentAnchor | 自定义高亮的锚点 | 类型() => string默认值- |
| targetOffset | 锚点滚动偏移量，默认与 offsetTop 相同，例子 | 类型number默认值offsetTop |

### Link Props

| 属性 | 说明 | 类型/默认值 |
| --- | --- | --- |
| href | 锚点链接 | 类型string |
| title | 文字内容 | 类型string\|ReactNode |

### Q&A

为什么点击锚点后页面布局错位？

##### 问题原因

页面布局样式存在一定问题，比如页面结构不规范，使用定位的方式强行布局。锚点组件滚动容器默认为window，而在具体项目中， 若页面的滚动区域不是window，此时点击锚点就有可能会造成页面错位。

##### 解决方案

- 根据具体情况调整页面布局，使页面结构更加规范合理。
- 指定滚动区域，在锚点组件使用getContainer属性指定滚动的区域。

##### 具体实现

```js
const App = () => {
  return(
  	<>
      <div id="scrollContainer" style={{height: 200, overflow: 'scroll'}}>
        <div id="yellow" style={{height: 200, background: 'yellow'}} />
        <div id="red" style={{height: 200, background: 'red'}} />
        <div id="blue" style={{height: 200, background: 'blue'}} />
      </div>
      // 使用 getContainer 属性指定滚动容器
      <Anchor getContainer={() => document.getElementById('scrollContainer')}>
        <Link href="#yellow" title="yellow" />
        <Link href="#red" title="red" />
        <Link href="#blue" title="blue" />
      </Anchor>
    </>
  );
};
```



================================================================================
文件: Animate.md
路径: doc\Animate.md
================================================================================

# Animate 动画

## 何时使用

## 代码演示

## 数组成员

- 1
- 2
- 3
- 4

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Animate, Button } from 'choerodon-ui';

class App extends React.PureComponent {
  state = { list: [1, 2, 3, 4] };

  start = 5;

  insert = () => {
    const list = this.state.list.slice();
    list.splice(2, 0, (this.start += 1));
    this.setState({ list });
  };

  remove = value => {
    const list = this.state.list.slice();
    const index = list.indexOf(value);
    if (index !== -1) {
      list.splice(index, 1);
      this.setState({ list });
    }
  };

  renderItems() {
    const { list } = this.state;
    return list.map(value => (
      <li key={value} style={{ border: '1px solid #000' }}>
        <div onClick={() => this.remove(value)}>{value}</div>
      </li>
    ));
  }

  render() {
```

## API

按钮的属性说明如下：

| 属性 | 说明 | 类型/默认值 |
| --- | --- | --- |
| component | 动画容器元素 | 类型reactElement默认值span |
| componentProps | 动画容器元素属性 | 类型object |
| transitionName | 动画名称，可选值：zoomfadeslide-upslide-downslide-leftslide-rightswingmove | 类型string |
| transitionEnter | 子元素进入时是否展示动画 | 类型boolean默认值true |
| transitionAppear | 子元素出现时是否展示动画 | 类型boolean默认值false |
| transitionLeave | 子元素离开时是否展示动画 | 类型boolean默认值true |
| exclusive | 是否立即停止之前的动画 | 类型boolean默认值false |
| onEnd | 动画结束是的钩子 | 类型function |
| onLeave | 子元素离开时的钩子 | 类型function |
| onAppear | 子元素出现时的钩子 | 类型function |
| hiddenProp | 决定子元素是否离开的属性名 | 类型string |



================================================================================
文件: Attachment.md
路径: doc\Attachment.md
================================================================================

# Attachment 附件

附件上传和展示。

集成功能强大、展示模式多变。
项目可从框架层配置组件全局配置，统一管理上传服务、地址、上传各阶段回调等处理。开发者无需单独配置，直接使用，便捷高效。

- 附件上传组件区别与选用指南：https://open.hand-china.com/choerodon-ui/zh/tutorials/attachment-upload

## 何时使用

需要上传文件时。

1.4.4 版本新增组件。

## 代码演示

## 基本使用

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { configure, Row, Col, message } from 'choerodon-ui';
import { Attachment, Axios } from 'choerodon-ui/pro';
import { v4 as uuid } from 'uuid';
import moment from 'moment';

const imgs = ['png', 'gif', 'jpg', 'webp', 'jpeg', 'bmp', 'tif', 'pic', 'svg'];
// 使用附件功能前需要在全局配置中配置如下， 开发者无需配置
configure({
  attachment: {
    defaultFileKey: 'file',
    defaultFileSize: 500 * 1024 * 1024,
    defaultChunkSize: 5 * 1024 * 1024,
    defaultChunkThreads: 3,
    orderField: 'orderSeq',
    action: {
      url: 'https://www.mocky.io/v2/5cc8019d300000980a055e76',
      headers: {
        'Access-Control-Allow-Origin': '*',
      },
    },
    fetchList({ attachmentUUID }) {
      return Axios.get(`/attachment/${attachmentUUID}`).then((response) => {
        return response.map((file) => ({
          uid: file.fileId,
          name: file.fileName,
          size: file.fileSize,
          type: file.fileType,
          url: file.fileUrl,
          creationDate: moment(file.creationDate).toDate(),
          status: 'done',
```

## 绑定数据源

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Attachment, DataSet, Form } from 'choerodon-ui/pro';

const App = () => {
  const ds = React.useMemo(
    () =>
      new DataSet({
        fields: [
          {
            name: 'attachment',
            type: 'attachment',
            label: <span>技术附件</span>,
            max: 9,
            required: true,
            template: {
              attachmentUUID: '4c74a34a-fa37-4e92-be9d-5cf726fb1472',
            },
          },
        ],
      }),
    [],
  );
  const props = {
    accept: ['.deb', '.txt', '.pdf', 'image/*'],
    name: 'attachment',
    labelLayout: 'float',
    showValidation: 'newLine',
    viewMode: 'popup',
  };

  React.useEffect(() => {
```

## 照片墙

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Attachment, Row, Col } from 'choerodon-ui/pro';

const App = () => {
  const [value, setValue] = React.useState(
    '88888888-fa37-4e92-be9d-5cf726fb1472',
  );
  const props = {
    label: '技术附件',
    labelLayout: 'float',
    accept: ['image/*'],
    listType: 'picture-card',
    max: 9,
    listLimit: 5,
    value,
    onChange: setValue,
    help: '图片支持PNG、JPG、JPEG格式，且不能大于1M',
    fileSize: 1024 * 1024,
  };
  return (
    <Row gutter={10}>
      <Col span={24}>
        <Attachment {...props} />
      </Col>
      <Col span={24}>
        <Attachment readOnly {...props} />
      </Col>
    </Row>
  );
};

ReactDOM.render(<App />, document.getElementById('container'));
```

## 图片附件

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Attachment, Row, Col } from 'choerodon-ui/pro';

const App = () => {
  const [value, setValue] = React.useState(
    '4c74a34a-fa37-4e92-be9d-5cf726fb1472',
  );
  const props = {
    label: '技术附件',
    labelLayout: 'float',
    accept: ['.deb', '.txt', '.pdf', 'image/*'],
    listType: 'picture',
    value,
    onChange: setValue,
  };
  return (
    <Row gutter={10}>
      <Col span={12}>
        <Attachment {...props} />
      </Col>
      <Col span={12}>
        <Attachment readOnly {...props} />
      </Col>
    </Row>
  );
};

ReactDOM.render(<App />, document.getElementById('container'));
```

## 气泡显示

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Attachment, Row, Col } from 'choerodon-ui/pro';

const App = () => {
  const [value, setValue] = React.useState();
  const props = {
    label: '技术附件',
    labelLayout: 'float',
    accept: ['.deb', '.txt', '.pdf', 'image/*'],
    max: 9,
    value,
    onChange: setValue,
    viewMode: 'popup',
  };

  React.useEffect(() => {
    setValue('4c74a34a-fa37-4e92-be9d-5cf726fb1472');
  }, []);

  return (
    <Row gutter={10}>
      <Col span={12}>
        <Attachment {...props} />
      </Col>
      <Col span={12}>
        <Attachment readOnly {...props} />
      </Col>
```

## 附件组合

附件组合显示。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Attachment, DataSet, Form } from 'choerodon-ui/pro';

const { Group } = Attachment;

const App = () => {
  const [value, setValue] = React.useState(
    '4c74a34a-fa37-4e92-be9d-5cf726fb1472',
  );
  const props = {
    labelLayout: 'float',
    accept: ['.deb', '.txt', '.pdf', 'image/*'],
    max: 9,
    showHistory: true,
    help: '支持文件类型： .deb .txt .pdf image/*',
  };

  const ds = React.useMemo(
    () =>
      new DataSet({
        data: [{ attachment: '88888888-fa37-4e92-be9d-5cf726fb1472' }],
        fields: [
          {
            name: 'attachment',
            type: 'attachment',
            label: <span>管理附件</span>,
            max: 9,
            required: true,
          },
        ],
      }),
    [],
```

## 在表格中显示

在表格中显示。

| 技术附件 | 管理附件 | 项目附件 |
| --- | --- | --- |
|  | 上传附件2/9 | 查看附件9 |
|  | 上传附件0/9 | 查看附件0 |
|  | 上传附件0/9 | 查看附件0 |

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Attachment, Table, DataSet } from 'choerodon-ui/pro';

const App = () => {
  const ds = React.useMemo(
    () =>
      new DataSet({
        fields: [
          {
            name: 'attachment',
            type: 'attachment',
            label: '技术附件',
            max: 9,
            accept: ['.deb', '.txt', '.pdf', 'image/*'],
            required: true,
          },
          { name: 'attachment2', type: 'attachment', label: '管理附件' },
          { name: 'attachment3', type: 'attachment', label: '项目附件' },
        ],
        data: [
          {
            attachment: '4c74a34a-fa37-4e92-be9d-5cf726fb1472',
            attachment2: '88888888-fa37-4e92-be9d-5cf726fb1472',
          },
          {},
          {},
        ],
      }),
    [],
  );
  const columns = React.useMemo(
    () => [
```

## 拖拽上传

可拖拽文件上传。

点击这里或者拖拽文件到这里上传

支持文件类型： .deb .txt .pdf image/*

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Icon } from 'choerodon-ui';
import { Attachment } from 'choerodon-ui/pro';

const { Dragger } = Attachment;

const App = () => {
  const [value, setValue] = React.useState(
    '4c74a34a-fa37-4e92-be9d-5cf726fb1472',
  );
  const props = {
    label: '技术附件',
    labelLayout: 'float',
    accept: ['.deb', '.txt', '.pdf', 'image/*'],
    max: 9,
    value,
    onChange: setValue,
    showHistory: true,
    help: '支持文件类型： .deb .txt .pdf image/*',
  };

  return (
    <Dragger {...props}>
      <div style={{ padding: 20 }}>
        <p className="c7n-upload-drag-icon">
          <Icon type="inbox" />
        </p>
        <p style={{ paddingTop: 20, color: 'rgba(0, 0, 0, 0.85)' }}>
          点击这里或者拖拽文件到这里上传
        </p>
        <p style={{ color: 'rgba(0, 0, 0, 0.45)' }}>
          支持文件类型： .deb .txt .pdf image/*
        </p>
      </div>
    </Dragger>
  );
};
```

## 文件预览

设置 getPreviewUrl 可以设置预览地址，默认使用 AttachmentFile.url 预览。示例展示了 同步 和 异步 设置预览地址

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Row, Col } from 'choerodon-ui';
import { Attachment } from 'choerodon-ui/pro';

// 视频文件类型
const attachmentUUID1 = 'qwera34a-fa37-4e92-be9d-5cf726fb1472';
// 图片文件类型
const attachmentUUID2 = '4c74a34a-fa37-4e92-be9d-5cf726fb1472';
const App = () => {
  const [value, setValue] = React.useState(attachmentUUID1);
  const [value2, setValue2] = React.useState(attachmentUUID2);
  const props = {
    label: '技术附件',
    labelLayout: 'float',
    max: 9,
    showHistory: true,
  };

  const getPreviewUrl = (props) => {
    console.log('getPreviewUrl', props);
    // 返回具体预览地址
    // return 'https://www.bilibili.com/video/BV1tg411Q7Wk/?spm_id_from=333.999.0.0&vd_source=320c615b96f3210ef81bd881e5041647';
    return props.attachment.url;
  };

  // 异步请求预览地址示例
  const getPreviewUrlAsync = (props) => {
    return () => {
      console.log('getPreviewUrlAsync', props);
      return new Promise((resolve) => {
        setTimeout(() => {
```

## 临时删除

设置 removeImmediately 属性为 false 则不会立即删除附件。可通过实例方法 remove 和 reset 进行删除或还原。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { observer } from 'mobx-react';
import { Attachment, useModal, Form, Output, Button } from 'choerodon-ui/pro';

const attachmentUUID1 = '4c74a34a-fa37-4e92-be9d-5cf726fb1472';
// const attachmentUUID2 = '88888888-fa37-4e92-be9d-5cf726fb1472';
const Children = ({ attRef }) => {
  const [value, setValue] = React.useState(attachmentUUID1);
  const [count, setCount] = React.useState(0);

  const handleTempAttachmentsChange = React.useCallback(
    (atts = []) => {
      setCount(atts.length);
    },
    [setCount],
  );

  const attProps = {
    label: '附件临时删除',
    labelLayout: 'float',
    accept: ['.deb', '.txt', '.pdf', 'image/*'],
    max: 9,
    value,
    onChange: setValue,
    removeImmediately: false,
    onTempRemovedAttachmentsChange: handleTempAttachmentsChange,
  };

  const removeFunc = React.useCallback(() => {
    if (attRef?.current?.tempRemovedAttachments?.length > 0) {
      attRef?.current?.remove();
```

## API

| 属性 | 说明 | 类型/默认值/版本 |
| --- | --- | --- |
| accept | 接受上传的文件类型input accept Attribute | 类型string[] |
| data | 上传所需参数 | 类型object |
| headers | 设置上传的请求头部，IE10 以上有效 | 类型object |
| height | Attachment.Dragger的高度设置 | 类型number |
| multiple | 是否支持多选，IE10 以上有效 | 类型boolean默认值true |
| withCredentials | 上传请求时是否携带 cookie | 类型boolean默认值false |
| listType | 上传列表的内建样式，支持三种基本样式 text \| picture 和 picture-card | 类型string默认值text |
| viewMode | 上传列表的显示模式，支持三种基本样式 none, list 和 popup | 类型string默认值list |
| sortable | 是否可排序, 只读模式下不可拖拽 | 类型boolean默认值true |
| fileKey | 上传文件的参数名 | 类型string默认值attachment.defaultFileKey |
| fileSize | 上传文件的大小限制, 单位B | 类型number默认值attachment.defaultFileSize |
| useChunk | 是否开启分片上传 | 类型boolean版本1.5.2 |
| chunkSize | 分片大小 | 类型number默认值attachment.defaultChunkSize版本1.5.2 |
| chunkThreads | 分片上传并发数 | 类型number默认值attachment.defaultChunkThreads版本1.5.2 |
| pictureWidth | 图片尺寸， 只适用于 listType 为 picture 和 picture-card | 类型number |
| count | 自定义附件数量 | 类型number |
| max | 同时上传文件的最大数量,0表示无限制(设置 multiple 为 false 后, max 无效) | 类型number |
| showHistory | 可显示操作历史记录 | 类型boolean |
| listLimit | 上传列表最大显示数量，只适用于只读模式 | 类型number |
| downloadAll | 是否显示全部下载按钮，只适用于只读模式， 必须配置attachment.getDownloadAllUrl | 类型boolean ButtonProps默认值true |
| bucketName | 附件上传的桶名 | 类型string |
| bucketDirectory | 附件上传的桶目录 | 类型string |
| storageCode | 附件存储编码 | 类型string |
| template | 附件模板 | 类型{ bucketName?: string, bucketDirectory?: storageCode?:string, attachmentUUID: isPublic?: boolean }版本1.5.5 |
| showSize | 显示文件大小信息 | 类型boolean默认值true版本1.5.3 |
| previewTarget | 预览链接跳转对象， 如要在iframe内预览， 可给 iframe 指定 name={previewTarget} | 类型string默认值'attachment-preview'版本1.5.1 |
| isPublic | 是否是公共的，attachment配置中相关钩子会使用该属性 | 类型boolean版本1.5.0 |
| attachments | 附件列表 | 类型(AttachmentFile FileLike)[] |
| showValidation | 校验信息展示方式 | 类型newLine tooltip默认值viewMode == popup tooltip newLine |
| getUUID | 获取 uuid | 类型() => Promise\| string默认值attachment.getAttachmentUUID版本1.5.3 |
| buttons | 功能按钮，默认存在download和remove值，且可传递数组或自定义 Dom 格式，数组为可选值字符串+按钮配置属性对象 | 类型string[] [string, object] ReactNode[]默认值[['download', 'remove']]版本1.6.2 |
| onAttachmentsChange | 附件列表变更事件 | 类型(AttachmentFile[]) => void |
| beforeUpload | 上传文件之前的钩子，参数为上传的文件，可对文件在上传之前进行校验操作若返回 false 则停止上传并从列表充删除。支持返回一个 Promise 对象，Promise 对象 reject 或 resolve(false) 时则停止上传，resolve 时开始上传。 | 类型(attachment: AttachmentFile, list: AttachmentFile[]) => (boolean Promise)默认值- |
| onUploadProgress | 上传进度变化的回调 | 类型(percent: number, attachment: AttachmentFile) => void |
| onUploadSuccess | 上传成功的回调 | 类型(response: any, attachment: AttachmentFile) => void |
| onUploadError | 上传出错的回调 | 类型(error: Error, attachment: AttachmentFile) => void |
| onRemove | 删除文件回调，用于发送删除请求, 返回 false 或抛出异常将中止删除 | 类型({ attachment: AttachmentFile, bucketName?: string, bucketDirectory?: storageCode?:string, attachmentUUID: isPublic?: boolean }, multiple: boolean) => |
| getPreviewUrl | 获取预览地址，默认使用 AttachmentFile.url，返回空则不可预览。其中函数的返回值为 (() => string \| Promise< string>) 时，仅支持 listType 为 text 的情况 | 类型({ attachment: AttachmentFile, bucketName?: string, bucketDirectory?: storageCode?:string, attachmentUUID: isPublic?: boolean }) => (string (() string Promise< string>) undefined)版本1.6.3 |
| removeImmediately | 是否立即删除 | 类型boolean默认值true版本1.6.5 |
| onTempRemovedAttachmentsChange | 临时删除文件变化回调，removeImmediately为 false 时生效 | 类型(tempRemovedAttachments?: AttachmentFile[]) => void版本1.6.5 |
| filesLengthLimitNotice | 上传文件时，数量超过限定数量的自定义提示 | 类型(defaultInfo: string) => void默认值(defaultInfo) Modal.error(defaultInfo)版本1.6.6 |
| countTextRenderer | 上传按钮中数量显示 renderer | 类型(count?: number, max?: defaultCountText?: ReactNode) => ReactNode版本1.6.6 |

更多属性请参考FormField和Button。

附件对象参考AttachmentFile

全局配置参考attachment

### Attachment.Group

1.5.0 版本新增组件。

附件组, 属性如下:

| 属性 | 说明 | 类型/默认值 |
| --- | --- | --- |
| viewMode | 上传列表的显示模式，可选 list \| popup | 类型string默认值popup |
| text | 按钮文字 | 类型ReactNode |
| count | 自定义附件数量, 未设置时会自动获取组内的附件数量 | 类型number |

更多属性请参考Button。

### Attachment.Dragger

1.5.2 版本新增组件。

### Attachment Instance Methods

| 属性 | 说明 | 属性名/返回值类型/版本 |
| --- | --- | --- |
| remove | 删除临时移除文件 | 返回值类型void版本1.6.5 |
| reset | 还原临时移除文件 | 返回值类型void版本1.6.5 |



================================================================================
文件: AutoComplete.md
路径: doc\AutoComplete.md
================================================================================

# AutoComplete 自动补全

输入框自动完成功能。

## 何时使用

- 需要一个输入框而不是选择器。
- 需要输入建议/辅助提示。

和 Select 的区别是：

- AutoComplete 是一个带提示的文本输入框，用户可以自由输入，关键词是辅助输入。
- Select 是在限定的可选项中进行选择，关键词是选择。

## 代码演示

## 基本使用

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { AutoComplete, DataSet } from 'choerodon-ui/pro';

class App extends React.Component {
  state = {
    options: new DataSet({
      fields: [{
        name: 'value', type: 'string',
      }, {
        name: 'meaning', type: 'string',
      }],
      data: [{
        value: '1',
        meaning: '1',
      }, {
        value: '12',
        meaning: '12',
      }, {
        value: '123',
        meaning: '123',
      }],
    }),
  }

  render() {
    const { options } = this.state
    const optionRenderer = ({ value }) => {
```

## 动态选项

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { AutoComplete, DataSet } from 'choerodon-ui/pro';

class App extends React.Component {
  state = {
    options: new DataSet({
      fields: [{
        name: 'value', type: 'string',
      }, {
        name: 'meaning', type: 'string',
      }],
    }),
  }

  render() {
    const { options } = this.state
    const handeValueChange = (v) => {
      const value = v.target.value
      const suffixList = ['@qq.com', '@163.com', '@hand-china.com']
      if (value.indexOf('@') !== -1) {
        options.loadData([])
      } else {
        options.loadData(suffixList.map(suffix => ({
          value: `${value}${suffix}`,
          meaning: `${value}${suffix}`,
        })))
      }
```

## 绑定数据源

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { AutoComplete, DataSet, Tooltip, Icon } from 'choerodon-ui/pro';

const data = [{
  user: 'wu',
}];

const renderer = ({ text }) => (
  <div style={{ width: '100%' }}>
    {text && <Icon type="people" />} {text}
  </div>
);

const optionRenderer = ({ text }) => (
  <Tooltip title={text} placement="left">
    {renderer({ text })}
  </Tooltip>
);

function handleDataSetChange({ record, name, value, oldValue }) {
  console.log('[dataset newValue]', value, '[oldValue]', oldValue, `[record.get('${name}')]`, record.get(name));
}

class App extends React.Component {
  ds = new DataSet({
    data,
    fields: [
```

## 修改匹配方式

修改匹配方式。例如不区分大小写。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { AutoComplete, DataSet } from 'choerodon-ui/pro';

const matcher = (value, inputText) => {
  return value.toLocaleLowerCase().includes(inputText.toLocaleLowerCase());
};

class App extends React.Component {
  state = {
    options: new DataSet({
      fields: [
        {
          name: 'value',
          type: 'string',
        },
        {
          name: 'meaning',
          type: 'string',
        },
      ],
      data: [
        {
          value: 'Test',
          meaning: 'Test',
        },
        {
          value: 'teSt',
```

## API

| 属性 | 说明 | 类型/默认值 |
| --- | --- | --- |
| options | 自动完成的数据源 | 类型DataSet |
| optionRenderer | 渲染 Option 文本的钩子 | 类型({ record, text, value }) => ReactNode |
| matcher | 匹配器 | 类型(value,inputText) => boolean默认值(value, inputText) value.indexOf(inputText) !== -1 |

更多属性请参考TriggerField。



================================================================================
文件: Avatar.md
路径: doc\Avatar.md
================================================================================

# Avatar 头像

用来代表用户或事物，支持图片、图标或字符展示。

## 何时使用

当想简单展示用户时。

## 代码演示

## 基本

头像有三种尺寸，两种形状可选。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Avatar } from 'choerodon-ui';

ReactDOM.render(
  <div>
    <div>
      <span style={{ marginRight: 10 }}>
        <Avatar size={64} icon="person" />
      </span>
      <span style={{ marginRight: 10 }}>
        <Avatar size="large" icon="person" />
      </span>
      <span style={{ marginRight: 10 }}>
        <Avatar icon="person" />
      </span>
      <Avatar size="small" icon="person" />
    </div>
    <div>
      <span style={{ marginRight: 10 }}>
        <Avatar shape="square" size={64} icon="person" />
      </span>
      <span style={{ marginRight: 10 }}>
        <Avatar shape="square" size="large" icon="person" />
      </span>
      <span style={{ marginRight: 10 }}>
        <Avatar shape="square" icon="person" />
      </span>
      <Avatar shape="square" size="small" icon="person" />
    </div>
  </div>,
  document.getElementById('container'),
);
```

## 类型

支持三种类型：图片、Icon 以及字符，其中 Icon 和字符型可以自定义图标颜色及背景色。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Avatar } from 'choerodon-ui';

ReactDOM.render(
  <div>
    <span style={{ marginRight: 10 }}>
      <Avatar icon="person" />
    </span>
    <span style={{ marginRight: 10 }}>
      <Avatar>U</Avatar>
    </span>
    <span style={{ marginRight: 10 }}>
      <Avatar>USER</Avatar>
    </span>
    <span style={{ marginRight: 10 }}>
      <Avatar src="https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png" />
    </span>
    <span style={{ marginRight: 10 }}>
      <Avatar style={{ color: '#f56a00', backgroundColor: '#fde3cf' }}>
        U
      </Avatar>
    </span>
    <Avatar style={{ backgroundColor: '#87d068' }} icon="user" />
  </div>,
  document.getElementById('container'),
);
```

## 自动调整字符大小

对于字符型的头像，当字符串较长时，字体大小可以根据头像宽度自动调整。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Avatar, Button } from 'choerodon-ui';

const UserList = ['U', 'Lucy', 'Tom', 'Edward'];
const colorList = ['#f56a00', '#7265e6', '#ffbf00', '#00a2ae'];

class Autoset extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      user: UserList[0],
      color: colorList[0],
    };
  }

  changeUser = () => {
    const index = UserList.indexOf(this.state.user);
    this.setState({
      user: index < UserList.length - 1 ? UserList[index + 1] : UserList[0],
      color: index < colorList.length - 1 ? colorList[index + 1] : colorList[0],
    });
  }

  render() {
    return (
      <div>
        <Avatar style={{ backgroundColor: this.state.color, verticalAlign: 'middle' }} size="large">
          {this.state.user}
```

## 带徽标的头像

通常用于消息提示。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Avatar, Badge } from 'choerodon-ui';

ReactDOM.render(
  <div>
    <span style={{ marginRight: 24 }}>
      <Badge count={1}><Avatar shape="square" icon="person" /></Badge>
    </span>
    <span>
      <Badge dot><Avatar shape="square" icon="person" /></Badge>
    </span>
  </div>,
  document.getElementById('container'));
```

## 头像组

头像组合展现。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Avatar, Divider, Tooltip } from 'choerodon-ui';

ReactDOM.render(
  <>
    <Avatar.Group>
      <Avatar src="https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png" />
      <Avatar style={{ backgroundColor: '#f56a00' }}>K</Avatar>
      <Tooltip title="User" placement="top">
        <Avatar style={{ backgroundColor: '#87d068' }} icon="person" />
      </Tooltip>
      <Avatar style={{ backgroundColor: '#1890ff' }} icon="event_available-o" />
    </Avatar.Group>
    <Divider />
    <Avatar.Group size={64}>
      <Avatar src="https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png" />
      <Avatar style={{ backgroundColor: '#f56a00' }}>K</Avatar>
      <Tooltip title="User" placement="top">
        <Avatar style={{ backgroundColor: '#87d068' }} icon="person" />
      </Tooltip>
      <Avatar style={{ backgroundColor: '#1890ff' }} icon="event_available-o" />
    </Avatar.Group>
    <Divider />
    <Avatar.Group maxCount={2} size="large">
      <Avatar src="https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png" />
      <Avatar style={{ backgroundColor: '#f56a00' }}>K</Avatar>
      <Tooltip title="User" placement="top">
        <Avatar style={{ backgroundColor: '#87d068' }} icon="person" />
      </Tooltip>
      <Avatar style={{ backgroundColor: '#1890ff' }} icon="event_available-o" />
    </Avatar.Group>
    <Divider />
    <Avatar.Group maxCount={2} size="small" maxPopoverTrigger="click">
      <Avatar src="https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png" />
      <Avatar style={{ backgroundColor: '#f56a00' }}>K</Avatar>
      <Tooltip title="User" placement="top">
        <Avatar style={{ backgroundColor: '#87d068' }} icon="person" />
      </Tooltip>
      <Avatar style={{ backgroundColor: '#1890ff' }} icon="event_available-o" />
    </Avatar.Group>
    <Divider />
    <Avatar.Group maxCount={2} size="small" maxPopoverTrigger="click">
      <Avatar src="https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png" />
      <Avatar style={{ backgroundColor: '#f56a00' }}>K</Avatar>
      <Tooltip title="User" placement="top">
```

## API

| 属性名 | 说明 | 类型/默认值 |
| --- | --- | --- |
| icon | 设置头像的图标类型，参考Icon组件 | 类型string默认值- |
| shape | 指定头像的形状 | 类型Enum{ 'circle', 'square' }默认值circle |
| size | 设置头像的大小 | 类型Enum{ 'large', 'small', 'default' }默认值default |
| src | 图片类头像的资源地址 | 类型string默认值- |
| alt | 图像无法显示时的替代文本 | 类型string默认值- |

### Avatar.Group (1.5.6)

| 属性名 | 说明 | 类型/默认值 |
| --- | --- | --- |
| maxCount | 显示的最大头像个数 | 类型number默认值- |
| maxPopoverPlacement | 多余头像气泡弹出位置 | 类型top\|bottom默认值top |
| maxPopoverTrigger | 设置多余头像 Popover 的触发方式 | 类型hover\|focus\|click默认值hover |
| maxStyle | 多余头像样式 | 类型CSSProperties默认值- |
| size | 设置头像的大小 | 类型Enum{ 'large', 'small', 'default' number默认值default |



================================================================================
文件: BackTop.md
路径: doc\BackTop.md
================================================================================

# BackTop 回到顶部

指定BackTop的target属性时(非window)，获取到的值可能为null||undefined，此时请将BackTop置于指定的滚动容器之后，确保target获取到有效滚动容器。此问题将会在后续版本修复。

返回页面顶部的操作按钮。

## 何时使用

- 当页面内容区域比较长时；
- 当用户需要频繁返回顶部查看相关内容时。

## 代码演示

## 基本

最简单的用法。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { BackTop } from 'choerodon-ui';

ReactDOM.render(
  <div>
    <BackTop
      target={() => document.getElementById('main')}
      visibilityHeight={80}
    />
    Scroll down to see the bottom-right
    <strong style={{ color: 'rgba(64, 64, 64, 0.6)' }}> gray </strong>
    button.
  </div>,
  document.getElementById('container'),
);
```

## 自定义样式

可以自定义回到顶部按钮的样式，限制宽高：40px * 40px。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { BackTop } from 'choerodon-ui';

const style = {
  bottom: '1rem',
  height: '40px',
  width: '40px',
  lineHeight: '40px',
  borderRadius: '4px',
  backgroundColor: '#1088e9',
  color: '#fff',
  textAlign: 'center',
  fontSize: '20px',
};

ReactDOM.render(
  <div>
    <BackTop
      style={style}
      target={() => document.getElementById('main')}
      visibilityHeight={80}
    >
      <div className="c7n-back-top-inner">UP</div>
    </BackTop>
    Scroll down to see the bottom-right
    <strong style={{ color: '#1088e9' }}> blue </strong>
    button.
```

## 选定监听滚动元素

可以自定义监听滚动目标元素。

# Content Area

```javascript
import React, { useRef } from 'react';
import ReactDOM from 'react-dom';
import { BackTop } from 'choerodon-ui';

const App = () => {
  const containerRef = useRef();

  return (
    <>
      <div
        id="scrollContainer"
        ref={containerRef}
        style={{ height: 200, overflow: 'scroll' }}
      >
        <div style={{ height: 400, background: 'hotpink' }}>
          <h1>Content Area</h1>
        </div>
      </div>
      <BackTop target={() => containerRef.current} visibilityHeight={80} />
    </>
  );
};

ReactDOM.render(<App />, document.getElementById('container'));
```

## API

有默认样式，距离底部50px，可覆盖。

自定义样式宽高不大于 40px * 40px。

| 属性名 | 说明 | 类型/默认值 |
| --- | --- | --- |
| target | 设置需要监听其滚动事件的元素，值为一个返回对应 DOM 元素的函数 | 类型Function默认值() => window |
| visibilityHeight | 滚动高度达到此参数值才出现BackTop | 类型number默认值400 |
| onClick | 点击按钮的回调函数 | 类型Function默认值- |

### Q&A

为什么项目中使用BackTop不生效？

##### 问题原因

- BackTop中的target属性默认值为window，在项目中大部分情况window为固定状态，未发生滚动，所以未生效。
- BackTop中的visibilityHeight属性默认值为400，当滚动高度未达到时BackTop也不会生效。

##### 解决方案

设置BackTop中target属性为有效的滚动容器，并根据实际情况将visibilityHeight的属性值设置为有效值。



================================================================================
文件: Badge.md
路径: doc\Badge.md
================================================================================

# Badge 徽标数

图标右上角的圆形徽标数字。

## 何时使用

一般出现在通知图标或头像的右上角，用于显示需要处理的消息条数，通过醒目视觉形式吸引用户处理。

## 代码演示

## 基本

简单的徽章展示，当count为0时，默认不显示，但是可以使用showZero修改为显示。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Badge } from 'choerodon-ui';

ReactDOM.render(
  <div>
    <Badge count={5}>
      <a href="#" className="head-example" />
    </Badge>
    <Badge count={0} showZero>
      <a href="#" className="head-example" />
    </Badge>
  </div>,
  document.getElementById('container'));
```

## 独立使用

不包裹任何元素即是独立使用，可自定样式展现。

在右上角的 badge 则限定为红色。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Badge } from 'choerodon-ui';

ReactDOM.render(
  <div>
    <Badge count={25} />
    <Badge count={4} style={{ backgroundColor: '#fff', color: '#999', boxShadow: '0 0 0 1px #d9d9d9 inset' }} />
    <Badge count={109} style={{ backgroundColor: '#52c41a' }} />
  </div>,
  document.getElementById('container'));
```

## 封顶数字

超过overflowCount的会显示为${overflowCount}+，默认的overflowCount为99。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Badge } from 'choerodon-ui';

ReactDOM.render(
  <div>
    <Badge count={99}>
      <a href="#" className="head-example" />
    </Badge>
    <Badge count={100}>
      <a href="#" className="head-example" />
    </Badge>
    <Badge count={99} overflowCount={10}>
      <a href="#" className="head-example" />
    </Badge>
    <Badge count={1000} overflowCount={999}>
      <a href="#" className="head-example" />
    </Badge>
  </div>,
  document.getElementById('container'));
```

## 文字提示红点

没有具体的数字。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Badge, Icon } from 'choerodon-ui';

ReactDOM.render(
  <div>
    <Badge dot>
      <Icon type="notification" />
    </Badge>
    <Badge count={0} dot>
      <Icon type="notification" />
    </Badge>
    <Badge dot>
      <a href="#">Link something</a>
    </Badge>
  </div>,
  document.getElementById('container'));
```

## 可点击

用 a 标签进行包裹即可。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Badge } from 'choerodon-ui';

ReactDOM.render(
  <a href="#">
    <Badge count={5}>
      <span className="head-example" />
    </Badge>
  </a>,
  document.getElementById('container'));
```

## 动态

展示动态变化的效果。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Badge, Button, Icon, Switch } from 'choerodon-ui';

const ButtonGroup = Button.Group;

class Demo extends React.Component {
  state = {
    count: 5,
    show: true,
  };

  increase = () => {
    const count = this.state.count + 1;
    this.setState({ count });
  };

  decline = () => {
    let count = this.state.count - 1;
    if (count < 0) {
      count = 0;
    }
    this.setState({ count });
  };

  onChange = (show) => {
    this.setState({ show });
  };

  render() {
    return (
```

## 状态点

用于表示状态的小圆点。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Badge } from 'choerodon-ui';

ReactDOM.render(
  <div>
    <Badge status="success" />
    <Badge status="error" />
    <Badge status="default" />
    <Badge status="processing" />
    <Badge status="warning" />
    <br />
    <Badge status="success" text="Success" />
    <br />
    <Badge status="error" text="Error" />
    <br />
    <Badge status="default" text="Default" />
    <br />
    <Badge status="processing" text="Processing" />
    <br />
    <Badge status="warning" text="Warning" />
  </div>,
  document.getElementById('container'));
```

## 多彩徽标

我们添加了多种预设色彩的徽标样式，用作不同场景使用。如果预设值不能满足你的需求，可以设置为具体的色值。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Badge, Divider } from 'choerodon-ui';

const colors = [
  'pink',
  'red',
  'yellow',
  'orange',
  'cyan',
  'green',
  'blue',
  'purple',
  'geekblue',
  'magenta',
  'volcano',
  'gold',
  'lime',
  'dark',
  'gray',
];

ReactDOM.render(
  <>
    <Divider orientation="left">Presets</Divider>
    <div>
      {colors.map((color) => (
        <div key={color}>
          <Badge color={color} text={color} />
        </div>
      ))}
    </div>
    <Divider orientation="left">Custom</Divider>
    <>
      <Badge color="#f50" text="#f50" />
      <br />
      <Badge color="#2db7f5" text="#2db7f5" />
      <br />
      <Badge color="#87d068" text="#87d068" />
      <br />
      <Badge color="#108ee9" text="#108ee9" />
    </>
```

## API

```jsx
<Badge count={5}>
  <a href="#" className="head-example" />
</Badge>
```

```jsx
<Badge count={5} />
```

| 属性名 | 说明 | 类型/默认值/版本 |
| --- | --- | --- |
| count | 展示的数字，大于 overflowCount 时显示为${overflowCount}+，为 0 时隐藏 | 类型ReactNode |
| dot | 不展示数字，只有一个小红点 | 类型boolean默认值false |
| offset | 设置状态点的位置偏移，格式为[x, y] | 类型[number, number] |
| overflowCount | 展示封顶的数字值 | 类型number默认值99 |
| showZero | 当数值为 0 时，是否展示 Badge | 类型boolean默认值false |
| status | 设置 Badge 为状态点 | 类型Enum{ 'success', 'processing, 'default', 'error', 'warning' }默认值'' |
| text | 在设置了status或color的前提下有效，设置状态点的文本 | 类型ReactNode默认值'' |
| color | 自定义小圆点的颜色 | 类型string版本1.5.0-beta.0 |
| size | 在设置了count的前提下有效，设置小圆点的大小 | 类型default\|small默认值default版本1.5.0-beta.0 |
| title | 设置鼠标放在状态点上时显示的文字 | 类型string版本1.5.0-beta.0 |



================================================================================
文件: BarCode.md
路径: doc\BarCode.md
================================================================================

# BarCode 条码

展示二维码或条码

## 何时使用

用于将信息存储在二维码或条形码中。

1.5.0 版本新增组件。

## 代码演示

## 二维码

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { BarCode } from 'choerodon-ui';

ReactDOM.render(
  <BarCode value="我是二维码" />,
  document.getElementById('container'),
);
```

## 条形码

设置type='bar'可以显示条形码。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { BarCode } from 'choerodon-ui';

class Demo extends React.Component {
  constructor() {
    super();
    this.state = {};
  }

  render() {
    return <BarCode type="bar" value="123456789" />;
  }
}

ReactDOM.render(<Demo />, document.getElementById('container'));
```

## 设置颜色

可以对二维码/条形码设置背景色或者前景色。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { BarCode } from 'choerodon-ui';

class Demo extends React.Component {
  constructor() {
    super();
    this.state = {};
  }

  render() {
    return (
      <div
        style={{ display: 'flex', width: 400, justifyContent: 'space-around' }}
      >
        <BarCode
          value="我是一个有颜色的二维码"
          bgColor="#3f51b5"
          fgColor="#FFFFFF"
        />
        <BarCode
          type="bar"
          value="123456789"
          bgColor="#3f51b5"
          fgColor="#FFFFFF"
        />
      </div>
    );
  }
}

ReactDOM.render(<Demo />, document.getElementById('container'));
```

## 设置图片

在二维码中设置图片。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { BarCode } from 'choerodon-ui';

ReactDOM.render(
  <BarCode
    value="我是一个有图片的二维码"
    imageSettings={{
      src:
        'https://zos.alipayobjects.com/rmsportal/jkjgkEfvpUPVyRjUImniVslZfWPnJuuZ.png',
      height: 30,
      width: 30,
      excavate: true,
    }}
  />,
  document.getElementById('container'),
);
```

## 下载二维码

可以把二维码当做图片下载下来。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { BarCode } from 'choerodon-ui';

class App extends React.Component {
  download = () => {
    const canvas = document.querySelector('.HpQrcode > canvas');
    this.downloadRef.href = canvas.toDataURL();
    this.downloadRef.download = 'QRCode.png';
  };

  render() {
    return (
      <div className="HpQrcode">
        <div style={{ margin: '10 0' }}>
          <a
            ref={(ref) => {
              this.downloadRef = ref;
            }}
            onClick={this.download}
          >
            点击这里下载二维码
          </a>
        </div>
        <BarCode value="我是二维码" />
      </div>
    );
  }
}

ReactDOM.render(<App />, document.getElementById('container'));
```

## 自定义条形码样式

使用option 参数可以自定义条形码样式。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { BarCode } from 'choerodon-ui';

class Demo extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }

  render() {
    const option = {
      width: 3,
      height: 50,
      text: 'Hi',
      textAlign: 'left',
      textPosition: 'top',
      textMargin: 15,
      fontSize: 24,
    };

    return <BarCode type="bar" value="123456789" option={option} />;
  }
}

ReactDOM.render(<Demo />, document.getElementById('container'));
```

## API

| 属性名 | 说明 | 类型/默认值 |
| --- | --- | --- |
| value | 文本字符串 | 类型string |
| renderAs | 渲染方式 | 类型'canvas' 'svg'默认值canvas |
| size | 二维码大小 | 类型number默认值128 |
| bgColor | 背景色 | 类型string默认值#FFFFFF |
| fgColor | 前景色 | 类型string默认值#000000 |
| level | 二维码容错等级 | 类型string 可选值 ('L' 'M' 'Q' 'H')默认值L |
| includeMargin | 二维码是否有外边距 | 类型boolean默认值false |
| imageSettings | 二维码图片设置 | 类型object |
| option | 条形码选项,参考option | 类型object |

### option

用于设置条形码参数。

| 属性名 | 说明 | 类型/默认值 |
| --- | --- | --- |
| format | 条形码格式类型 | 类型string默认值auto (CODE128) |
| displayValue | 是否显示文本 | 类型boolean默认值true |
| text | 显示文本 | 类型string |
| width | 宽度 | 类型number默认值2 |
| height | 高度 | 类型number默认值100 |
| font | 字体 | 类型string默认值monospace |
| textAlign | 文本排列方式 | 类型string默认值center |
| textPosition | 文本位置 | 类型string默认值bottom |
| textMargin | 字体间距 | 类型number默认值2 |
| fontSize | 字体大小 | 类型number默认值20 |
| background | 背景颜色（优先级高于bgColor） | 类型string默认值#ffffff |
| lineColor | 线条颜色（颜色高于fgColor） | 类型string默认值#000000 |
| margin | 边距（包含上下左右） | 类型number默认值10 |
| marginTop | 上边距 | 类型number |
| marginRight | 右边距 | 类型number |
| marginBottom | 下边距 | 类型number |
| marginLeft | 左边距 | 类型number |



================================================================================
文件: Board.md
路径: doc\Board.md
================================================================================

# Board 看板

多视图切换查看。

## 何时使用

基于表格默认视图，结合后端接口实现多视图切换查看。(当前 demo 接口为本地 mock，存在新增视图重复、切换视图异常的情况，实际项目中使用无此问题。)

## 代码演示

## 多视图切换

基于表格默认视图，结合后端接口实现多视图切换查看。

| 编号 | 姓名 | 年龄 | 性别 | 分组 | 操作 |
| --- | --- | --- | --- | --- | --- |
|  | 12 | 蔡超texttexttexttexttexttexttexttexttext | 26 | 男 |  |
|  | 11 | 黄敏texttexttexttexttexttexttexttexttext | 31 | 女 |  |
|  | 19 | 吕杰texttexttexttexttexttexttexttexttext | 33 | 男 |  |
|  | 15 | 戴刚texttexttexttexttexttexttexttexttext | 35 | 女 |  |
|  | 7 | 赵秀英texttexttexttexttexttexttexttexttext | 36 | 女 |  |
|  | 16 | 许磊texttexttexttexttexttexttexttexttext | 44 | 男 |  |
|  | 4 | 叶芳texttexttexttexttexttexttexttexttext | 45 | 女 |  |
|  | 5 | 雷秀兰texttexttexttexttexttexttexttexttext | 49 | 男 |  |
|  | 6 | 唐静texttexttexttexttexttexttexttexttext | 51 | 男 |  |
|  | 13 | 史涛texttexttexttexttexttexttexttexttext | 52 | 女 |  |
|  | 9 | 谢秀兰texttexttexttexttexttexttexttexttext | 57 | 男 |  |
|  | 18 | 程丽texttexttexttexttexttexttexttexttext | 57 | 男 |  |
|  | 0 | 彭霞texttexttexttexttexttexttexttexttext | 63 | 女 |  |
|  | 8 | 杨军texttexttexttexttexttexttexttexttext | 64 | 男 |  |
|  | 2 | 孟艳texttexttexttexttexttexttexttexttext | 70texttexttexttexttexttexttexttexttexttexttexttexttexttexttexttexttexttexttexttexttext | 男 |  |
|  | 17 | 毛强texttexttexttexttexttexttexttexttext | 78texttexttexttexttexttexttexttexttexttexttexttexttexttexttexttexttexttexttexttexttext | 女 |  |
|  | 10 | 冯杰texttexttexttexttexttexttexttexttext | 80texttexttexttexttexttexttexttexttexttexttexttexttexttexttexttexttexttexttexttexttext | 女 |  |
|  | 1 | 孔秀兰texttexttexttexttexttexttexttexttext | 84texttexttexttexttexttexttexttexttexttexttexttexttexttexttexttexttexttexttexttexttext | 男 |  |
|  | 3 | 邱芳texttexttexttexttexttexttexttexttext | 86texttexttexttexttexttexttexttexttexttexttexttexttexttexttexttexttexttexttexttexttext | 男 |  |
|  | 14 | 廖军texttexttexttexttexttexttexttexttext | 89texttexttexttexttexttexttexttexttexttexttexttexttexttexttexttexttexttexttexttexttext | 女 |  |

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { observer } from 'mobx-react';
import {
  DataSet,
  Table,
  Form,
  TextField,
  NumberField,
  CheckBox,
  SelectBox,
  Modal,
  Button,
  Board,
} from 'choerodon-ui/pro';

const { Column } = Table;

const codeCodeDynamicProps = {
  // 代码code_code值绑定 为 字段code 的 值列表的值字段为code.codevalue
  bind({ record }) {
    if (record) {
      const field = record.getField('code');
      if (field) {
        const valueField = field.get('valueField');
        return `code.${valueField}`;
      }
    }
  },
};

const codeDescriptionDynamicProps = {
  bind({ record }) {
    if (record) {
      const field = record.getField('code');
      if (field) {
        const textField = field.get('textField');
        return `code.${textField}`;
      }
    }
  },
};

class EditButton extends React.Component {
  handleClick = (e) => {
    const { record, onClick } = this.props;
    onClick(record, e);
  };

  render() {
    return (
      <Button
        funcType="flat"
```

## API

### Board

| 属性名 | 说明 | 类型/默认值/版本 |
| --- | --- | --- |
| viewVisible | 控制组件视图渲染, 对应视图 false 视图新建和切换被隐藏 | 类型{ card: boolean, kanban: table: boolean} boolean默认值true版本1.6.1 |
| renderCommand | 渲染操作按钮 | 类型({ command, viewMode, record, dataSet }) => command版本1.6.1 |
| onConfigChange | 配置切换事件 | 类型(props) => void版本1.6.1 |
| cardProps | 卡片配置 | 版本1.6.1 |
| tableProps | 表格配置 | 版本1.6.1 |
| kanbanProps | 看板配置 | 版本1.6.1 |

更多属性请参考Table。
更多个性化存储实例请参考Table#用户个性化。



================================================================================
文件: Breadcrumb.md
路径: doc\Breadcrumb.md
================================================================================

# Breadcrumb 面包屑

显示当前页面在系统层级结构中的位置，并能向上返回。

## 何时使用

- 当系统拥有超过两级以上的层级结构时；
- 当需要告知用户『你在哪里』时；
- 当需要向上导航的功能时。

## 代码演示

## 基本

最简单的用法。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Breadcrumb } from 'choerodon-ui';

ReactDOM.render(
  <Breadcrumb>
    <Breadcrumb.Item>Home</Breadcrumb.Item>
    <Breadcrumb.Item><a href="">Application Center</a></Breadcrumb.Item>
    <Breadcrumb.Item><a href="">Application List</a></Breadcrumb.Item>
    <Breadcrumb.Item>An Application</Breadcrumb.Item>
  </Breadcrumb>,
  document.getElementById('container'));
```

## 带有图标的

图标放在文字前面。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Breadcrumb, Icon } from 'choerodon-ui';

ReactDOM.render(
  <Breadcrumb>
    <Breadcrumb.Item href="">
      <Icon type="home" />
    </Breadcrumb.Item>
    <Breadcrumb.Item href="">
      <Icon type="user" />
      <span>Application List</span>
    </Breadcrumb.Item>
    <Breadcrumb.Item>
      Application
    </Breadcrumb.Item>
  </Breadcrumb>,
  document.getElementById('container'));
```

## 其它路由

和react-router@4，或其他路由进行结合使用。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import {
  HashRouter as Router,
  Route,
  Switch,
  Link,
  withRouter,
} from 'react-router-dom';
import { Breadcrumb, Alert } from 'choerodon-ui';

const Apps = () => (
  <ul className="app-list">
    <li>
      <Link to="/apps/1">Application1</Link>：
      <Link to="/apps/1/detail">Detail</Link>
    </li>
    <li>
      <Link to="/apps/2">Application2</Link>：
      <Link to="/apps/2/detail">Detail</Link>
    </li>
  </ul>
);

const breadcrumbNameMap = {
  '/apps': 'Application List',
  '/apps/1': 'Application1',
  '/apps/2': 'Application2',
  '/apps/1/detail': 'Detail',
  '/apps/2/detail': 'Detail',
};
const Home = withRouter((props) => {
  const { location } = props;
  const pathSnippets = location.pathname.split('/').filter((i) => i);
  const extraBreadcrumbItems = pathSnippets.map((_, index) => {
    const url = `/${pathSnippets.slice(0, index + 1).join('/')}`;
    return (
      <Breadcrumb.Item key={url}>
```

## 分隔符

使用separator=">"可以自定义分隔符。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Breadcrumb } from 'choerodon-ui';

ReactDOM.render(
  <Breadcrumb separator=">">
    <Breadcrumb.Item>Home</Breadcrumb.Item>
    <Breadcrumb.Item href="">Application Center</Breadcrumb.Item>
    <Breadcrumb.Item href="">Application List</Breadcrumb.Item>
    <Breadcrumb.Item>An Application</Breadcrumb.Item>
  </Breadcrumb>,
  document.getElementById('container'));
```

## 带下拉菜单的面包屑

面包屑支持下拉菜单。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';

import { Breadcrumb } from 'choerodon-ui';

const renderLink = ({ listItemName }) => {
  return <span>{listItemName}</span>;
};

const data = [
  {
    href: 'https://open-hand.gitee.io/choerodon-ui',
    listChildren: renderLink,
    listItemName: '蔬菜',
  },
  {
    href: 'https://open-hand.gitee.io/choerodon-ui',
    listChildren: renderLink,
    listItemName: '上衣',
  },
  {
    href: 'https://open-hand.gitee.io/choerodon-ui',
    listChildren: renderLink,
    listItemName: '手表',
  },
  {
    href: 'https://open-hand.gitee.io/choerodon-ui',
    listChildren: renderLink,
    listItemName: '外套',
  },
  {
    href: 'https://open-hand.gitee.io/choerodon-ui',
    listChildren: renderLink,
    listItemName: '项链',
  },
  {
    href: 'https://open-hand.gitee.io/choerodon-ui',
    listChildren: renderLink,
```

## 带下拉菜单的面包屑

面包屑支持下拉菜单。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Breadcrumb, Menu } from 'choerodon-ui';

const menu = (
  <Menu className="menu-dropdown">
    <Menu.Item>
      <a
        target="_blank"
        rel="noopener noreferrer"
        href="http://www.alipay.com/"
      >
        General
      </a>
    </Menu.Item>
    <Menu.Item>
      <a
        target="_blank"
        rel="noopener noreferrer"
        href="http://www.taobao.com/"
      >
        Layout
      </a>
    </Menu.Item>
    <Menu.Item>
      <a target="_blank" rel="noopener noreferrer" href="http://www.tmall.com/">
        Navigation
      </a>
    </Menu.Item>
  </Menu>
);

ReactDOM.render(
  <Breadcrumb separator=">">
    <Breadcrumb.Item>首页</Breadcrumb.Item>
    <Breadcrumb.Item>
      <a href="">办公用品</a>
    </Breadcrumb.Item>
```

## API

| 属性名 | 说明 | 类型/可选值/默认值 |
| --- | --- | --- |
| itemRender | 自定义链接函数，和 react-router 配置使用 | 类型(route, params, routes, paths) => ReactNode默认值- |
| params | 路由的参数 | 类型object默认值- |
| routes | router 的路由栈信息 | 类型object[]默认值- |
| separator | 分隔符自定义 | 类型string\|ReactNode默认值'/' |

## BreadcrumbItem API

| 属性名 | 说明 | 类型/可选值/默认值 |
| --- | --- | --- |
| separator | 分隔符自定义 | 类型ReactNode默认值- |
| href | 链接地址 | 类型string默认值- |
| overlay | 下拉框内渲染 | 类型object[]默认值- |
| dropdownProps | 下拉框的属性配置详细请查看基础组件的dropdown | 类型DropDownProps默认值- |
| menuList | 配置横向下拉列表的展示 | 类型object[]默认值- |
| ListProps | 当使用menulist的渲染 | 类型object[]默认值- |
| onClick | 点击触发的回调函数 | 类型(e) => {}默认值- |

## menuList API

| 属性名 | 说明 | 类型/可选值/默认值 |
| --- | --- | --- |
| listItemName | 列表显示文字 | 类型string默认值- |
| href | 链接地址 | 类型string默认值- |
| listChildren | 可以获取显示文字渲染出想要的展示 | 类型({ listItemName, href }: listItemName: string, href: string }) => React.ReactNode默认值- |
| onClick | 点击触发回调函数 | 类型(e) => {}默认值- |

2.0 之后，linkRender和nameRender被移除，请使用itemRender来代替。

### 和 browserHistory 配合

和 react-router 一起使用时，默认生成的 url 路径是带有#的，如果和 browserHistory 一起使用的话，你可以使用itemRender属性定义面包屑链接。

```jsx
import { Link } from 'react-router';

const routes = [{
  path: 'index',
  breadcrumbName: '首页'
}, {
  path: 'first',
  breadcrumbName: '一级面包屑'
}, {
  path: 'second',
  breadcrumbName: '当前页面'
}];
function itemRender(route, params, routes, paths) {
  const last = routes.indexOf(route) === routes.length - 1;
  return last ? <span>{route.breadcrumbName}</span> : <Link to={paths.join('/')}>{route.breadcrumbName}</Link>;
}

return <Breadcrumb itemRender={itemRender} routes={routes}/>;
```



================================================================================
文件: Button.md
路径: doc\Button.md
================================================================================

# Button 按钮

按钮用于开始一个即时操作。

- debounce or throttle
- Tooltip按钮内容
- Block

## 何时使用

标记了一个（或封装一组）操作命令，响应用户点击行为，触发相应的业务逻辑。

## 代码演示

## 按钮展现模式

按钮的展现模式，有flat、raised和link三种，默认为raised。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Button, Row } from 'choerodon-ui/pro';

class App extends React.PureComponent {
  render() {
    return (
      <div>
        <Row>
          <Button>默认raised按钮</Button>
          <Button funcType="flat">flat按钮</Button>
          <Button funcType="raised">raised按钮</Button>
          <Button funcType="link">link按钮</Button>
        </Row>
        <Row style={{ marginTop: '20px' }}>
          <Button color="primary">color="primary"</Button>
          <Button funcType="flat" color="primary">
            color="primary"
          </Button>
          <Button funcType="raised" color="primary">
            color="primary"
          </Button>
          <Button funcType="link" color="primary">
            color="primary"
          </Button>
        </Row>
      </div>
    );
  }
}

ReactDOM.render(<App />, document.getElementById('container'));
```

## 按钮颜色

按钮的颜色，当 funcType 为 flat 时，color 为字体颜色。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Button, Switch } from 'choerodon-ui/pro';

class App extends React.PureComponent {
  state = {
    loading: false,
  };

  handleChange = (value) => this.setState({ loading: value });

  render() {
    const { loading } = this.state;
    return (
      <div>
        <Switch checked={loading} onChange={this.handleChange} value>
          Loading
        </Switch>
        <div>
          <div style={{ margin: '20px 0' }}>
            Background Color(With raised funcType)
          </div>
          <Button loading={loading} color="primary">
            Primary
          </Button>
          <Button loading={loading} color="secondary">
            Secondary
          </Button>
          <Button loading={loading} color="default">
            Default
          </Button>
          <Button loading={loading} color="gray">
            Gray
          </Button>
          <Button loading={loading} color="blue">
            Blue
          </Button>
          <Button loading={loading} color="green">
            Green
          </Button>
```

## 按钮不可选择

添加 disabled 属性即可让按钮处于不可用状态，同时按钮样式也会改变。disabled 默认为 false。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Button } from 'choerodon-ui/pro';

class App extends React.PureComponent {
  render() {
    return (
      <div>
        <Button>默认可选择按钮</Button>
        <Button disabled>disabled 按钮</Button>
        <Button color="primary" disabled>
          disabled + color:primary按钮
        </Button>
      </div>
    );
  }
}

ReactDOM.render(<App />, document.getElementById('container'));
```

## 图标按钮

当需要在 Button 内嵌入 Icon 时，可以设置 icon 属性，或者直接在 Button 内使用 Icon 组件。如果想控制 Icon 具体的位置，只能直接使用 Icon 组件，而非 icon 属性。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Row, Col, Divider } from 'choerodon-ui';
import { Button, Icon } from 'choerodon-ui/pro';

class App extends React.PureComponent {
  render() {
    return (
      <div>
        <Divider orientation="left">funcType="raised"</Divider>
        <Row>
          <Col span={12}>
            <em>icon="save" & children - false</em> &nbsp;{' '}
            <Button icon="save">{false}</Button>
          </Col>
          <Col span={12}>
            <em>children - Icon type="sync"</em> &nbsp;{' '}
            <Button>
              <Icon type="sync" />
            </Button>
          </Col>
        </Row>
        <Divider orientation="left">funcType="flat"</Divider>
        <Row>
          <Col span={12}>
            <em>color="primary" & icon="save" & children - 保存</em> &nbsp;
            <Button funcType="flat" color="primary" icon="save">
              保存
            </Button>
          </Col>
          <Col span={12}>
            <em>icon="sync"</em> &nbsp; <Button funcType="flat" icon="sync" />
          </Col>
        </Row>
        <Row>
          <Col span={12}>
            <em>color="primary" & icon="search"</em> &nbsp;{' '}
            <Button funcType="flat" icon="search" color="primary" />
          </Col>
          <Col span={12}>
```

## 图标加载中

添加 loading 属性即可让按钮处于加载状态。关联数据源，ds loading 状态关联按钮加载状态。最后一个按钮演示点击后进入加载状态。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, Button } from 'choerodon-ui/pro';
import { runInAction } from 'mobx';

class App extends React.Component {
  ds = new DataSet();

  state = {
    loading: true,
  };

  componentWillMount() {
    runInAction(() => {
      this.ds.status = 'submitting';
    });
  }

  handleClick = () => {
    this.setState({ loading: !this.state.loading });
    return new Promise((resolve) => setTimeout(resolve, 1000));
  };

  render() {
    return (
      <div>
        <Button icon="save" loading={this.state.loading}>
          保存
```

## 超链接按钮

超链接按钮，配置 href、target 超链接相关属性。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Button } from 'choerodon-ui/pro';

ReactDOM.render(
  <div>
    <Button href="https://choerodon.io" target="_blank">跳转按钮</Button>
    <Button funcType="flat" href="https://choerodon.io" target="_blank">跳转按钮</Button>
    <Button funcType="flat" href="https://choerodon.io" target="_blank" icon="link" />
  </div>,
  document.getElementById('container')
);
```

## 按钮节流

按钮点击节流、防抖，可用于避免频繁触发按钮事件，优化性能和调用频率。注意，该类型按钮事件无法冒泡。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Button } from 'choerodon-ui/pro';

class App extends React.Component {
  state = {
    num: 0,
  };

  handleClick = e => {
    e.stopPropagation();
    this.setState({
      num: this.state.num + 1,
    });
  };

  handleBubbleClick = () => {
    console.log('bubble click');
  };

  render() {
    return (
      <div onClick={this.handleBubbleClick}>
        <Button onClick={this.handleClick} wait={1000} waitType="throttle">
          节流按钮{this.state.num}
        </Button>
        <Button onClick={this.handleClick} wait={1000} waitType="debounce">
          去抖按钮{this.state.num}
```

## 按钮文字气泡

使用 Tooltip 来显示按钮内容，可用于内容超长或自定义禁用状态提示语场景。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Button, Tooltip } from 'choerodon-ui/pro';

const App = () => {
  const [flag, setFlag] = React.useState(true);
  const handleClick = React.useCallback(() => setFlag(!flag), [flag]);
  const overflowStyle = React.useMemo(
    () => ({
      maxWidth: 100,
      overflow: 'hidden',
      textOverflow: 'ellipsis',
      whiteSpace: 'nowrap',
    }),
    [],
  );
  return (
    <>
      <div style={{ marginBottom: 20 }}>基础文字气泡</div>
      <Tooltip title="外部包裹tooltip" placement="bottom">
        <Button tooltip="always" disabled>
          始终显示气泡的按钮
        </Button>
      </Tooltip>
      <Button
        tooltip="overflow"
        style={flag ? overflowStyle : undefined}
        onClick={handleClick}
      >
        内容超长时显示气泡&lt;点击改变样式&gt;
      </Button>
      <Button
```

## Block 按钮

块级元素方式展示，用于需要宽度全填充的场景。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Button } from 'choerodon-ui/pro';

class App extends React.PureComponent {
  render() {
    return (
      <div>
        <Button funcType="flat" color="primary" block>
          flat按钮
        </Button>
        <Button funcType="raised" color="primary" block>
          raised按钮
        </Button>
        <Button funcType="link" color="primary" block>
          link按钮
        </Button>
      </div>
    );
  }
}

ReactDOM.render(<App />, document.getElementById('container'));
```

## API

按钮的属性说明如下：

| 属性 | 说明 | 类型/默认值/版本 |
| --- | --- | --- |
| type | 设置按钮类型，可选值为 button \| submit \| reset | 类型string默认值button |
| color | 设置按钮颜色风格，可选值为 default \| primary \| secondary \| blue \| yellow \| red \| dark \| green \| purple | 类型string默认值default |
| funcType | 设置按钮展现模式，可选值为 flat \| raised \| link | 类型string默认值raised |
| loading | 设置按钮是否是加载状态 | 类型boolean默认值false |
| icon | 设置按钮图标 | 类型string |
| href | 点击跳转的地址，指定此属性 button 的行为和 a 链接一致 | 类型string |
| target | 相当于 a 链接的 target 属性，href 存在时生效 | 类型string |
| wait | 设置按钮点击间隔时间 | 类型number |
| waitType | 设置按钮点击间隔类型，可选值： throttle \| debounce | 类型string默认值throttle |
| onClick | 点击按钮时的回调, 当回调返回值为 Promise，则会出现 loading 状态直到 Promise 的状态不为 pending | 类型(e) => void默认值Promise |
| block | 块级按钮 | 类型boolean默认值false版本1.4.4 |
| tooltip | 用 Tooltip 显示单元格内容。可选值nonealwaysoverflow或 [always\|overflow, 文字提示配置属性对象] | 类型string [string, object]默认值globalConfig.tooltip版本1.5.0-beta.0（Tooltip 基础） 1.5.7（Tooltip 属性拓展） |

更多属性请参考ViewComponent。



================================================================================
文件: Calendar.md
路径: doc\Calendar.md
================================================================================

# Calendar 日历

按照日历形式展示数据的容器。

## 何时使用

当数据是日期或按照日期划分时，例如日程、课表、价格日历等，农历等。目前支持年/月切换。

## 代码演示

## 基本

一个通用的日历面板，支持年/月切换。

| 一 | 二 | 三 | 四 | 五 | 六 | 日 |
| --- | --- | --- | --- | --- | --- | --- |
| 30 | 01 | 02 | 03 | 04 | 05 | 06 |
| 07 | 08 | 09 | 10 | 11 | 12 | 13 |
| 14 | 15 | 16 | 17 | 18 | 19 | 20 |
| 21 | 22 | 23 | 24 | 25 | 26 | 27 |
| 28 | 29 | 30 | 31 | 01 | 02 | 03 |
| 04 | 05 | 06 | 07 | 08 | 09 | 10 |

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Calendar } from 'choerodon-ui';

function onPanelChange(value, mode) {
  console.log(value, mode);
}

ReactDOM.render(
  <Calendar onPanelChange={onPanelChange} />,
  document.getElementById('container'));
```

## 通知事项日历

一个复杂的应用示例，用dateCellRender和monthCellRender函数来自定义需要渲染的数据。

| 一 | 二 | 三 | 四 | 五 | 六 | 日 |
| --- | --- | --- | --- | --- | --- | --- |
| 30 | 01 | 02 | 03 | 04 | 05 | 06 |
| 07 | This is warning event. | 09 | This is warning event. | 11 | 12 | 13 |
| 14 | This is very long usual event。。.... | 16 | 17 | 18 | 19 | 20 |
| 21 | 22 | 23 | 24 | 25 | 26 | 27 |
| 28 | 29 | 30 | 31 | 01 | 02 | 03 |
| 04 | 05 | 06 | 07 | This is warning event. | 09 | This is warning event. |

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Calendar, Badge } from 'choerodon-ui';

function getListData(value) {
  let listData;
  switch (value.date()) {
    case 8:
      listData = [
        { type: 'warning', content: 'This is warning event.' },
        { type: 'success', content: 'This is usual event.' },
      ];
      break;
    case 10:
      listData = [
        { type: 'warning', content: 'This is warning event.' },
        { type: 'success', content: 'This is usual event.' },
        { type: 'error', content: 'This is error event.' },
      ];
      break;
    case 15:
      listData = [
        { type: 'warning', content: 'This is warning event' },
        { type: 'success', content: 'This is very long usual event。。....' },
        { type: 'error', content: 'This is error event 1.' },
        { type: 'error', content: 'This is error event 2.' },
        { type: 'error', content: 'This is error event 3.' },
        { type: 'error', content: 'This is error event 4.' },
      ];
      break;
    default:
  }
  return listData || [];
}

function dateCellRender(value) {
  const listData = getListData(value);
  return (
    <ul style={{ margin: 0, padding: 0 }}>
      {listData.map((item) => (
        <li key={item.content}>
          <Badge status={item.type} text={item.content} />
        </li>
      ))}
    </ul>
  );
}

function getMonthData(value) {
  if (value.month() === 8) {
    return 1394;
  }
}

function monthCellRender(value) {
  const num = getMonthData(value);
  return num ? (
    <div className="notes-month">
      <section>{num}</section>
      <span>Backlog number</span>
    </div>
  ) : null;
}

ReactDOM.render(
```

## 卡片模式

用于嵌套在空间有限的容器中。

| 一 | 二 | 三 | 四 | 五 | 六 | 日 |
| --- | --- | --- | --- | --- | --- | --- |
| 30 | 01 | 02 | 03 | 04 | 05 | 06 |
| 07 | 08 | 09 | 10 | 11 | 12 | 13 |
| 14 | 15 | 16 | 17 | 18 | 19 | 20 |
| 21 | 22 | 23 | 24 | 25 | 26 | 27 |
| 28 | 29 | 30 | 31 | 01 | 02 | 03 |
| 04 | 05 | 06 | 07 | 08 | 09 | 10 |

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Calendar } from 'choerodon-ui';

function onPanelChange(value, mode) {
  console.log(value, mode);
}

ReactDOM.render(
  <div style={{ width: 300, border: '1px solid #d9d9d9', borderRadius: 4 }}>
    <Calendar fullscreen={false} onPanelChange={onPanelChange} />
  </div>,
  document.getElementById('container'));
```

## 选择功能

一个通用的日历面板，支持年/月切换。

| 一 | 二 | 三 | 四 | 五 | 六 | 日 |
| --- | --- | --- | --- | --- | --- | --- |
| 26 | 27 | 28 | 29 | 30 | 31 | 01 |
| 02 | 03 | 04 | 05 | 06 | 07 | 08 |
| 09 | 10 | 11 | 12 | 13 | 14 | 15 |
| 16 | 17 | 18 | 19 | 20 | 21 | 22 |
| 23 | 24 | 25 | 26 | 27 | 28 | 29 |
| 30 | 31 | 01 | 02 | 03 | 04 | 05 |

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Calendar, Alert } from 'choerodon-ui';
import moment from 'moment';

class App extends React.Component {
  state = {
    value: moment('2017-01-25'),
    selectedValue: moment('2017-01-25'),
  }

  onSelect = (value) => {
    this.setState({
      value,
      selectedValue: value,
    });
  }

  onPanelChange = (value) => {
    this.setState({ value });
  }

  render() {
    const { value, selectedValue } = this.state;
    return (
      <div>
        <Alert message={`You selected date: ${selectedValue && selectedValue.format('YYYY-MM-DD')}`} />
        <Calendar value={value} onSelect={this.onSelect} onPanelChange={this.onPanelChange} />
      </div>
    );
  }
}

ReactDOM.render(<App />, document.getElementById('container'));
```

## 自定义头部

可自定义日历头部组件。

## Custom header

| 一 | 二 | 三 | 四 | 五 | 六 | 日 |
| --- | --- | --- | --- | --- | --- | --- |
| 30 | 01 | 02 | 03 | 04 | 05 | 06 |
| 07 | 08 | 09 | 10 | 11 | 12 | 13 |
| 14 | 15 | 16 | 17 | 18 | 19 | 20 |
| 21 | 22 | 23 | 24 | 25 | 26 | 27 |
| 28 | 29 | 30 | 31 | 01 | 02 | 03 |
| 04 | 05 | 06 | 07 | 08 | 09 | 10 |

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Calendar, Col, Radio, Row, Select } from 'choerodon-ui';

class App extends React.Component {
  onPanelChange = (value, mode) => {
    console.log(value.format('YYYY-MM-DD'), mode);
  };

  render() {
    return (
      <div style={{ width: 300, border: '1px solid #f0f0f0', borderRadius: 2 }}>
        <Calendar
          fullscreen={false}
          headerRender={({ value, type, onChange, onTypeChange }) => {
            const start = 0;
            const end = 12;
            const monthOptions = [];

            let current = value.clone();
            const localeData = value.localeData();
            const months = [];
            for (let i = 0; i < 12; i += 1) {
              current = current.month(i);
              months.push(localeData.monthsShort(current));
            }

            for (let i = start; i < end; i += 1) {
              monthOptions.push(
                <Select.Option key={i} value={i} className="month-item">
                  {months[i]}
                </Select.Option>,
              );
            }

            const year = value.year();
            const month = value.month();
            const options = [];
            for (let i = year - 10; i < year + 10; i += 1) {
              options.push(
                <Select.Option key={i} value={i} className="year-item">
                  {i}
```

## API

注意：Calendar 部分 locale 是从 value 中读取，所以请先正确设置 moment 的 locale。

```jsx
// 默认语言为 en-US，所以如果需要使用其他语言，推荐在入口文件全局设置 locale
// import moment from 'moment';
// import 'moment/locale/zh-cn';
// moment.locale('zh-cn');

<Calendar
  dateCellRender={dateCellRender}
  monthCellRender={monthCellRender}
  onPanelChange={onPanelChange}
  onSelect={onSelect}
/>
```

| 属性名 | 说明 | 类型/默认值/版本 |
| --- | --- | --- |
| dateCellRender | 自定义渲染日期单元格，返回内容会被追加到单元格 | 类型function(date: moment): ReactNode默认值无 |
| dateFullCellRender | 自定义渲染日期单元格，返回内容覆盖单元格 | 类型function(date: moment): ReactNode默认值无 |
| defaultValue | 默认展示的日期 | 类型moment默认值默认日期 |
| disabledDate | 不可选择的日期 | 类型(currentDate: moment) => boolean默认值无 |
| fullscreen | 是否全屏显示 | 类型boolean默认值true |
| locale | 国际化配置 | 类型object默认值默认配置 |
| mode | 初始模式，month/year | 类型string默认值month |
| monthCellRender | 自定义渲染月单元格，返回内容会被追加到单元格 | 类型function(date: moment): ReactNode默认值无 |
| monthFullCellRender | 自定义渲染月单元格，返回内容覆盖单元格 | 类型function(date: moment): ReactNode默认值无 |
| validRange | 设置可以显示的日期 | 类型[moment,moment]默认值无 |
| value | 展示日期 | 类型moment默认值当前日期 |
| headerRender | 自定义头部内容 | 类型function(object:{value: moment, type: string, onChange: f(), onTypeChange: f()})默认值无版本1.6.0 |
| onPanelChange | 日期面板变化回调 | 类型function(date: moment, mode: string)默认值无 |
| onSelect | 点击选择日期回调 | 类型function(date: moment）默认值无 |



================================================================================
文件: Card.md
路径: doc\Card.md
================================================================================

# Card 卡片

通用卡片容器。

## 何时使用

最基础的卡片容器，可承载文字、列表、图片、段落，常用于后台概览页面。

## 代码演示

## 典型卡片

包含标题、内容、操作区域。

Card content

Card content

Card content

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Card } from 'choerodon-ui';

ReactDOM.render(
  <Card title="Card title" extra={<a href="#">More</a>} style={{ width: 300 }}>
    <p>Card content</p>
    <p>Card content</p>
    <p>Card content</p>
  </Card>,
  document.getElementById('container'));
```

## 无边框

在灰色背景上使用无边框的卡片。

Card content

Card content

Card content

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Card } from 'choerodon-ui';

ReactDOM.render(
  <div style={{ background: '#ECECEC', padding: '30px' }}>
    <Card title="Card title" bordered={false} style={{ width: 300 }}>
      <p>Card content</p>
      <p>Card content</p>
      <p>Card content</p>
    </Card>
  </div>,
  document.getElementById('container'));
```

## 简洁卡片

只包含内容区域。

Card content

Card content

Card content

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Card } from 'choerodon-ui';

ReactDOM.render(
  <Card style={{ width: 300 }}>
    <p>Card content</p>
    <p>Card content</p>
    <p>Card content</p>
  </Card>,
  document.getElementById('container'));
```

## 更灵活的内容展示

可以利用Card.Meta支持更灵活的内容。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Card } from 'choerodon-ui';

const { Meta } = Card;

ReactDOM.render(
  <Card
    hoverable
    style={{ width: 240 }}
    cover={<img alt="example" src="https://os.alipayobjects.com/rmsportal/QBnOOoLaAfKPirc.png" />}
  >
    <Meta title="Europe Street beat" description="www.instagram.com" />
  </Card>,
  document.getElementById('container'),
);
```

## 栅格卡片

在系统概览页面常常和栅格进行配合。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Card, Col, Row } from 'choerodon-ui';

ReactDOM.render(
  <div style={{ background: '#ECECEC', padding: '30px' }}>
    <Row gutter={16}>
      <Col span={8}>
        <Card title="Card title" bordered={false}>Card content</Card>
      </Col>
      <Col span={8}>
        <Card title="Card title" bordered={false}>Card content</Card>
      </Col>
      <Col span={8}>
        <Card title="Card title" bordered={false}>Card content</Card>
      </Col>
    </Row>
  </div>,
  document.getElementById('container'));
```

## 加载中的卡片

数据读入前会有文本块样式。如需其他加载过渡，使用 Spin 包裹内容区即可，注意布局及样式，避免居中问题。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Card } from 'choerodon-ui';

ReactDOM.render(
  <Card loading title="Card title" style={{ width: '34%' }}>
    Whatever content
  </Card>,
  document.getElementById('container'));
```

## 网格型内嵌卡片

一种常见的卡片内容区隔模式。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Card } from 'choerodon-ui';

const gridStyle = {
  width: '25%',
  textAlign: 'center',
};

ReactDOM.render(
  <Card title="Card Title">
    <Card.Grid style={gridStyle}>Content</Card.Grid>
    <Card.Grid style={gridStyle}>Content</Card.Grid>
    <Card.Grid style={gridStyle}>Content</Card.Grid>
    <Card.Grid style={gridStyle}>Content</Card.Grid>
    <Card.Grid style={gridStyle}>Content</Card.Grid>
    <Card.Grid style={gridStyle}>Content</Card.Grid>
    <Card.Grid style={gridStyle}>Content</Card.Grid>
  </Card>,
  document.getElementById('container'));
```

## 内部卡片

可以放在普通卡片内部，展示多层级结构的信息。

Group title

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Card } from 'choerodon-ui';

ReactDOM.render(
  <Card title="Card title">
    <p
      style={{
        fontSize: 14,
        color: 'rgba(0, 0, 0, 0.85)',
        marginBottom: 16,
        fontWeight: 500,
      }}
    >
      Group title
    </p>
    <Card
      type="inner"
      title="Inner Card title"
      extra={<a href="#">More</a>}
    >
      Inner Card content
    </Card>
    <Card
      style={{ marginTop: 16 }}
      type="inner"
      title="Inner Card title"
      extra={<a href="#">More</a>}
    >
      Inner Card content
    </Card>
  </Card>,
  document.getElementById('container'));
```

## 带页签的卡片

可承载更多内容。

content1

app content

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Card } from 'choerodon-ui';

const tabList = [
  {
    key: 'tab1',
    tab: 'tab1',
  },
  {
    key: 'tab2',
    tab: 'tab2',
  },
];

const contentList = {
  tab1: <p>content1</p>,
  tab2: <p>content2</p>,
};

const tabListNoTitle = [
  {
    key: 'article',
    tab: 'article',
  },
  {
    key: 'app',
    tab: 'app',
  },
  {
    key: 'project',
    tab: 'project',
  },
];

const contentListNoTitle = {
  article: <p>article content</p>,
  app: <p>app content</p>,
  project: <p>project content</p>,
};

class TabsCard extends React.Component {
```

## 支持更多内容配置

一种支持封面、头像、标题和描述信息的卡片。


```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Card, Icon, Avatar } from 'choerodon-ui';

const { Meta } = Card;

ReactDOM.render(
  <Card
    style={{ width: 300 }}
    cover={
      <img
        alt="example"
        src="https://gw.alipayobjects.com/zos/rmsportal/JiqGstEfoWAOHiTxclqi.png"
      />
    }
    actions={[
      <Icon key="setting" type="settings-o" />,
      <Icon key="edit" type="mode_edit" />,
      <Icon key="ellipsis" type="more_horiz" />,
    ]}
  >
    <Meta
      avatar={
        <Avatar src="https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png" />
      }
      title="Card title"
      description="This is the description"
    />
  </Card>,
  document.getElementById('container'),
);
```

## 可选中卡片

点击 Card 内容区域可以选中卡片。

Card content

Card content

Card content

Card content

Card content

Card content

small card

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Card } from 'choerodon-ui';

class App extends React.Component {
  state = {
    selected: true,
  };

  handleSelect = (val) => {
    this.setState({
      selected: val,
    });
  };

  render() {
    const { selected } = this.state;
    return (
      <div style={{ display: 'flex', justifyContent: 'space-around' }}>
        <Card
          title="Title"
          style={{ width: 300 }}
          selected={selected}
          onSelectChange={this.handleSelect}
        >
          <p>Card content</p>
          <p>Card content</p>
          <p>Card content</p>
        </Card>
        <Card
          title="Title"
          style={{ width: 300, marginLeft: 10 }}
          selected={selected}
          onSelectChange={this.handleSelect}
          cornerPlacement="topRight"
        >
          <p>Card content</p>
          <p>Card content</p>
          <p>Card content</p>
```

## API

```html
<Card title="卡片标题">卡片内容</Card>
```

### Card

| 属性名 | 说明 | 类型/默认值 |
| --- | --- | --- |
| actions | 卡片操作组，位置在卡片底部 | 类型Array默认值- |
| bodyStyle | 内容区域自定义样式 | 类型object默认值- |
| bordered | 是否有边框 | 类型boolean默认值true |
| cover | 卡片封面 | 类型ReactNode默认值- |
| extra | 卡片右上角的操作区域 | 类型string\|ReactNode默认值- |
| hoverable | 鼠标移过时可浮起 | 类型boolean默认值false |
| loading | 当卡片内容还在加载中时，可以用 loading 展示一个占位 | 类型boolean默认值false |
| tabList | 页签标题列表 | 类型Array<{key: string, tab: ReactNode}>默认值- |
| activeTabKey | 当前激活页签的 key | 类型string默认值- |
| defaultActiveTabKey | 初始化选中页签的 key，如果没有设置 activeTabKey | 类型string默认值第一个页签 |
| title | 卡片标题 | 类型string\|ReactNode默认值- |
| type | 卡片类型，可设置为inner或 不设置 | 类型string默认值- |
| selected | 是否选中 | 类型boolean默认值false |
| cornerPlacement | 选中角标位置 | 类型bottomRight\|bottomLeft\|topLeft\|topRight默认值bottomRight |
| onSelectChange | 选中事件的回调，点击卡片内容区域触发 | 类型(selected) => void默认值- |
| onTabChange | 页签切换的回调 | 类型(key) => void默认值- |
| onHeadClick | 卡片头部的点击事件 | 类型React.MouseEventHandler默认值- |

### Card.Grid

| 属性 | 说明 | 类型/默认值 |
| --- | --- | --- |
| className | 网格容器类名 | 类型string默认值- |
| style | 定义网格容器类名的样式 | 类型object默认值- |
| selected | 是否选中 | 类型boolean默认值false |
| cornerPlacement | 选中角标位置 | 类型bottomRight\|bottomLeft\|topLeft\|topRight默认值bottomRight |
| onSelectChange | 选中事件的回调 | 类型(selected) => void默认值- |

### Card.Meta

| 属性 | 说明 | 类型/默认值 |
| --- | --- | --- |
| avatar | 头像/图标 | 类型ReactNode默认值- |
| className | 容器类名 | 类型string默认值- |
| description | 描述内容 | 类型ReactNode默认值- |
| style | 定义容器类名的样式 | 类型object默认值- |
| title | 标题内容 | 类型ReactNode默认值- |



================================================================================
文件: Carousel.md
路径: doc\Carousel.md
================================================================================

# Carousel 走马灯

旋转木马，一组轮播的区域。

## 何时使用

- 当有一组平级的内容。
- 当内容空间不足时，可以用走马灯的形式进行收纳，进行轮播展现。
- 常用于一组图片或卡片轮播。

## 代码演示

## 基本

最简单的用法。

### 4

### 1

### 2

### 3

### 4

### 1

### 2

### 3

### 4

- 1
- 2
- 3
- 4

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Carousel } from 'choerodon-ui';

function onChange(a, b, c) {
  console.log(a, b, c);
}

ReactDOM.render(
  <Carousel className="c7n-slick-slide" afterChange={onChange} arrows>
    <div>
      <h3>1</h3>
    </div>
    <div>
      <h3>2</h3>
    </div>
    <div>
      <h3>3</h3>
    </div>
    <div>
      <h3>4</h3>
    </div>
  </Carousel>,
  document.getElementById('container'),
);
```

## 垂直

- 1
- 2
- 3
- 4

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Carousel } from 'choerodon-ui';

ReactDOM.render(
  <Carousel
    vertical
    draggable
    theme="dark"
    verticalSwiping
    style={{ height: 200 }}
    className="pic-carousel"
  >
    <div>
      <div>
        <img alt="1" src="http://placekitten.com/g/400/200" />
      </div>
    </div>
    <div>
      <div>
        <img alt="2" src="http://placekitten.com/g/400/200" />
      </div>
    </div>
    <div>
      <div>
        <img alt="3" src="http://placekitten.com/g/400/200" />
      </div>
    </div>
    <div>
      <div>
        <img alt="4" src="http://placekitten.com/g/400/200" />
      </div>
    </div>
  </Carousel>,
```

## 渐显

切换效果为渐显。

### 1

### 2

### 3

### 4

- 1
- 2
- 3
- 4

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Carousel } from 'choerodon-ui';

ReactDOM.render(
  <Carousel effect="fade" className="c7n-slick-slide">
    <div>
      <h3>1</h3>
    </div>
    <div>
      <h3>2</h3>
    </div>
    <div>
      <h3>3</h3>
    </div>
    <div>
      <h3>4</h3>
    </div>
  </Carousel>,
  document.getElementById('container'),
);
```

## 自动切换

定时切换下一张。

### 4

### 1

### 2

### 3

### 4

### 1

### 2

### 3

### 4

- 1
- 2
- 3
- 4

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Carousel } from 'choerodon-ui';

ReactDOM.render(
  <Carousel autoplay className="c7n-slick-slide">
    <div>
      <h3>1</h3>
    </div>
    <div>
      <h3>2</h3>
    </div>
    <div>
      <h3>3</h3>
    </div>
    <div>
      <h3>4</h3>
    </div>
  </Carousel>,
  document.getElementById('container'),
);
```

## 自定义箭头

配置 class 类名来自定义箭头样式，也可以使用 prevArrow、nextArrow 返回自定义 dom 结构样式。

### 4

### 1

### 2

### 3

### 4

### 1

### 2

### 3

### 4

- 1
- 2
- 3
- 4

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Carousel } from 'choerodon-ui';

function SampleNextArrow(props) {
  const { className, style, onClick } = props;
  return (
    <div
      className={className}
      style={{ ...style, display: 'block' }}
      onClick={onClick}
    />
  );
}

function SamplePrevArrow(props) {
  const { className, style, onClick } = props;
  return (
    <div
      className={className}
      style={{ ...style, display: 'block' }}
      onClick={onClick}
    />
  );
}

ReactDOM.render(
  <Carousel
    arrows
    className="my-class"
    prevArrow={<SamplePrevArrow />}
    nextArrow={<SampleNextArrow />}
  >
    <div>
      <h3>1</h3>
```

## 自定义指示器

配置 dotsClass 类名，可根据类名自定义指示器样式。

### 4

### 1

### 2

### 3

### 4

### 1

### 2

### 3

### 4

- 1
- 2
- 3
- 4

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Carousel } from 'choerodon-ui';

ReactDOM.render(
  <Carousel dotsClass="mydot-class" className="c7n-slick-slide">
    <div>
      <h3>1</h3>
    </div>
    <div>
      <h3>2</h3>
    </div>
    <div>
      <h3>3</h3>
    </div>
    <div>
      <h3>4</h3>
    </div>
  </Carousel>,
  document.getElementById('container'),
);
```

## API

| 属性名 | 说明 | 类型/默认值/版本 |
| --- | --- | --- |
| afterChange | 切换面板的回调 | 类型function(current)默认值无 |
| autoplay | 是否自动切换 | 类型boolean默认值false |
| beforeChange | 切换面板的回调 | 类型function(from, to)默认值无 |
| dots | 是否显示面板指示点 | 类型boolean默认值true |
| easing | 动画效果 | 类型string默认值linear |
| effect | 动画效果函数，可取 scrollx, fade | 类型string默认值scrollx |
| vertical | 垂直显示 | 类型boolean默认值false |
| className | 组件自定义类名 | 类型string版本1.6.4 |
| dotsClass | 指示器类名 | 类型string版本1.6.4 |
| prevArrow | 自定义上一个箭头 | 类型HTMLElement版本1.6.4 |
| nextArrow | 自定义下一个箭头 | 类型HTMLElement版本1.6.4 |
| theme | 箭头和指示器主题 | 类型dark light默认值light版本1.6.4 |
| arrows | 是否显示箭头 | 类型boolean默认值false版本1.6.4 |
| dotsActionType | 指示器触发方式 | 类型[['click', 'hover']]默认值['ckick']版本1.6.4 |
| slidesToShow | 一个画面中显示多少张（可以是小数） | 类型number默认值1版本1.6.4 |
| verticalSwiping | 垂直方向拖动 | 类型boolean默认值false版本1.6.4 |
| pauseOnDotsHover | 鼠标在指示器上停止播放 | 类型boolean默认值true版本1.6.4 |
| pauseOnArrowsHover | 鼠标在箭头上停止播放 | 类型boolean默认值true版本1.6.4 |

## 方法

| 名称 | 描述 |
| --- | --- |
| goTo(slideNumber) | 切换到指定面板 |
| next() | 切换到下一面板 |
| prev() | 切换到上一面板 |

更多参数可参考：https://github.com/akiran/react-slick

## Q&A

- 拖动的过程出现画面卡住一半的情况。

解决方案：请使用 div 对内容多包裹一层进行处理。详情参考垂直demo。

- 切换下一张图片时导致溢出的问题

解决方案：配置 slidesToShow 为小数点，可以避免。 例如：理论上一个画面显示 1 张，实际确显示了 1.01  张，配置 0.99 即可解决。

更多参数可参考：https://github.com/akiran/react-slick



================================================================================
文件: Cascader.md
路径: doc\Cascader.md
================================================================================

# Cascader 级联选择

级联选择框。

## 何时使用

- 需要从一组相关联的数据集合进行选择，例如省市区，公司层级，事物分类等。
- 从一个较大的数据集合中进行选择时，用多级分类进行分隔，方便选择。
- 比起 Select 组件，可以在同一个浮层中完成选择，有较好的体验。

注意: 组件支持多选，单选时候返回 value 为[a,b,c,d]，多选返回值为[[a,b,c,d],[a,b,c,d]]

## 代码演示

## 基础受控

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Cascader } from 'choerodon-ui/pro';

const options = [
  {
    value: 'zhejiang',
    meaning: 'Zhejiang',
    children: [
      {
        value: 'hangzhou',
        meaning: 'Hangzhou',
        children: [
          {
            value: 'xihu',
            meaning: 'West Lake',
          },
        ],
      },
    ],
  },
  {
    value: 'jiangsu',
    meaning: 'Jiangsu',
    children: [
      {
        value: 'nanjing',
        meaning: 'Nanjing',
```

## 数据源选项

数据源选项。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, Cascader } from 'choerodon-ui/pro';

function handleDataSetChange({ record, name, value, oldValue }) {
  console.log(
    '[dataset newValue]',
    value,
    '[oldValue]',
    oldValue,
    `[record.get('${name}')]`,
    record.get(name),
  );
}

class App extends React.Component {
  optionDs = new DataSet({
    queryUrl: '/tree-less.mock',
    autoQuery: true,
    selection: 'mutiple',
    parentField: 'parentId',
    idField: 'id',
    fields: [
      { name: 'id', type: 'string' },
      { name: 'expand', type: 'boolean' },
      { name: 'parentId', type: 'string' },
    ],
  });
```

## 多选

- 组织架构/员工管理(react)

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, Cascader } from 'choerodon-ui/pro';

function handleDataSetChange({ record, name, value, oldValue }) {
  console.log(
    '[dataset newValue]',
    value,
    '[oldValue]',
    oldValue,
    `[record.get('${name}')]`,
    record.get(name),
  );
}

class App extends React.Component {
  optionDs = new DataSet({
    queryUrl: '/tree-less.mock',
    autoQuery: true,
    selection: 'mutiple',
    parentField: 'parentId',
    idField: 'id',
    fields: [
      { name: 'id', type: 'string' },
      { name: 'expand', type: 'boolean' },
      { name: 'parentId', type: 'string' },
    ],
  });
```

## 鼠标移动上去触发选择

鼠标移动上去触发选择

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, Cascader } from 'choerodon-ui/pro';

function handleDataSetChange({ record, name, value, oldValue }) {
  console.log(
    '[dataset newValue]',
    value,
    '[oldValue]',
    oldValue,
    `[record.get('${name}')]`,
    record.get(name),
  );
}

class App extends React.Component {
  optionDs = new DataSet({
    queryUrl: '/tree-less.mock',
    autoQuery: true,
    selection: 'mutiple',
    parentField: 'parentId',
    idField: 'id',
    fields: [
      { name: 'id', type: 'string' },
      { name: 'expand', type: 'boolean' },
      { name: 'parentId', type: 'string' },
    ],
  });
```

## 选择框禁用

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Cascader } from 'choerodon-ui/pro';

const options = [
  {
    value: 'zhejiang',
    meaning: 'Zhejiang',
    children: [
      {
        value: 'hangzhou',
        meaning: 'Hangzhou',
        children: [
          {
            value: 'xihu',
            meaning: 'West Lake',
          },
        ],
      },
    ],
  },
  {
    value: 'jiangsu',
    meaning: 'Jiangsu',
    children: [
      {
        value: 'nanjing',
        meaning: 'Nanjing',
```

## 单列表模式

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, Cascader } from 'choerodon-ui/pro';

function handleDataSetChange({ record, name, value, oldValue }) {
  console.log(
    '[dataset newValue]',
    value,
    '[oldValue]',
    oldValue,
    `[record.get('${name}')]`,
    record.get(name),
  );
}

class App extends React.Component {
  optionDs = new DataSet({
    queryUrl: '/tree-less.mock',
    autoQuery: true,
    selection: 'mutiple',
    parentField: 'parentId',
    idField: 'id',
    fields: [
      { name: 'id', type: 'string' },
      { name: 'expand', type: 'boolean' },
      { name: 'parentId', type: 'string' },
    ],
  });
```

## 可搜索

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, Cascader } from 'choerodon-ui/pro';

function handleDataSetChange({ record, name, value, oldValue }) {
  console.log(
    '[dataset newValue]',
    value,
    '[oldValue]',
    oldValue,
    `[record.get('${name}')]`,
    record.get(name),
  );
}

class App extends React.Component {
  optionDs = new DataSet({
    queryUrl: '/tree-less.mock',
    autoQuery: true,
    selection: 'mutiple',
    parentField: 'parentId',
    idField: 'id',
    fields: [
      { name: 'id', type: 'string' },
      { name: 'expand', type: 'boolean' },
      { name: 'parentId', type: 'string' },
    ],
  });
```

## 所选既所得

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, Cascader } from 'choerodon-ui/pro';

class App extends React.Component {
  optionDs = new DataSet({
    queryUrl: '/tree-less.mock',
    autoQuery: true,
    selection: 'mutiple',
    parentField: 'parentId',
    idField: 'id',
    fields: [
      { name: 'id', type: 'string' },
      { name: 'expand', type: 'boolean' },
      { name: 'parentId', type: 'string' },
    ],
  });

  ds = new DataSet({
    autoCreate: true,
    fields: [
      {
        name: 'id',
        type: 'string',
        textField: 'text',
        defaultValue: ['2', '7'],
        valueField: 'id',
        label: '部门',
```

## 选项异步加载

选项异步加载。当是异步或者有分页时，请使用object类型字段，并且通过接口查询出显示值绑定到该字段上， 因为选项只会加载部分数据，导致没有匹配的显示值。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, Cascader, Row, Col } from 'choerodon-ui/pro';
import axios from 'axios';

function handleDataSetChange({ record, name, value, oldValue }) {
  console.log(
    '[dataset newValue]',
    value,
    '[oldValue]',
    oldValue,
    `[record.get('${name}')]`,
    record.get(name),
  );
}

// 这里面可以控制node结点的判断来实现是否展示为叶结点
function nodeCover({ record }) {
  const nodeProps = {
    title: record.get('text'),
  };
  if (record.get('text') === '岗位管理') {
    nodeProps.isLeaf = true;
  } else {
    nodeProps.isLeaf = false;
  }
  return nodeProps;
}
```

## 相同业务值

相同业务值。备注: DataSet 的 valueField 相当于 id ，它的值必须不同。但可以设置其他字段存储业务 value。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Cascader, DataSet } from 'choerodon-ui/pro';

class App extends React.Component {
  data = [
    {
      value: 'zhejiang',
      eventKey: 'zhejiang',
      meaning: 'Zhejiang',
    },
    {
      value: 'hangzhou',
      eventKey: 'hangzhou',
      meaning: 'Hangzhou',
      parentValue: 'zhejiang',
    },
    {
      value: 'xihu',
      eventKey: 'xihu',
      meaning: 'West Lake',
      parentValue: 'hangzhou',
    },
    {
      value: 'jiangsu',
      eventKey: 'jiangsu',
      meaning: 'Jiangsu',
    },
```

## optionRenderer 输入属性

使用optionRenderer属性。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, Cascader, Tooltip, Icon } from 'choerodon-ui/pro';

function handleDataSetChange({ record, name, value, oldValue }) {
  console.log(
    '[dataset newValue]',
    value,
    '[oldValue]',
    oldValue,
    `[record.get('${name}')]`,
    record.get(name),
  );
}

class App extends React.Component {
  optionDs = new DataSet({
    queryUrl: '/tree-less.mock',
    autoQuery: true,
    selection: 'mutiple',
    parentField: 'parentId',
    idField: 'id',
    fields: [
      { name: 'id', type: 'string' },
      { name: 'expand', type: 'boolean' },
      { name: 'parentId', type: 'string' },
    ],
  });
```

## 弹出位置

可以设置弹出位置: bottomLeft | bottomRight | topLeft | topRight

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Cascader } from 'choerodon-ui/pro';

const options = [
  {
    value: 'zhejiang',
    meaning: 'Zhejiang',
    children: [
      {
        value: 'hangzhou',
        meaning: 'Hangzhou',
        children: [
          {
            value: 'xihu',
            meaning: 'West Lake',
          },
        ],
      },
    ],
  },
  {
    value: 'jiangsu',
    meaning: 'Jiangsu',
    children: [
      {
        value: 'nanjing',
        meaning: 'Nanjing',
```

## API

| 属性名 | 说明 | 类型/默认值/版本 |
| --- | --- | --- |
| expandTrigger | 次级菜单的展开方式，可选： click \| hover | 类型string默认值click |
| dropdownMatchSelectWidth | 下拉单个 框匹配输入框宽度 | 类型boolean默认值true |
| dropdownMenuStyle | 下拉框菜单样式名 | 类型object |
| options | 下拉框选项数据源 | 类型DataSet Array:[{meaning:'',value:''}] |
| primitiveValue | 是否为原始值（建议以绑定的数据源 Field 的 type 来决定值类型，如 type 设为 object 相当于 primitiveValue 设为 false）true - 选项中 valueField 对应的值 false - 选项值对象 | 类型boolean |
| notFoundContent | 当下拉列表为空时显示的内容 | 类型ReactNode |
| pagingOptionContent | 渲染分页 option | 类型ReactNode版本1.4.4 |
| onOption | 设置选项属性，如 disabled | 类型({ dataSet, record })) => object ({ options, item |
| menuMode | 单弹框属性 | 类型single multiple |
| onChoose | 选择一个值的时候触发 | 类型(value,record) => void |
| onUnChoose | 取消选中一个值的时候触发多选时候生效 | 类型(value,record) => void |
| changeOnSelect | 所选既所得 | 类型boolean |
| searchable | 是否可搜索 | 类型boolean默认值false版本1.3.0 |
| searchMatcher | 搜索器。当为字符串时，作为 lookup 的参数名来重新请求值列表。 | 类型string ({ record, text, textField, valueField }) => boolean默认值({ textField record.get(textField) && record.get(textField).indexOf(text) !== -1版本1.3.0 |
| loadData | 用于动态加载选项，无法与 showSearch 一起使用 | 类型(selectedOptions) => void版本1.4.4 |
| async | 用于数据源异步加载选项，无法与 showSearch 一起使用 | 类型boolean版本1.4.4 |
| optionRenderer(1.5.6) | 渲染 Option 本文的钩子。isFilterSearch 代表是否搜索过滤中 | 类型({ text, value, record, dataSet, isFilterSearch }) => ReactNode |

menuMode为single，其中可以添加的配置：

| 属性名 | 说明 | 类型 |
| --- | --- | --- |
| singleMenuStyle | 由于渲染在body下可以方便按照业务配置弹出框的大小 | 类型CSSProperties |
| singleMenuItemStyle | 由于渲染在body下可以方便按照业务配置超出大小样式和最小宽度等 | 类型CSSProperties |
| singlePleaseRender | 设置需要的提示配置 | 类型({key,className,text}) => ReactElement |
| singleMenuItemRender | 头部可以渲染出想要的tab样子 | 类型(title:string) => ReactElement |

无法配置的参数expandIcon，

注意，如果需要获得中国省市区数据，可以参考china-division。

更多属性请参考TriggerField。



================================================================================
文件: CheckBox.md
路径: doc\CheckBox.md
================================================================================

# CheckBox 多选框

## 何时使用

- 在一组可选项中进行多项选择时；
- 单独使用可以表示两种状态之间的切换，和 switch 类似。区别在于切换 switch 会直接触发状态改变，而 checkbox 一般用于状态标记，需要和提交操作配合。

## 代码演示

## 基本使用

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { CheckBox } from 'choerodon-ui/pro';

function handleChange(value, oldValue) {
  console.log('[basic]', value, '[oldValue]', oldValue);
}

const App = () => (
  <div>
    <CheckBox name="base" value="A" onChange={handleChange} defaultChecked>
      A
    </CheckBox>
    <CheckBox name="base" value="B" onChange={handleChange}>
      B
    </CheckBox>
    <CheckBox name="base" value="C" onChange={handleChange}>
      C
    </CheckBox>
    <CheckBox name="base" value="C" onChange={handleChange}>
      C
    </CheckBox>
  </div>
);

ReactDOM.render(<App />, document.getElementById('container'));
```

## 受控复选框

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { CheckBox } from 'choerodon-ui/pro';

class App extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      values: ['A'],
    };
  }

  handleChange = (value, oldValue) => {
    console.log('[controlled]', value, '[oldValues]', oldValue);
    const { values } = this.state;
    if (value) {
      values.push(value);
    } else {
      values.splice(values.indexOf(oldValue), 1);
    }
    console.log('checkedValues', values);
    this.setState({
      values,
    });
  };

  render() {
    const { values } = this.state;
```

## 绑定数据源

### dataSet

### Form label

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, CheckBox, Row, Col, Form } from 'choerodon-ui/pro';

function handleChange({ name, value, oldValue }) {
  console.log(`[dataset:${name}]`, value, '[oldValue]', oldValue);
}

const data = [
  {
    bind: 'A',
  },
];

class App extends React.Component {
  ds = new DataSet({
    fields: [
      { name: 'bind', multiple: true },
      { name: 'bind2', type: 'boolean', label: '是否开启' }, // 组件没有children会用label替代
      { name: 'bind3', type: 'boolean', trueValue: 'Y', falseValue: 'N' },
    ],
    data,
    events: {
      update: handleChange,
    },
  });

  render() {
```

## 只读

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { CheckBox, DataSet, Tooltip } from 'choerodon-ui/pro';

const data = [{ rd: 'C' }];

class App extends React.Component {
  ds = new DataSet({
    fields: [{ name: 'rd', readOnly: true }],
    data,
  });

  render() {
    return (
      <div>
        <Tooltip title="disabled">
          <CheckBox name="rd" disabled>
            A
          </CheckBox>
        </Tooltip>
        <CheckBox name="rd" readOnly>
          B
        </CheckBox>
        <CheckBox dataSet={this.ds} name="rd" value="C">
          C
        </CheckBox>
      </div>
    );
```

## 按钮显示效果

显示成按钮。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { CheckBox } from 'choerodon-ui/pro';

function handleChange(value, oldValue) {
  console.log('[button]', value, '[oldValue]', oldValue);
}

const App = () => (
  <div>
    <CheckBox
      mode="button"
      name="base"
      value="A"
      onChange={handleChange}
      defaultChecked
    >
      A
    </CheckBox>
    <CheckBox mode="button" name="base" value="B" onChange={handleChange}>
      B
    </CheckBox>
    <CheckBox mode="button" name="base" value="C" onChange={handleChange}>
      C
    </CheckBox>
  </div>
);
```

## API

| 属性名 | 说明 | 类型/默认值 |
| --- | --- | --- |
| unCheckedValue | 未选中时的值 | 类型any |
| unCheckedChildren | 非选中时的内容 | 类型string ReactNode |
| indeterminate | 中间状态 | 类型boolean默认值false |

更多属性请参考Radio。



================================================================================
文件: CodeArea.md
路径: doc\CodeArea.md
================================================================================

# CodeArea 代码域

代码编辑器。

## 何时使用

用于输入表单域代码内容，实现对应语言高亮时。

## 代码演示

## 基本使用

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { CodeArea, Switch, Row, Col } from 'choerodon-ui/pro';

const style = { height: 60 };

class App extends React.Component {
  state = { readOnly: true, disabled: true };

  handleChange = (value) => {
    this.setState({ readOnly: value });
  };

  handleDisabledChange = (value) => {
    this.setState({ disabled: value });
  };

  render() {
    const { readOnly, disabled } = this.state;
    return (
      <Row gutter={10}>
        <Col span={8}>
          <CodeArea style={style} themeSwitch="idea" />
        </Col>
        <Col span={8}>
          <CodeArea readOnly={readOnly} style={style} defaultValue="ReadOnly" />
          <Switch onChange={this.handleChange} checked={readOnly}>
            只读
          </Switch>
        </Col>
        <Col span={8}>
          <CodeArea disabled={disabled} style={style} defaultValue="Disabled" />
          <Switch onChange={this.handleDisabledChange} checked={disabled}>
            禁用
          </Switch>
        </Col>
      </Row>
```

## 受控代码框

受控代码框。

```javascript
Controlled Value
```

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { CodeArea } from 'choerodon-ui/pro';

const style = { height: 80 };

class App extends React.Component {
  state = {
    value: 'Controlled Value',
  };

  handleChange = (value) => {
    this.setState({ value });
  };

  render() {
    return (
      <CodeArea
        value={this.state.value}
        style={style}
        onChange={this.handleChange}
      />
    );
  }
}

ReactDOM.render(<App />, document.getElementById('container'));
```

## 数据绑定

```javascript
{
  "compilerOptions": {
    "strictNullChecks": true,
    "moduleResolution": "node",
    "allowSyntheticDefaultImports": true,
    "experimentalDecorators": true,
    "jsx": "preserve",
    "noUnusedParameters": true,
    "noUnusedLocals": true,
    "declaration": true,
    "target": "es6",
    "lib": [
      "dom",
      "dom.iterable",
      "es7",
      "es2017.object"]
  },
  "exclude": [
    "node_modules",
    "lib",
    "es"
  ]
}
```

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { CodeArea, DataSet } from 'choerodon-ui/pro';

const jsonText = `{
  "compilerOptions": {
    "strictNullChecks": true,
    "moduleResolution": "node",
    "allowSyntheticDefaultImports": true,
    "experimentalDecorators": true,
    "jsx": "preserve",
    "noUnusedParameters": true,
    "noUnusedLocals": true,
    "declaration": true,
    "target": "es6",
    "lib": [
      "dom",
      "dom.iterable",
      "es7",
      "es2017.object"]
  },
  "exclude": [
    "node_modules",
    "lib",
    "es"
  ]
}
`;

const style = { height: 550 };

class App extends React.Component {
  ds = new DataSet({
    autoCreate: true,
    fields: [
      { name: 'content', type: 'string', defaultValue: jsonText, required: true, readOnly: true },
    ],
  });

  render() {
    return <CodeArea dataSet={this.ds} name="content" style={style} />;
  }
}

ReactDOM.render(
  <App />,
  document.getElementById('container')
);
```

## 主题

使用不同主题。

```javascript
{
  "compilerOptions": {
    "strictNullChecks": true,
    "moduleResolution": "node",
    "allowSyntheticDefaultImports": true,
    "experimentalDecorators": true,
    "jsx": "preserve",
    "noUnusedParameters": true,
    "noUnusedLocals": true,
    "declaration": true,
    "target": "es6",
    "lib": [
      "dom",
      "dom.iterable",
      "es7",
      "es2017.object"]
  },
  "exclude": [
    "node_modules",
    "lib",
    "es"
  ]
}
```

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { CodeArea, Switch, DataSet } from 'choerodon-ui/pro';
// 这两个主题不是组件内置的主题，需要手动引入
import 'codemirror/theme/eclipse.css';
import 'codemirror/theme/neat.css';
// 引入 javascript lint
import 'choerodon-ui/pro/lib/code-area/lint/javascript';
// 处理 codemirror 的SSR问题， 如无需SSR，请用import代替require;
import 'codemirror/mode/javascript/javascript';
// if (typeof window !== 'undefined') {
//   // 提供对应语言的语法高亮
//   require('codemirror/mode/javascript/javascript');
// }

const jsonText = `{
  "compilerOptions": {
    "strictNullChecks": true,
    "moduleResolution": "node",
    "allowSyntheticDefaultImports": true,
    "experimentalDecorators": true,
    "jsx": "preserve",
    "noUnusedParameters": true,
    "noUnusedLocals": true,
    "declaration": true,
    "target": "es6",
    "lib": [
      "dom",
      "dom.iterable",
      "es7",
      "es2017.object"]
  },
  "exclude": [
    "node_modules",
    "lib",
    "es"
  ]
}
`;

const style = { height: 525 };

const placeholder = `demo:
function example() {
  console.log('xxx');
}`;

class App extends React.Component {
  state = {
    theme: 'neat',
  };

  ds = new DataSet({
```

## Javascript格式化

使用快捷键格式化代码，要传入一个 formatter 对象。默认的格式化快捷键是Alt + F，去格式化快捷键是Alt + R，可以通过属性手动配置。

#### Javascript

```javascript
function getOptions() {
  var options = {
    "compilerOptions": {
      "strictNullChecks": true,
      "moduleResolution": "node",
      "allowSyntheticDefaultImports": true,
      "experimentalDecorators": true,
      "jsx": "preserve",
      "noUnusedParameters": true,
      "noUnusedLocals": true,
      "declaration": true,
      "target": "es6",
      "lib": [
        "dom",
        "dom.iterable",
        "es7",
        "es2017.object"
      ]
    },
    "exclude": [
      "node_modules",
      "lib",
      "es"
    ]
  };

  return options;
}
```

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { CodeArea, DataSet } from 'choerodon-ui/pro';
// 引入格式化器
import JSFormatter from 'choerodon-ui/pro/lib/code-area/formatters/JSFormatter';
// 引入 javascript lint
import 'choerodon-ui/pro/lib/code-area/lint/javascript';
// 处理 codemirror 的SSR问题， 如无需SSR，请用import代替require;
import 'codemirror/mode/javascript/javascript';
// if (typeof window !== 'undefined') {
//   // 提供对应语言的语法高亮
//   require('codemirror/mode/javascript/javascript');
// }

const options = { mode: 'javascript' };

const jsText = `function getOptions() {
  var options = {
    "compilerOptions": {
      "strictNullChecks": true,
      "moduleResolution": "node",
      "allowSyntheticDefaultImports": true,
      "experimentalDecorators": true,
      "jsx": "preserve",
      "noUnusedParameters": true,
      "noUnusedLocals": true,
      "declaration": true,
      "target": "es6",
      "lib": [
        "dom",
        "dom.iterable",
        "es7",
        "es2017.object"
      ]
    },
    "exclude": [
      "node_modules",
      "lib",
      "es"
    ]
  };

  return options;
}
`;

const jsStyle = { height: 500 };

class App extends React.Component {
  ds = new DataSet({
    autoCreate: true,
    fields: [
```

## JSON格式化

使用快捷键格式化代码，要传入一个 formatter 对象。默认的格式化快捷键是Alt + F，去格式化快捷键是Alt + R，可以通过属性手动配置。

#### JSON

```javascript
{
  "compilerOptions": {
    "strictNullChecks": true,
    "moduleResolution": "node",
    "allowSyntheticDefaultImports": true,
    "experimentalDecorators": true,
    "jsx": "preserve",
    "noUnusedParameters": true,
    "noUnusedLocals": true,
    "declaration": true,
    "target": "es6",
    "lib": [
      "dom",
      "dom.iterable",
      "es7",
      "es2017.object"
    ]
  },
  "exclude": [
    "node_modules",
    "lib",
    "es"
  ]
}
```

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { CodeArea, DataSet } from 'choerodon-ui/pro';
// 引入格式化器
import JSONFormatter from 'choerodon-ui/pro/lib/code-area/formatters/JSONFormatter';
// 引入 json lint
import 'choerodon-ui/pro/lib/code-area/lint/json';
// 处理 codemirror 的SSR问题， 如无需SSR，请用import代替require;
import 'codemirror/mode/javascript/javascript';
// if (typeof window !== 'undefined') {
//   // 提供对应语言的语法高亮
//   require('codemirror/mode/javascript/javascript');
// }

const options = { mode: { name: 'javascript', json: true } };

const jsonText = `{
  "compilerOptions": {
    "strictNullChecks": true,
    "moduleResolution": "node",
    "allowSyntheticDefaultImports": true,
    "experimentalDecorators": true,
    "jsx": "preserve",
    "noUnusedParameters": true,
    "noUnusedLocals": true,
    "declaration": true,
    "target": "es6",
    "lib": [
      "dom",
      "dom.iterable",
      "es7",
      "es2017.object"
    ]
  },
  "exclude": [
    "node_modules",
    "lib",
    "es"
  ]
}
`;

const jsonStyle = { height: 500 };

class App extends React.Component {
  ds = new DataSet({
    autoCreate: true,
    fields: [
      {
        name: 'content',
        type: 'string',
        defaultValue: jsonText,
```

## HTML格式化

使用快捷键格式化代码，要传入一个 formatter 对象。默认的格式化快捷键是Alt + F，去格式化快捷键是Alt + R，可以通过属性手动配置。

#### HTML

```javascript
<div class="demo-wrapper">
    <span id="demo">Demo</span>
</div>
<script>
var demo = document.getElementById('demo');
demo.style.cssText = 'color: red;';
</script>
```

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { CodeArea, DataSet } from 'choerodon-ui/pro';
// 引入格式化器
import HTMLFormatter from 'choerodon-ui/pro/lib/code-area/formatters/HTMLFormatter';
// 引入 html lint
import 'choerodon-ui/pro/lib/code-area/lint/html';
// 处理 codemirror 的SSR问题， 如无需SSR，请用import代替require;
import 'codemirror/mode/htmlmixed/htmlmixed';
// if (typeof window !== 'undefined') {
//   // 提供对应语言的语法高亮
//   require('codemirror/mode/htmlmixed/htmlmixed');
// }

const options = { mode: 'htmlmixed' };

const htmlText = `<div class="demo-wrapper">
    <span id="demo">Demo</span>
</div>
<script>
var demo = document.getElementById('demo');
demo.style.cssText = 'color: red;';
</script>
`;

const htmlStyle = { height: 200 };

class App extends React.Component {
  ds = new DataSet({
    autoCreate: true,
    fields: [
      {
        name: 'content',
        type: 'string',
        defaultValue: htmlText,
        required: true,
      },
```

## YAML格式化

使用快捷键格式化代码，要传入一个 formatter 对象。默认的格式化快捷键是Alt + F，去格式化快捷键是Alt + R，可以通过属性手动配置。

#### YAML

```javascript
YAML:
  - A human-readable data serialization language
  - https://en.wikipedia.org/wiki/YAML
yaml:
  - A complete JavaScript implementation
  - https://www.npmjs.com/package/yaml
```

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { CodeArea, DataSet } from 'choerodon-ui/pro';
// 引入格式化器，注意使用模块的默认导出
import YAMLFormatter from 'choerodon-ui/pro/lib/code-area/formatters/YAMLFormatter';
// 引入 yaml lint
import 'choerodon-ui/pro/lib/code-area/lint/yaml';
// 处理 codemirror 的SSR问题， 如无需SSR，请用import代替require;
import 'codemirror/mode/yaml/yaml';
// if (typeof window !== 'undefined') {
//   // 提供对应语言的语法高亮
//   require('codemirror/mode/yaml/yaml');
// }

const options = { mode: 'yaml' };

const yamlText = `YAML:
  - A human-readable data serialization language
  - https://en.wikipedia.org/wiki/YAML
yaml:
  - A complete JavaScript implementation
  - https://www.npmjs.com/package/yaml
`;

const yamlStyle = { height: 200 };

class App extends React.Component {
  ds = new DataSet({
    autoCreate: true,
    fields: [
      {
        name: 'content',
        type: 'string',
        defaultValue: yamlText,
        required: true,
      },
    ],
```

## 标题

```javascript
{
  "compilerOptions": {
    "strictNullChecks": true,
    "moduleResolution": "node",
    "allowSyntheticDefaultImports": true,
    "experimentalDecorators": true,
    "jsx": "preserve",
    "noUnusedParameters": true,
    "noUnusedLocals": true,
    "declaration": true,
    "target": "es6",
    "lib": [
      "dom",
      "dom.iterable",
      "es7",
      "es2017.object"]
  },
  "exclude": [
    "node_modules",
    "lib",
    "es"
  ]
}
```

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { CodeArea, DataSet } from 'choerodon-ui/pro';
import { Icon } from 'choerodon-ui';
// 处理 codemirror 的SSR问题， 如无需SSR，请用import代替require;
import 'codemirror/mode/javascript/javascript';
// if (typeof window !== 'undefined') {
//   // 提供对应语言的语法高亮
//   require('codemirror/mode/javascript/javascript');
// }

const jsonText = `{
  "compilerOptions": {
    "strictNullChecks": true,
    "moduleResolution": "node",
    "allowSyntheticDefaultImports": true,
    "experimentalDecorators": true,
    "jsx": "preserve",
    "noUnusedParameters": true,
    "noUnusedLocals": true,
    "declaration": true,
    "target": "es6",
    "lib": [
      "dom",
      "dom.iterable",
      "es7",
      "es2017.object"]
  },
  "exclude": [
    "node_modules",
    "lib",
    "es"
  ]
}
`;
const style = { height: 525 };

class App extends React.Component {
  state = {
    hiddenContent: false,
  };

  ds = new DataSet({
    autoCreate: true,
    fields: [
      {
        name: 'content',
        type: 'string',
        defaultValue: jsonText,
        required: true,
      },
    ],
  });
```

## API

### CodeArea

| 属性 | 说明 | 类型/默认值 |
| --- | --- | --- |
| options | 编辑器配置，详见CodeMirror Options | 类型object |
| formatHotKey | 格式化快捷键 | 类型string默认值Alt+F |
| unFormatHotKey | 清除格式化快捷键 | 类型string默认值Alt+R |
| formatter | CodeAreaFormatter类的实例，用于格式化 | 类型CodeAreaFormatter默认值new JSONFormatter() |
| editorDidMount | 在实例挂载前回调函数 | 类型(editor: IInstance, value: string, cb: () => void) void; |
| themeSwitch(1.5.0) | 默认主题切换设置( options 中设置 theme 或者不设置 themeSwitch，则不显示主题切换按钮)。不设置，默认 idea 主题，可选值idea\|material | 类型string |
| title(1.5.0) | 标题 | 类型ReactNode |
| placeholder(1.6.4) | 占位词 | 类型string |
| valueChangeAction(1.6.6) | 触发值变更的动作, 可选值：blurinput | 类型blur |
| wait(1.6.6) | 设置值变更间隔时间，只有在 valueChangeAction 为 input 时起作用 | 类型number默认值- |
| waitType(1.6.6) | 设置值变更间隔类型，只有在 valueChangeAction 为 input 时起作用，可选值：throttledebounce | 类型string默认值debounce |

更多属性请参考FormField。

### 自定义主题

组件内置'neat''idea''material'三个主题，默认'idea'，使用更多主题需要引入对应的样式文件，如下：

```less
// style.less
@import '~codemirror/theme/eclipse.css';
```

或在*.js文件中引用

```js
import 'codemirror/theme/eclipse.css';
```

所有可用主题请参考CodeMirror Themes。

关于 CodeArea 引入主题资源教程请参考CodeArea 引入主题资源。

### 更多编辑器配置项

更多编辑器配置可以直接作为输入属性传递给组件，如下：

```ts
const options = { tabSize: 4, viewportMargin: Infinity };
<CodeArea options={options} />;
```

所有可用的配置项请参考CodeMirror Options。



================================================================================
文件: Collapse.md
路径: doc\Collapse.md
================================================================================

# Collapse 折叠面板

可以折叠/展开的内容区域。

- 可关联数据源 DataSet，校验后自动展开、定位

## 何时使用

- 对复杂区域进行分组和隐藏，保持页面的整洁。
- 手风琴是一种特殊的折叠面板，只允许单个内容区域展开。

## 代码演示

## 折叠面板

可以同时展开多个面板，这个例子默认展开了第一个。

A dog is a type of domesticated animal.
  Known for its loyalty and faithfulness,
  it can be found as a welcome guest in many households across the world.

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Collapse } from 'choerodon-ui';

const Panel = Collapse.Panel;

function callback(key) {
  console.log(key);
}

const text = `
  A dog is a type of domesticated animal.
  Known for its loyalty and faithfulness,
  it can be found as a welcome guest in many households across the world.
`;

ReactDOM.render(
  <Collapse defaultActiveKey={['1']} onChange={callback}>
    <Panel header="This is panel header 1" key="1">
      <p>{text}</p>
    </Panel>
    <Panel header="This is panel header 2" key="2">
      <p>{text}</p>
    </Panel>
    <Panel header="This is panel header 3" key="3" disabled>
      <p>{text}</p>
    </Panel>
  </Collapse>,
  document.getElementById('container'),
);
```

## 手风琴

手风琴，每次只打开一个 tab。默认打开第一个。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Collapse } from 'choerodon-ui';

const Panel = Collapse.Panel;

const text = `
  A dog is a type of domesticated animal.
  Known for its loyalty and faithfulness,
  it can be found as a welcome guest in many households across the world.
`;

ReactDOM.render(
  <Collapse accordion>
    <Panel header="This is panel header 1" key="1">
      <p>{text}</p>
    </Panel>
    <Panel header="This is panel header 2" key="2">
      <p>{text}</p>
    </Panel>
    <Panel header="This is panel header 3" key="3">
      <p>{text}</p>
    </Panel>
  </Collapse>,
  document.getElementById('container'),
);
```

## 面板嵌套

嵌套折叠面板。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Collapse } from 'choerodon-ui';

const Panel = Collapse.Panel;

function callback(key) {
  console.log(key);
}

const text = `
  A dog is a type of domesticated animal.
  Known for its loyalty and faithfulness,
  it can be found as a welcome guest in many households across the world.
`;

ReactDOM.render(
  <Collapse onChange={callback}>
    <Panel header="This is panel header 1" key="1">
      <Collapse defaultActiveKey="1">
        <Panel header="This is panel nest panel" key="1">
          <p>{text}</p>
        </Panel>
      </Collapse>
    </Panel>
    <Panel header="This is panel header 2" key="2">
      <p>{text}</p>
    </Panel>
    <Panel header="This is panel header 3" key="3">
      <p>{text}</p>
    </Panel>
  </Collapse>,
  document.getElementById('container'),
);
```

## 自定义面板

自定义各个面板的背景色、圆角和边距。

A dog is a type of domesticated animal.
  Known for its loyalty and faithfulness,
  it can be found as a welcome guest in many households across the world.

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Collapse } from 'choerodon-ui';

const Panel = Collapse.Panel;

const text = `
  A dog is a type of domesticated animal.
  Known for its loyalty and faithfulness,
  it can be found as a welcome guest in many households across the world.
`;

const customPanelStyle = {
  background: '#f7f7f7',
  borderRadius: 4,
  marginBottom: 24,
  border: 0,
  overflow: 'hidden',
};

ReactDOM.render(
  <Collapse bordered={false} defaultActiveKey={['1']}>
    <Panel header="This is panel header 1" key="1" style={customPanelStyle}>
      <p>{text}</p>
    </Panel>
    <Panel header="This is panel header 2" key="2" style={customPanelStyle}>
      <p>{text}</p>
    </Panel>
    <Panel header="This is panel header 3" key="3" style={customPanelStyle}>
      <p>{text}</p>
    </Panel>
  </Collapse>,
  document.getElementById('container'),
);
```

## 隐藏箭头

你可以通过showArrow={false}隐藏CollapsePanel组件的箭头图标。

A dog is a type of domesticated animal.
  Known for its loyalty and faithfulness,
  it can be found as a welcome guest in many households across the world.

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Collapse } from 'choerodon-ui';

const Panel = Collapse.Panel;

function callback(key) {
  console.log(key);
}

const text = `
  A dog is a type of domesticated animal.
  Known for its loyalty and faithfulness,
  it can be found as a welcome guest in many households across the world.
`;

ReactDOM.render(
  <Collapse defaultActiveKey={['1']} onChange={callback}>
    <Panel header="This is panel header with arrow icon" key="1">
      <p>{text}</p>
    </Panel>
    <Panel showArrow={false} header="This is panel header with no arrow icon" key="2">
      <p>{text}</p>
    </Panel>
  </Collapse>,
  document.getElementById('container'),
);
```

## 简洁风格

一套没有边框的简洁样式。

A dog is a type of domesticated animal. Known for its loyalty and faithfulness, it can be found as a welcome guest in many households across the world.

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Collapse } from 'choerodon-ui';

const Panel = Collapse.Panel;

const text = (
  <p style={{ paddingLeft: 24 }}>
    A dog is a type of domesticated animal. Known for its loyalty and faithfulness, it can be found
    as a welcome guest in many households across the world.
  </p>
);

ReactDOM.render(
  <Collapse bordered={false} defaultActiveKey={['1']}>
    <Panel header="This is panel header 1" key="1">
      {text}
    </Panel>
    <Panel header="This is panel header 2" key="2">
      {text}
    </Panel>
    <Panel header="This is panel header 3" key="3">
      {text}
    </Panel>
  </Collapse>,
  document.getElementById('container'),
);
```

## 自定义图标

自定义图标、位置、点击触发区域。

A dog is a type of domesticated animal.
  Known for its loyalty and faithfulness,
  it can be found as a welcome guest in many households across the world.

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Collapse } from 'choerodon-ui';

const Panel = Collapse.Panel;

function callback(key) {
  console.log(key);
}

const text = `
  A dog is a type of domesticated animal.
  Known for its loyalty and faithfulness,
  it can be found as a welcome guest in many households across the world.
`;

ReactDOM.render(
  <Collapse
    defaultActiveKey={['1']}
    onChange={callback}
    trigger="icon"
    expandIconPosition="right"
    expandIcon="text"
  >
    <Panel header="This is panel header 1" key="1">
      <p>{text}</p>
    </Panel>
    <Panel header="This is panel header 2" key="2">
      <p>{text}</p>
    </Panel>
    <Panel header="This is panel header 3" key="3" disabled>
      <p>{text}</p>
    </Panel>
  </Collapse>,
  document.getElementById('container'),
```

## 绑定数据源

面板结合数据源。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Collapse } from 'choerodon-ui';
import { useDataSet, Button, Form, TextField } from 'choerodon-ui/pro';

const Panel = Collapse.Panel;

const App = () => {
  const ds = useDataSet(
    () => ({
      autoCreate: true,
      fields: [{ name: 'name', required: true, label: '姓名' }],
    }),
    [],
  );

  return (
    <>
      <Button onClick={() => ds.validate()}>validate</Button>
      <Collapse>
        <Panel header="Auto expand by dataSet" key="1" dataSet={ds}>
          <Form dataSet={ds}>
            <TextField name="name" />
          </Form>
        </Panel>
        <Panel
          header="Auto expand by context but need forceRender"
          key="2"
          forceRender
        >
          <Form dataSet={ds}>
            <TextField name="name" />
          </Form>
        </Panel>
        <Panel
          header="Disabled will not auto expand"
```

## 指定区域展开

可指定点击 icon、header 区域进行展开，设置 disabled 则禁用。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Collapse } from 'choerodon-ui';

const { Panel } = Collapse;

const text = `
  A dog is a type of domesticated animal.
  Known for its loyalty and faithfulness,
  it can be found as a welcome guest in many households across the world.
`;

ReactDOM.render(
  <>
    <Collapse collapsible="icon">
      <Panel header="This panel can't be collapsed" key="1">
        <p>{text}</p>
      </Panel>
    </Collapse>
    <br />
    <Collapse>
      <Panel collapsible="icon" header="This panel can't be collapsed" key="1">
        <p>{text}</p>
      </Panel>
    </Collapse>
    <br />
    <Collapse collapsible="header">
      <Panel
        collapsible="disabled"
        header="This panel can't be collapsed"
        key="1"
      >
        <p>{text}</p>
      </Panel>
    </Collapse>
    <br />
    <Collapse collapsible="disabled">
      <Panel
        collapsible="header"
        header="This panel can't be collapsed"
        key="1"
      >
        <p>{text}</p>
      </Panel>
    </Collapse>
```

## API

### Collapse

| 属性名 | 说明 | 类型/默认值/版本 |
| --- | --- | --- |
| activeKey | 当前激活 tab 面板的 key | 类型string[]\|string默认值默认无，accordion模式下默认第一个元素 |
| defaultActiveKey | 初始化选中面板的 key | 类型string默认值无 |
| onChange | 切换面板的回调 | 类型Function默认值无 |
| bordered | 带边框风格的折叠面板 | 类型boolean默认值true |
| accordion | 手风琴模式 | 类型boolean默认值false |
| expandIcon | 自定义切换图标 | 类型(panelProps) => ReactNode \|text(预置icon 展开收起文字)默认值无 |
| expandIconPosition | 设置图标位置 | 类型left\|right\|text-right默认值left |
| destroyInactivePanel | 销毁折叠隐藏的面板 | 类型boolean默认值false |
| collapsible | 所有子面板是否可折叠或指定可折叠触发区域（1.5.7 以下版本使用 trigger 属性） | 类型header\|icon\|disabled版本1.5.7 |
| ghost | 使折叠面板透明且无边框 | 类型boolean默认值false |

### Collapse.Panel

| 属性名 | 说明 | 类型/默认值/版本 |
| --- | --- | --- |
| disabled | 禁用后的面板展开与否将无法通过用户交互改变 | 类型boolean默认值false |
| header | 面板头内容 | 类型string\|ReactNode默认值无 |
| key | 对应 activeKey | 类型string默认值无 |
| forceRender | 被隐藏时是否渲染 DOM 结构 | 类型boolean默认值false |
| showArrow | 是否展示当前面板上的箭头 | 类型boolean默认值true |
| extra | 自定义渲染每个面板右上角的内容 | 类型ReactNode默认值无 |
| dataSet | 数据集对象，当数据集校验失败时会自动展开 | 类型DataSet DataSet[]版本1.5.3 |
| collapsible | 是否可折叠或指定可折叠触发区域，优先级高于 disabled | 类型header\|icon\|disabled版本1.5.7 |
| hidden | 是否隐藏 | 类型boolean默认值false版本1.5.7 |



================================================================================
文件: ColorPicker.md
路径: doc\ColorPicker.md
================================================================================

# ColorPicker 颜色选择器

## 何时使用

需要获取颜色色值时。

## 代码演示

## ColorPicker

颜色选择器。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { ColorPicker } from 'choerodon-ui/pro';

ReactDOM.render(
  <ColorPicker defaultValue="#f1c7f2" />,
  document.getElementById('container')
);
```

## 受控颜色输入框

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { ColorPicker } from 'choerodon-ui/pro';

class App extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      value: '#0000ff',
    };
  }

  handleChange = (value, oldValue) => {
    console.log('[newValue]', value, '[oldValue]', oldValue);
    this.setState({
      value,
    });
  }

  render() {
    return <ColorPicker value={this.state.value} onChange={this.handleChange} />;
  }
}

ReactDOM.render(
  <App />,
  document.getElementById('container')
);
```

## 数据源

绑定数据源。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, ColorPicker } from 'choerodon-ui/pro';

function handleDataSetChange({ record, name, value, oldValue }) {
  console.log('[dataset newValue]', value, '[oldValue]', oldValue, `[record.get('${name}')]`, record.get(name));
}

class App extends React.Component {
  ds = new DataSet({
    autoCreate: true,
    fields: [
      { name: 'color', type: 'color', defaultValue: '#00ff00', required: true },
    ],
    events: {
      update: handleDataSetChange,
    },
  });

  render() {
    return <ColorPicker dataSet={this.ds} name="color" />;
  }
}

ReactDOM.render(
  <App />,
  document.getElementById('container')
);
```

## 按钮

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Icon } from 'choerodon-ui';
import { ColorPicker } from 'choerodon-ui/pro';

ReactDOM.render(
  <>
    <ColorPicker
      defaultValue="#e88b3463"
      mode="button"
      preset
      style={{ marginRight: 30 }}
    />
    <ColorPicker
      defaultValue="#e88b34"
      mode="button"
      renderer={({ value }) => {
        return <Icon type="color_lens-o" style={{ color: value }} />;
      }}
    />
  </>,
  document.getElementById('container'),
);
```

## API

| 属性 | 说明 | 类型/默认值/版本 |
| --- | --- | --- |
| defaultValue | 默认值 | 类型string默认值#ff0000 |
| mode | 显示模式，可选值: default \| button | 类型string默认值default版本1.5.5 |
| preset | 是否开启备选色板 | 类型boolean默认值false版本1.5.5 |

注意：ColorPicker 组件设置 multiple 属性为 true 无效, DataSet 的字段属性 multiple 同理

更多属性请参考TriggerField。



================================================================================
文件: ConfigProvider.md
路径: doc\ConfigProvider.md
================================================================================

# ConfigProvider 配置提供程序

为组件提供统一的全局化配置, 优先级高于 configure。

## 使用

```jsx
import { ConfigProvider } from 'choerodon-ui';

// ...

export default () => (
  <ConfigProvider prefixCls="c7n">
    <App />
  </ConfigProvider>
);
```

## API

API 配置同configure。



================================================================================
文件: Configure.md
路径: doc\Configure.md
================================================================================

# Configure 全局化配置

为组件提供统一的全局化配置。

## 使用

```jsx
import { configure, getConfig } from 'choerodon-ui';

configure({ prefixCls: 'c7n' });

const prefixCls = getConfig('prefixCls');
```

## API

| 属性名 | 说明 | 类型/默认值/版本 |
| --- | --- | --- |
| prefixCls | 设置统一样式前缀 | 类型string默认值c7n |
| proPrefixCls | 设置统一样式前缀(pro 组件) | 类型string默认值c7n-pro |
| iconfontPrefix | 图标样式前缀 | 类型string默认值icon |
| icons | 图标列表，用于 IconPicker。 | 类型string[] [categoryName: string]: string[] }默认值import categories from 'choerodon-ui-font' |
| ripple | 是否开启波纹效果 | 类型boolean默认值true |
| cacheRecords | 默认缓存选中和变更的记录 | 类型boolean版本1.5.6 |
| lookupCache | lookup 缓存配置。maxAge - 缓存时长 max - 缓存数量上限 | 类型object默认值{ maxAge: 1000 60 10, max: 100 |
| lookupUrl | lookup 取值的地址或返回地址的钩子 | 类型string ((code: string) => string)默认值code /common/code/${code}/\ |
| lookupAxiosConfig | 值列表请求的配置或钩子，详见AxiosRequestConfig。 配置中默认 url 为 lookupUrl， method 为 post。 | 类型AxiosRequestConfig ({ dataSet: DataSet, record: Record, params?: any, lookupCode: string }) => AxiosRequestConfig |
| lookupAxiosMethod | 值列表请求的类型 | 类型Http method默认值'post' |
| lovDefineUrl | Lov 取配置的地址或返回地址的钩子 | 类型string ((code: string) => string)默认值code /sys/lov/lov_define?code=${code}\ |
| lovDefineAxiosConfig | 返回 Lov 配置的请求的配置或钩子，详见AxiosRequestConfig。 配置中默认 url 为 lovDefineUrl， method 为 post。 | 类型AxiosRequestConfig (code: string, field?: Field) => AxiosRequestConfig |
| lovDefineBatchAxiosConfig | 返回 lov 配置批量查询配置的钩子，详见AxiosRequestConfig。 | 类型(codes: string[]) => AxiosRequestConfig版本1.6.3 |
| useLovDefineBatch | 是否使用批量查询 lov 配置 | 类型(code: string, field: Field) => boolean默认值noop版本1.6.3 |
| lovQueryUrl | Lov 取值的地址或返回地址的钩子 | 类型string ((code: string, lovConfig?: LovConfig, dataSet, params, data, lovQueryDetail }) => string)默认值code /common/lov/dataset/${code}\ |
| lovQueryAxiosConfig | Lov 查询数据请求的配置或钩子，详见AxiosRequestConfig。 配置中默认 url 为 lovQueryUrl， method 为 post。 | 类型AxiosRequestConfig (code: string, lovConfig?: LovConfig, dataSet, params, data, lovQueryDetail }) => AxiosRequestConfig |
| lovTableProps | 全局配置lov的tableProps,当同时存在lovTableProps以及的时候会进行一层合并 | 类型TableProps\| (multiple?: boolean) =>TableProps默认值{} |
| lovModalProps | Lov 弹窗属性，详见ModalProps | 类型ModalProps |
| lovAutoSelectSingle | Lov 点击查询仅存在一条数据时自动选中且不弹窗 | 类型boolean默认值false版本1.3.2 |
| lovTableCustomizable | Lov 弹窗中 Table 是否显示个性化设置入口按钮 | 类型boolean默认值false版本1.3.2 1.4.5 |
| lovNoCache | 默认 Lov noCache | 类型boolean版本1.5.6 |
| lovQueryBar | 默认 Lov Table 的 queryBar | 类型string默认值normal版本1.4.4 |
| lovQueryBarProps | 默认 Lov Table queryBar 的 queryBarProps | 类型object版本1.4.4 |
| lovQueryCachedSelected | lov 查询缓存已勾选记录 | 类型(code: string, cachedSelected: Map<string, Record>) => Promise<object[]>版本1.4.4 |
| lookupBatchAxiosConfig | 返回 lookup 批量查询配置的钩子，详见AxiosRequestConfig。 | 类型(codes: string[]) => AxiosRequestConfig |
| useLookupBatch | 是否使用批量查询快码 | 类型(code: string, field: Field) => boolean默认值noop版本1.6.0 |
| selectReverse | 是否开启下拉多选反向功能。 | 类型boolean默认值true版本1.0.0 |
| selectOptionsFilter | select & treeSelet 全局选项过滤。 | 类型(record: Record) => boolean版本1.6.4 |
| selectSearchable | 是否开启下拉搜索功能。 | 类型boolean默认值false版本1.3.1 |
| selectBoxSearchable | 是否开启勾选框搜索功能。 | 类型boolean默认值false版本1.5.7 |
| selectReserveParam | 多选下拉搜索时，是否保留查询参数。 | 类型boolean默认值true版本1.5.7 |
| selectPagingOptionContent | 渲染分页 option | 类型ReactNode默认值···版本1.3.1 |
| selectTrigger | 下拉弹出触发方式 | 类型Action[]默认值['focus', 'click']版本1.4.4 |
| axios | 替换内置的 axios 实例 | 类型AxiosInstance |
| autoCount | 默认 DataSet 的 autoCount | 类型boolean默认值true版本1.5.5 |
| dataKey | 默认 DataSet 的 dataKey | 类型string默认值rows |
| totalKey | 默认 DataSet 的 totalKey | 类型string默认值total |
| countKey | 默认 DataSet 的 countKey | 类型string默认值needCountFlag版本1.5.5 |
| statusKey | 默认 DataSet 提交的数据中标识状态的 key | 类型string默认值__status |
| tlsKey | 默认 DataSet 数据中标识多语言的 key | 类型string默认值__tls |
| status | 默认 DataSet 提交的数据的状态映射 | 类型{ add: string, update: delete: string }默认值{ 'add', 'update', 'delete' |
| labelLayout | 默认 Form 的 labelLayout | 类型string默认值horizontal |
| labelAlign | Form 标签文字对齐方式, 只在 labelLayout 为horizontal时起作用，可选值：leftcenterright | 类型string默认值right版本1.6.2 |
| queryBar | 默认 Table 的 queryBar | 类型string默认值normal |
| queryBarProps | 默认 Table queryBar 的 queryBarProps | 类型object版本1.4.4 |
| tableVirtual | 默认 Table 的 virtual, 可根据行列单元格粒度判断是否开始虚拟滚动 | 类型boolean (rows: number, columns: number) => boolean版本1.4.3 |
| tableVirtualCell | 默认 Table 的 virtualCell | 类型boolean版本1.4.2 |
| tableVirtualBuffer | 虚拟滚动列虚拟化配置项。columnBuffer 的值需大于等于 columnThreshold 的值 | 类型{ columnBuffer?: number, columnThreshold?: number }默认值{ columnBuffer: 3, columnThreshold: }版本1.6.2 |
| tableBorder | 默认 Table 的 border | 类型boolean默认值true |
| tableColumnEditorBorder | 默认 Table 的 columnEditorBorder | 类型boolean默认值tableBorder |
| tableHighLightRow | 默认 Table 当前行高亮, 可选值: boolean \| focus \| click, true - 始终显示高亮行, 'click' - 点击行后始终显示高亮行， 'focus' - 表格获焦时显示高亮行 | 类型boolean默认值true |
| tableSelectedHighLightRow | 默认 Table 当前勾选行高亮 | 类型boolean默认值false |
| tableRowHeight | 默认 Table 行高 | 类型auto number ({ size }) => auto默认值30 |
| tableHeaderRowHeight | 默认 Table 头行高 | 类型auto number ({ size }) => auto默认值tableRowHeight版本1.5.2 |
| tableFooterRowHeight | 默认 Table 脚行高 | 类型auto number ({ size }) => auto默认值tableRowHeight版本1.5.2 |
| tableExpandIcon | 默认 Table 自定义展开图标 | 类型({ prefixCls, expanded, expandable, needIndentSpaced, record, onExpand }) => ReactNode |
| tableSpinProps | 默认 Table spin 的属性 | 类型SpinProps默认值{ size: Size.default, wrapperClassName: '' |
| tableButtonProps | 默认 TableButton 的属性 | 类型ButtonProps默认值{ color: 'primary', funcType: 'flat' |
| tableButtonsLimit | 默认 Table 头部显示功能按钮的数量，超出限制放入更多下拉 | 类型number版本1.4.5 |
| tableCommandProps | 默认 TableCommand 的属性 | 类型ButtonProps默认值{ color: 'primary', funcType: 'flat' |
| tableAlwaysShowRowBox | Table 是否一直显示 rowbox,开启后在其他模式下也会显示 rowbox | 类型boolean默认值false |
| tableShowSelectionTips | Table 默认显示选中记录提示 | 类型boolean默认值false版本1.3.0 |
| tableShowCachedTips | Table默认显示缓存记录提示， 优先级高于 tableShowSelectionTips | 类型boolean默认值false版本1.5.6 |
| tableShowSortIcon | Table默认显示可排序icon | 类型boolean默认值false版本1.6.0 |
| tableUseMouseBatchChoose | Table 是否使用鼠标批量选择,开启后在 rowbox 的情况下可以进行鼠标拖动批量选择,在起始的 rowbox 处按下,在结束位置松开 | 类型boolean默认值false |
| tableEditorNextKeyEnterDown | Table 是否开启可编辑行回车编辑下一行 | 类型boolean默认值true |
| tableColumnResizable | 默认 Table 列可调整列宽 | 类型boolean默认值true |
| tableColumnResizeTrigger | 表格列宽拖拽分割线触发方式 | 类型mouseDown hover默认值mouseDown版本1.5.1 |
| tableColumnHideable | 默认 Table 列可调整显示 | 类型boolean默认值true版本1.2.0 |
| performanceTableColumnHideable | 默认 performanceTable 列可调整显示 | 类型boolean默认值true版本1.4.3 |
| tableColumnTitleEditable | 默认 Table 列可编辑标题 | 类型boolean默认值false版本1.2.0 |
| performanceTableColumnTitleEditable | 默认 performanceTable 列可编辑标题 | 类型boolean默认值false版本1.4.3 |
| tableColumnDraggable | Table是否开启列拖拽 | 类型boolean默认值false版本1.2.0 |
| tableColumnResizeTransition | 列拖拽的过度效果 | 类型boolean默认值true版本1.5.7 |
| tableHeightChangeable | 默认 Table 个性化是否开启高度设置 | 类型boolean默认值true版本1.5.1 |
| tablePageSizeChangeable | 默认 Table 个性化是否开启分页大小设置 | 类型boolean默认值false版本1.6.3 |
| performanceTableColumnDraggable | performanceTable 是否开启列拖拽 | 类型boolean默认值false版本1.4.3 |
| performanceTableAutoHeight | performanceTable 是否开启自动高度，传入对象则自适应父节点高度，为 true 则由内容撑开高度 | 类型boolean {type: 'minHeight' 'maxHeight', diff: number}默认值false版本1.5.6 |
| tableRowDraggable | Table是否开启行拖拽; multiDrag 支持多行拖拽选中记录(树形不支持多拖) | 类型boolean 'multiDrag'默认值1.2.0 |
| tableDragColumnAlign | Table行拖拽的模式 | 类型left\|right |
| tableAutoFocus | Table 新增行自动聚焦至第一个可编辑字段 | 类型boolean默认值false |
| tableColumnOnCell | 自定义单元格属性配置 | 类型(dataSet, record, column) => object版本1.3.2 |
| tableColumnAlign | 默认表格列对齐方式 | 类型(column, field) => 'left' 'center' 'right' undefined默认值Function版本1.4.4 |
| tableColumnDefaultWidth | 默认表格列宽度, 只在出横向滚动条时起作用 | 类型number默认值100版本1.5.0 |
| tableColumnDefaultMinWidth | 默认表格列最小宽度 | 类型number默认值50版本1.5.0 |
| tableColumnFilterPopover | 默认表格渲染不同前端筛选组件 | 类型(props: FilterPopoverProps) => ReactNode版本1.6.0 |
| tableAggregationColumnDefaultWidth | 默认表格聚合列宽度, 只在出横向滚动条时起作用 | 类型number默认值250版本1.5.0 |
| tableAggregationColumnDefaultMinWidth | 默认表格聚合列最小宽度 | 类型number默认值50版本1.5.0 |
| tableKeyboard | Table 开启或关闭新增的快捷按钮事件 | 类型boolean默认值false |
| tableFilterAdapter | Table 筛选条请求适配器 | 类型({ type, config, searchCode, queryDataSet} )=>AxiosRequestConfig版本1.4.4 |
| tableFilterSuffix | Table 筛选条按钮预留区 | 类型ReactNode |
| tableFilterSearchText | Table 筛选条快速搜索参数名 | 类型string默认值params |
| tableAutoHeightDiff | Table 自动高度误差值配置 | 类型number默认值80版本1.0.0 |
| tableParityRow | 默认 Table 奇偶行 | 类型boolean版本1.1.0 |
| tableCustomizedSave | Table 个性化保存的钩子 | 类型(code, customized) => void默认值(code, localStorage.setItem(table.customized.${code}, JSON.stringify(customized))版本1.2.0 1.4.5 |
| tableCustomizedLoad | Table 个性化加载的钩子 | 类型(code) => Promise默认值(code) Promise.resolve(JSON.parse(localStorage.getItem(table.customized.${code}) \|\| 'null'))版本1.2.0 1.4.5 |
| tableCustomizable | Table 是否显示个性化设置入口按钮 | 类型boolean默认值false版本1.3.0 1.4.5 |
| confirm | 变更检查行为自定义，可与modifiedCheckMessage关联使用(source - 修改提示信息来源 查询条：'query' 翻页： undefined) | 类型(message: any, dataSet?: DataSet, source?: string) => Promise默认值async (message) (await confirm(message)) !== 'cancel' |
| customizable | 是否开启个性化 | 类型boolean \|Customizable默认值false版本1.4.5 |
| customizedSave | 个性化保存的钩子 | 类型(code, customized, component: keyofCustomizable, otherInfo?: columnDataSet?: DataSet }) => void默认值(code, customized) localStorage.setItem(table.customized.${code}, JSON.stringify(customized))版本1.4.5 |
| customizedLoad | 个性化加载的钩子 | 类型(code, component: keyofCustomizable) => Promise默认值(code) Promise.resolve(JSON.parse(localStorage.getItem(table.customized.${code}) \|\| 'null'))版本1.4.5 |
| tableShowRemovedRow | 默认 Table 是否显示临时移除的行，默认置灰显示 | 类型boolean默认值true版本1.4.4 |
| performanceTableCustomizable | performanceTable 是否显示个性化设置入口按钮 | 类型boolean默认值false |
| pagination | 默认 pagination 的属性 | 类型TablePaginationConfig false默认值详见Pagination |
| defaultActiveFirstOption | 默认 Select 高亮第一个选项 | 类型boolean默认值true版本1.5.0-beta.0 |
| dropdownMatchSelectWidth | 默认下拉框匹配输入框宽度 | 类型boolean默认值true |
| modalSectionBorder | 默认 Modal 的头和脚有边框线 | 类型boolean默认值true |
| modalOkFirst | 默认 Modal 的 ok 按钮排在第一个 | 类型boolean默认值true |
| modalKeyboard | Modal 是否支持键盘 esc 关闭 | 类型boolean默认值true |
| modalAutoCenter | Modal 是否默认居中 | 类型boolean默认值false |
| modalMaskClosable | 点击蒙层是否允许关闭，可选 boolean \| click \| dblclick | 类型boolean string默认值false版本1.2.0 |
| modalResizable | modal是否可调整大小 | 类型boolean版本1.5.2 |
| modalMovable | modal是否可移动 | 类型boolean版本1.5.3 |
| modalClosable | modal关闭按钮 | 类型boolean版本1.5.6 |
| modalButtonTrigger | ok 和 cancel 按钮的触发方式 | 类型'click' 'mouseDown'默认值'click'版本1.6.5 |
| modalAutoFocus | 打开 modal 自动聚焦 | 类型boolean默认值true版本1.6.5 |
| drawerOkFirst | 默认 Modal drawer 的 ok 按钮排在第一个，优先级高于 modalOkFirst | 类型boolean undefined默认值undefined |
| drawerSectionBorder | 默认 Drawer 的头和脚有边框线 | 类型boolean默认值true版本1.3.0 |
| drawerTransitionName | 抽屉模式使用的动画， 可选值： 'slide-right' 'slide-left' 'slide-up' 'slide-down' | 类型string默认值'slide-right'版本1.3.0 |
| drawerHeaderFooterCombined | 抽屉模式头脚组合展示 | 类型boolean默认值false版本1.5.5 |
| buttonFuncType | 默认 Button 的功能类型 | 类型string默认值raised |
| buttonColor | 默认 Button 的颜色 | 类型string默认值default |
| autoInsertSpaceInButton | 设置为 true 时，添加按钮中 2 个汉字之间的空格 | 类型boolean默认值false版本1.5.5 |
| renderEmpty | 自定义组件空状态。componentName会接收到的值为 Table Select,在实现函数的时候需要对这两个输入进行处理,注意需要同时处理Table以及Select,默认值参考源代码的defaultRenderEmpty | 类型(componentName: string) => ReactNode |
| defaultValidationMessages | 自定义校验信息, 详见ValidationMessages | 类型ValitionMessages |
| validationMessageFormatter | 校验信息格式器 | 类型ValidationMessageFormatter: (message?: string, injectOptons?: any) => Promise\| any默认值(message, injectOptions) message && injectOptions formatReactTemplate(message, |
| validationMessageReportFormatter | 校验报告信息格式器 | 类型ValidationMessageReportFormatter: (message: any) => Promise<string undefined> string undefined默认值(message) getReactNodeText(<span>{message}</span>) |
| generatePageQuery | 分页参数转换的钩子 | 类型({ page?: number, pageSize?: totalCount?: count?: 'Y' 'N', defaultCount?: onlyCount?: sortName?: string, sortOrder?: sort?: string[] }) => object默认值- |
| feedback | DataSet 查询和提交数据的反馈配置, 详见Feedback | 类型Feedback |
| transport | DataSet 默认 transport, 详见Transport | 类型Transport |
| formatter | 日期格式化。其中 jsonDate 是数据请求和响应时的格式，为空时日期会转化为 timestamp。详见Formatter | 类型Formatter |
| useColon | 是否使用冒号当开启时会在所有的label后面加上冒号, 在没有label时不显示。 | 类型boolean默认值false |
| requiredMarkAlign | 控制必输星号位置 | 类型left right默认值left版本1.6.3 |
| collapseExpandIconPosition | 全局配置 collapse 图标位置 | 类型left right默认值left |
| collapseExpandIcon | 全局配置 collapse 自定义切换图标 | 类型(panelProps) => ReactNode text(预置icon 展开收起文字) |
| collapseTrigger | 全局配置切换面板的触发位置 | 类型header |
| textFieldAutoComplete | 全局配置textField的autoComplete属性 | 类型可选值: on off |
| resultStatusRenderer | 自定义状态展示,可以覆盖现有状态展示，也可以增加状态展示，支持全局配置 | 类型object -> {string:react.ReactNode} |
| numberFieldNonStrictStep | 全局配置 NumberField 的 nonStrictStep 属性 | 类型boolean默认值false |
| numberFieldFormatter | NumberField格式器 | 类型FormatNumberFunc: (value: string, lang: options:Intl.NumberFormatOptions) => string |
| numberFieldFormatterOptions | NumberField格式器参数,可以与组件值进行合并 | 类型FormatNumberFuncOptions: lang?: string, options?:Intl.NumberFormatOptions} |
| currencyFormatter | Currency格式器 | 类型FormatNumberFunc: (value: string, lang: options:Intl.NumberFormatOptions) => string |
| currencyFormatterOptions | Currency格式器参数,可以与组件值进行合并 | 类型FormatNumberFuncOptions: lang?: string, options?:Intl.NumberFormatOptions} |
| exportMode | 导出模式选择：前端导出，后端导出 | 类型client server默认值client |
| showLengthInfo | 全局配置是否展示长度信息 | 类型boolean版本1.4.0 |
| showInvalidDate | 显示无效日期 | 类型boolean版本1.4.0 |
| showRequiredColorsOnlyEmpty | 只有在空值时显示必填背景色和边框色 | 类型boolean版本1.4.0 |
| showValidation | 校验信息提示方式 | 类型tooltip newLine默认值tooltip版本1.4.4 |
| showHelp | 显示提示信息的方式 | 类型tooltip newLine label none默认值newline版本1.5.0 |
| highlightRenderer | 高亮渲染器 | 类型({ title, content, dataSet, record, name, className, style }, element) => ReactNode版本1.4.0 |
| performanceEnabled | 开启性能监控 | 类型{ Table: boolean }默认值{ false }版本1.4.1 |
| tooltip | 是否开启提示, 参数 target 详见TooltipTarget | 类型Tooltip.always Tooltip.overflow Tooltip.none function(target)版本1.4.4 |
| tooltipTheme | Tooltip 主题 或 返回主题的钩子, 参数 target 详见TooltipTarget | 类型dark light function(target)默认值(target) => target === 'validation' 'light' 'dark'版本1.4.4 |
| tooltipPlacement | Tooltip 位置 或 返回位置的钩子, 参数 placement 详见TooltipPlacement | 类型placement\| function(target)默认值TooltipPlacement版本1.5.0 |
| attachment | 附件上传配置 | 类型AttachmentConfig版本1.4.4 |
| tabsInkBarStyle | Tabs 墨条样式 | 类型CSSProperties版本1.4.5 |
| tabsDefaultChangeable | 默认 Tabs 个性化是否可配置默认页签 | 类型boolean默认值true版本1.6.3 |
| numberFieldKeyboard | NumberField 组件是否启用 UP DOWN 键盘事件 | 类型boolean默认值true版本1.5.0 |
| dateTimePickerOkButton | 日期时间控件是否显示确定按钮 | 类型boolean默认值false版本1.5.4 |
| lovShowSelectedInView | Lov 多选时，viewMode 为 modal 或 drawer，在对话框中显示已选记录 | 类型boolean (viewMode) => boolean默认值(viewMode) viewMode === 'drawer'版本1.5.0 |
| lovSelectionProps | Lov 显示已选记录时的参数 | 类型SelectionProps版本1.5.2 |
| onPerformance | 性能监控埋点函数 | 类型(type, event) => void版本1.4.1 |
| onTabsChange | Tabs 变更事件， 初始化时也会触发， 可用于监控埋点 | 类型(props: activeKey:string, activeGroupKey?:string, title: string, groupTitle?:string, code?:string }) => void版本1.5.2 |
| onButtonClick | 按钮点击事件， 可用于监控埋点 | 类型(props: title:string, }) => void版本1.5.2 |
| onComponentValidationReport | 组件触发校验报告事件 | 类型(props: showInvalid: boolean; component: object }) => void版本1.5.4 |
| min | 最小值 | 类型min: (FieldType) => value版本1.5.2 |
| max | 最大值 | 类型max: (FieldType) => value版本1.5.2 |
| xlsx | 异步获取 xlsx 库 | 类型() => import('xlsx')版本1.5.2 |
| uploadShowReUploadIcon | 基础 Upload 组件文件上传失败后是否显示重新上传按钮。当 listType 为 picture-card: true 为 icon, text 为文字形式; 其他 listType 都为文字形式 | 类型boolean 'text' (file: UploadFile, listType: UploadListType) => (boolean 'text')版本1.5.6 |
| uploadSecretLevelFlag | 是否开启上传密级 | 类型boolean版本1.6.6 |
| uploadSecretLevelOptions | 上传密级配置项, fields: 密级数据源字段配置, 必传; formProps: 密级表单配置; modalProps: 密级弹框配置; | 类型options: fields: FieldProps[], formProps?: FormProps, modalProps?: ModalProps }版本1.6.6 |
| fieldMaxTagCount | 默认 FormField 的 maxTagCount 属性 | 类型boolean版本1.5.6 |
| fieldMaxTagPlaceholder | 默认 FormField 的 maxTagPlaceholder 属性 | 类型ReactNode (omittedValues: any[]) => ReactNode版本1.5.6 |
| fieldFocusMode | 字段聚焦模式 | 类型checked\|focus默认值checked版本1.5.7 |
| formAutoFocus | Form 表单内自动聚焦第一个可编辑组件，表单在 Modal 弹窗内需要手动将 Modal 的 autoFocus 设置为 false | 类型boolean默认值false版本1.6.0 |
| useZeroFilledDecimal | NumberField和Currency组件的值是否在输入和显示时开启根据precision补零，真实值不受影响 | 类型boolean版本1.6.3 |
| rangeSeparator | 自定义组件 range 模式的分隔符 | 类型string默认值~版本1.6.4 |
| strictPageSize | 严格分页 | 类型boolean默认值true版本1.6.5 |
| noPagingParams | 不分页查询时需要携带的参数 | 类型(config: AxiosRequestConfig) => object版本1.6.5 |
| separateSpacing | Form 组件切分单元格间隔，当label布局为默认值 horizontal 时候使用 padding 修改单元格横向间距可能需要结合 labelWidth 效果会更好 | 类型number [number, number {width:number,height:number}版本1.6.5 |
| labelWidth | Form 内部控件的标签宽度。如果为数组则分别对应每列的标签宽度。数组长度不够列数，以默认值补全, 如果为auto，则根据内部label最大长度来对齐所有label。设置 minWidth 或 maxWidth 时，table 布局样式为 auto | 类型(number 'auto' ('auto' number)[] ({ minWidth?: number; maxWidth?: number })) ((lang, columns) => (number\| })))默认值100版本1.6.5 |
| labelWordBreak | From 设置标签是否换行显示 | 类型boolean版本1.6.5 |
| pictureCardShowName | 设置Upload的picture-card类型图片是否显示文件名 | 类型boolean版本1.6.5 |
| datePickerComboRangeMode | 设置DatePicker组件在range模式时，选择弹窗是否组合显示（time和dateTime模式不支持） | 类型boolean版本1.6.5 |
| treeCheckboxPosition | Tree 组件 checkbox 显示位置：默认显示在折叠 icon 后面；设置 left 显示在最前面左对齐 | 类型'default' 'left'默认值'default'版本1.6.5 |
| tabsShowInvalidTips | Tabs 是否开启 DataSet 校验 | 类型boolean默认值true版本1.6.5 |
| separateSpacing | Form 组件切分单元格间隔，当label布局为默认值 horizontal 时候使用 padding 修改单元格横向间距可能需要结合labelwidth效果会更好 | 类型number [number, number {width:number,height:number}版本1.6.6 |
| showValueIfNotFound | 对应值集内未请求时或值不存在显示值时，是否显示 value | 类型boolean默认值true版本1.6.6 |
| modalOkAndCancelIcon | Modal 确认和取消按钮是否展示icon。true 展示默认icon，false不展示，对象类型可以分别设置确认和取消icon | 类型boolean okIconType?: string boolean, cancelIconType?: boolean }版本1.6.6 |
| tableFilterBarButtonIcon | Table 动态筛选条按钮是否展示icon。true 展示默认icon，false不展示，对象类型可以分别设置具体icon | 类型boolean saveIconType?: string boolean; saveAsIconType?: resetIconType?: }版本1.6.6 |
| valueChangeAction | 触发值变更的动作, 可选值：blurinput | 类型blur版本1.6.6 |

### Customizable

1.4.5 版本支持

| 属性 | 默认值 | 类型 |
| --- | --- | --- |
| Table | false | 类型boolean |
| PerformanceTable | false | 类型boolean |
| Tabs | false | 类型boolean |
| Modal(1.5.2) | false | 类型boolean |

### Formatter

| 属性 | 默认值 | 类型/版本 |
| --- | --- | --- |
| jsonDate | YYYY-MM-DD HH:mm:ss 数据请求和响应时的格式 | 类型string |
| date | YYYY-MM-DD | 类型string |
| dateTime | YYYY-MM-DD HH:mm:ss | 类型string |
| time | HH:mm:ss | 类型string |
| week | YYYY-Wo | 类型string |
| month | YYYY-MM | 类型string |
| year | YYYY | 类型string |
| timeZone |  | 类型string (moment) => string版本1.4.2 |

### ValidationMessages

| 属性 | 默认值 | 类型/版本 |
| --- | --- | --- |
| badInput | 请输入一个数字。 | 类型ReactNode |
| patternMismatch | 请输入有效的值。 | 类型ReactNode |
| rangeOverflow | {label}必须小于或等于{max}。 | 类型ReactNode |
| rangeUnderflow | {label}必须大于或等于{min}。 | 类型ReactNode |
| stepMismatch | 请输入有效值。最接近的有效值为{0}。 | 类型ReactNode |
| stepMismatchBetween | 请输入有效值。两个最接近的有效值分别为{0}和{1}。 | 类型ReactNode |
| tooLong | 请将该内容减少到{maxLength}个或更少字符（目前您使用了{length}个字符）。 | 类型ReactNode |
| tooShort | 请将该内容增加到{minLength}个或更多字符（目前您使用了{length}个字符）。 | 类型ReactNode |
| typeMismatch | 请输入与类型匹配的有效值。 | 类型ReactNode |
| valueMissing | 请输入{label}。 | 类型ReactNode |
| valueMissingNoLabel | 请填写此字段。 | 类型ReactNode |
| uniqueError | 该字段值重复，请重新填写。 | 类型ReactNode |
| unknown | 未知错误。 | 类型ReactNode |

### TooltipTarget

1.4.4 版本支持, text-field-disabled 1.5.0 支持。

| 属性 | 说明 |
| --- | --- |
| table-cell | 表格单元格 |
| button | 按钮 |
| label | 表单控件标签 |
| select-option | 表单控件标签 |
| output | Output |
| validation | 校验信息 |
| help | 帮助信息 |
| text-field-disabled | 输入类组件禁用状态 |
| undefined | 默认 |

### TooltipPlacement

1.5.0 版本支持

| 属性 | 说明 | 默认 |
| --- | --- | --- |
| table-cell | 表格单元格 | 默认'right' |
| button | 按钮 |  |
| label | 表单控件标签 |  |
| select-option | 表单控件标签 |  |
| output | Output | 默认'right' |
| validation | 校验信息 | 默认'bottomLeft' |
| help | 帮助信息 |  |
| text-field-disabled | 输入类组件禁用状态 |  |

### AttachmentConfig

1.4.4 版本支持, 参数 isPublic 1.5.0 支持。

| 属性 | 说明 | 类型/默认值/版本 |
| --- | --- | --- |
| defaultFileKey | 上传文件的参数名 | 类型string默认值file |
| defaultFileSize | 上传文件的大小限制, 单位B | 类型number默认值0 |
| defaultChunkSize | 上传分片文件的大小, 单位B | 类型number默认值5 1024 1024版本1.5.2 |
| defaultChunkThreads | 上传分片文件的并发数 | 类型number默认值3版本1.5.2 |
| downloadAllMode | 显示全部下载按钮模式，支持 readOnly \| always | 类型string默认值readOnly版本1.6.0 |
| action | 上传的 axios 请求配置或返回 axios 请求配置的钩子 | 类型AxiosConfig ({ attachment:AttachmentFile, chunk:AttachmentFileChunk, bucketName?: string, bucketDirectory?: storageCode?:string, attachmentUUID: isPublic?: boolean }) => AxiosRequestConfig |
| batchFetchCount | 批量获取附件数量 | 类型(attachmentUUIDs: string[], isPublic?: boolean }) => Promise<{[key as string]: number}> |
| fetchList | 查询附件列表 | 类型({ bucketName?: string, bucketDirectory?: storageCode?:string, attachmentUUID: isPublic?: boolean }) => Promise<FileLike[]> |
| fetchFileSize | 查询附件大小限制 | 类型({ bucketName?: string, bucketDirectory?: storageCode?:string, isPublic?: boolean }) => Promise |
| getPreviewUrl | 获取预览地址，默认使用 AttachmentFile.url，返回空则不可预览。其中函数的返回值为 (() => string \| Promise< string>) 时，仅支持 listType 为 text 的情况 | 类型({ attachment: AttachmentFile, bucketName?: string, bucketDirectory?: storageCode?:string, attachmentUUID: isPublic?: boolean }) => (string (() string Promise< string>) undefined) |
| getDownloadUrl | 获取下载地址，返回值类型为函数时作为按钮的点击事件，默认使用 AttachmentFile.url | 类型({ attachment: AttachmentFile, bucketName?: string, bucketDirectory?: storageCode?:string, attachmentUUID: isPublic?: boolean }) => string Function默认值({ attahment attachment.url |
| getDownloadAllUrl | 获取全部下载地址，返回值类型为函数时作为按钮的点击事件 | 类型({ bucketName?: string, bucketDirectory?: storageCode?:string, attachmentUUID: isPublic?: boolean }) => string Function |
| getTemplateDownloadUrl | 获取模板下载地址 | 类型({ bucketName?: string, bucketDirectory?: storageCode?:string, attachmentUUID: isPublic?: boolean }) => string Function Promise<string Function>版本1.5.5 |
| getAttachmentUUID | 获取附件的UUID | 类型({ isPublic?: boolean }) => Promise\| string |
| renderIcon | 附件列表项的前缀图标渲染函数 | 类型(attachment: AttachmentFile, listType: 'text'\| 'picture' 'picture-card', defaultIcon: ReactNode) => ReactNode |
| renderHistory | 渲染操作历史 | 类型({ attachment: AttachmentFile, bucketName?: string, bucketDirectory?: storageCode?:string, attachmentUUID: string }) => ReactNode |
| onBeforeUpload | 上传前的回调 | 类型(attachment: AttachmentFile, attachments: AttachmentFile[], props: useChunk?: boolean, bucketName?: string, bucketDirectory?: storageCode?: isPublic?: boolean }) => undefined PromiseLike<boolean ... |
| onBeforeUploadChunk | 上传分片前的回调 | 类型({ chunk: AttachmentFileChunk, attachment: AttachmentFile, bucketName?: string, bucketDirectory?: storageCode?: isPublic?: boolean }) => undefined PromiseLike<boolean undefined>版本1.5.2 |
| onUploadSuccess | 上传成功的回调 | 类型(response: any, attachment: AttachmentFile, props: useChunk?: boolean, bucketName?: string, bucketDirectory?: storageCode?: isPublic?: boolean }) => void |
| onUploadError | 上传出错的回调 | 类型(error: Error, attachment: AttachmentFile) => void |
| onOrderChange | 排序变化回调，用于发送排序请求 | 类型(attachments: AttachmentFile[], isPublic?: boolean }) => void |
| onRemove | 删除文件回调，用于发送删除请求, 返回 false 或抛出异常将中止删除 | 类型({ attachment: AttachmentFile, bucketName?: string, bucketDirectory?: storageCode?:string, attachmentUUID: isPublic?: boolean }, multiple: boolean) => |
| orderField | 附件排序字段名，初始化或自定义排序时会以该字段值升序排序 | 类型string版本1.6.5 |

### SecretFieldConfig

1.5.0 版本支持

| 属性 | 说明 | 类型 |
| --- | --- | --- |
| secretFieldEnable | 获取是否开启数据操作保护 | 类型() => boolean |
| secretFieldTypes | 获取验证方式以及验证号码 | 类型() => object[] |
| secretFieldFetchVerifyCode | 校验验证码 | 类型(type: string) => Promise< object> |
| secretFieldQueryData | 获取真实数据 | 类型({type: string, _token: fieldName: captchaKey: captcha: action: string }) => Promise |
| secretFieldSaveData | 保存编辑后的数据 | 类型({ _token: string, fieldName: value: string }) => Promise |

### AxiosRequestConfig

| 属性 | 说明 | 类型 |
| --- | --- | --- |
| url | 地址 | 类型string |
| method | 方法 | 类型string |
| baseURL | 基础地址 | 类型string |
| headers | 请求头 | 类型object |
| params | url 参数 | 类型object |
| data | 请求体数据 | 类型object |
| timeout | 请求超时时间 | 类型number |
| withCredentials | 用于跨域传递 cookie | 类型boolean |
| transformRequest | 转变提交的数据 | 类型(data: any, headers: any) => string |
| transformResponse | 转变响应的数据 | 类型(data: any, headers: any) => any |

更多配置请参考 Axios 官方文档，或参考 typescript 文件/node_modules/axios/index.d.ts



================================================================================
文件: Currency.md
路径: doc\Currency.md
================================================================================

# Currency 货币输入框

货币输入框。

## 何时使用

当用户需要输入货币类型值时。

## 代码演示

## 基本使用

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Currency, Row, Col } from 'choerodon-ui/pro';

ReactDOM.render(
  <div>
    <Row gutter={10}>
      <Col span={8}>
        <Currency defaultValue={123456.789} />
      </Col>
      <Col span={8}>
        <Currency currency="CNY" defaultValue={123456.789} precision={3} />
      </Col>
      <Col span={8}>
        <Currency currency="EUR" lang="de-DE" defaultValue={123456.789} />
      </Col>
    </Row>
  </div>,
  document.getElementById('container'),
);
```

## 受控货币输入框

受控货币输入框

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Currency } from 'choerodon-ui/pro';

class App extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      value: 100,
    };
  }

  handleChange = (value, oldValue) => {
    console.log('[newValue]', value, '[oldValue]', oldValue);
    this.setState({
      value,
    });
  }

  render() {
    return <Currency value={this.state.value} onChange={this.handleChange} />;
  }
}

ReactDOM.render(
  <App />,
  document.getElementById('container')
);
```

## 数据源

绑定数据源。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, Currency } from 'choerodon-ui/pro';

function handleDataSetChange({ record, name, value, oldValue }) {
  console.log('[dataset newValue]', value, '[oldValue]', oldValue, `[record.get('${name}')]`, record.get(name));
}

class App extends React.Component {
  ds = new DataSet({
    autoCreate: true,
    fields: [
      { name: 'money', type: 'number', defaultValue: 100000000000000, required: true, currency: 'USD' },
    ],
    events: {
      update: handleDataSetChange,
    },
  });

  render() {
    return <Currency dataSet={this.ds} name="money" />;
  }
}

ReactDOM.render(
  <App />,
  document.getElementById('container')
);
```

## 精度控制

根据字段值，控制值显示及精度。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, Currency, NumberField, Row, Col } from 'choerodon-ui/pro';

function handleDataSetChange({ record, name, value, oldValue }) {
  console.log('[dataset newValue]', value, '[oldValue]', oldValue, `[record.get('${name}')]`, record.get(name));
}

class App extends React.Component {
  ds = new DataSet({
    autoCreate: true,
    fields: [
      { name: 'precision', type: 'number', defaultValue: 4, min: 0, max: 100 },
      { name: 'money', type: 'number', defaultValue: 1000000.123, required: true },
    ],
    events: {
      update: handleDataSetChange,
    },
  });

  render() {
    return (
      <Row gutter={10}>
        <Col span="12">
          <NumberField placeholder="精度" dataSet={this.ds} name="precision" />
        </Col>
        <Col span="12">
          <Currency 
            dataSet={this.ds} 
            name="money" 
            renderer={({ value, record }) => {
```

## 字符串模式

字符串模式, 支持大数据。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, Currency, Row, Col } from 'choerodon-ui/pro';

function handleDataSetChange({ record, name, value, oldValue }) {
  console.log(
    '[dataset newValue]',
    value,
    '[oldValue]',
    oldValue,
    `[record.get('${name}')]`,
    record.get(name),
  );
}

function handleChange(value, oldValue) {
  console.log('[range newValue]', value, '[oldValue]', oldValue);
}

class App extends React.Component {
  ds = new DataSet({
    autoCreate: true,
    fields: [
      {
        name: 'age',
        type: 'bigNumber',
        step: 2,
        required: true,
        max: '12345678901234567890123456',
        min: '-12345678901234567890123456',
        defaultValue: '123456789012345678',
```

## 数值补零显示

未设置precision属性时，小数位数显示受 currency 和 lang 属性影响，默认显示 2 位小数，输入时为真实值。还可以设置 NumberFormatOptions 来控制小数显示位数。开启补零全局配置后，数值在输入和显示时根据precision补零显示，真实值不受影响。（当前页面设置了 precision 属性的组件都会受全局配置影响，数值都会补零显示）

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, Currency, Row, Col } from 'choerodon-ui/pro';
import { configure, Divider } from 'choerodon-ui';

configure({
  // 开启补零显示，不影响真实值
  useZeroFilledDecimal: true,
});

function handleDataSetChange({ record, name, value, oldValue }) {
  console.log(
    '[dataset newValue]',
    value,
    '[oldValue]',
    oldValue,
    `[record.get('${name}')]`,
    record.get(name),
  );
}

class App extends React.Component {
  ds = new DataSet({
    autoCreate: true,
    fields: [
      { name: 'money', type: 'number', defaultValue: 123.123, currency: 'CNY' },
      {
        name: 'moneyPrecision',
        type: 'number',
        defaultValue: 123.123,
        currency: 'CNY',
        precision: 2,
      },
```

## API

### Currency

| 属性名 | 说明 | 类型 |
| --- | --- | --- |
| currency | 货币代码，详见Current currency & funds code list. | 类型string |

更多属性请参考NumberField。

### Static method

| 名称 | 说明 | 属性名 |
| --- | --- | --- |
| format(value, lang, options) | 货币格式化 | 属性名value 数值 lang 语言代码 options 详见Intl.NumberFormatOptions |
| bigNumberFormat(value, lang, options, bigNumberTarget) | stringMode 字符串格式化(组件为Currency时,bigNumberTarget传入currency) | 属性名value- 字符串lang- 语言代码options- 详见Intl.NumberFormatOptions-BigNumberTarget可选值：currency\|number-field |



================================================================================
文件: DataSet.md
路径: doc\DataSet.md
================================================================================

# DataSet

初次使用该组件库建议阅读引导教程。

## API

### DataSet Props

| 属性名 | 说明 | 类型/默认值/版本 |
| --- | --- | --- |
| name | 对应后台 ds 的 name，自动生成约定的 submitUrl, queryUrl, tlsUrl, validateUrl | 类型Array<string> |
| data | 初始化数据 | 类型Array<object> |
| autoCount | 查询时通知后端是否自动统计总数， 用于分页。当设为 false 时， 查询的参数默认会带上count=N的参数，参数名和值可以通过全局配置 generatePageQuery 设置。当查询结果中 countKey 对应的值是 Y 时，会发起计数查询的请求，请求地址同 read 的地址， 请求参数会带上 onlyCount=Y 的参数，参数名和值可以通过全局配置 generatePageQuery 设置 | 类型boolean默认值autoCount版本1.5.5 |
| autoQuery | 初始化后自动查询 | 类型boolean默认值false |
| autoQueryAfterSubmit | 提交成功后响应的数据不符合回写条件时自动查询。注：回写条件是指响应数据中含有提交时的数据时，数据将按数据状态分组进行顺序回写，如果要更准确的回写，响应数据要含有提交时的__id 字段值。 | 类型boolean默认值true |
| autoCreate | 初始化时，如果没有记录且 autoQuery 为 false，则自动创建记录 | 类型boolean默认值false |
| autoLocateFirst | 数据加载后自动定位到第一条记录 | 类型boolean默认值true |
| autoLocateAfterCreate | 自动定位到新建记录 | 类型boolean默认值true |
| autoLocateAfterRemove | 当前数据被删除后自动定位到其他记录 | 类型boolean默认值true |
| validateBeforeQuery | 查询时是否校验查询字段或查询数据集 | 类型boolean默认值true版本1.0.0 |
| selection | 选择的模式, 可选值: false 'multiple' 'single' | 类型boolean string默认值multiple |
| selectionStrategy | 树形选择记录策略， SHOW_ALL \| SHOW_CHILD \| SHOW_PARENT | 类型string默认值'SHOW_ALL'版本1.4.2 |
| modifiedCheck | 翻页查询前，当有记录更改过时，是否警告提示。 | 类型boolean默认值true |
| modifiedCheckMessage | 翻页查询前，当有记录更改过时，警告提示。 | 类型ReactNode ModalProps |
| pageSize | 分页大小 | 类型number默认值10 |
| strictPageSize | 严格分页大小, 前端将截断超出 pageSize 的数据 | 类型boolean默认值true版本1.5.1 |
| paging | 是否分页，server 主要为 Table 的 Tree 模式服务，约定 total 为根节点数目，index 的定位都是基于根节点，为 server 时候保证同时存在 idField 和 parentField (根节点为空或者 undefined) 不然表现和原有版本一致; noCount用于无总数分页查询 | 类型boolean 'server'\| 'noCount'默认值true |
| dataKey | 查询返回的 json 中对应的数据的 key, 当为 null 时对应整个 json 数据, json 不是数组时自动作为新数组的第一条数据 | 类型string null默认值dataKey |
| totalKey | 查询返回的 json 中对应的总数的 key | 类型string默认值totalKey |
| countKey | 查询返回的 json 中对应的是否需要异步计数的 key | 类型string默认值countKey版本1.5.5 |
| queryDataSet | 查询条件数据源 | 类型DataSet |
| queryUrl | 查询请求的 url。 当设定 name 时，默认 /dataset/{name}/queries | 类型string |
| queryParameter | 查询请求的初始参数 | 类型object |
| submitUrl | 记录提交请求的 url。 当设定 name 时，默认 /dataset/{name}/mutations | 类型string |
| tlsUrl | 多语言查询请求的 url。 当设定 name 时， 默认 /dataset/{name}/languages | 类型string |
| validateUrl | 远程校验查询请求的 url。 当设定 name 时， 默认 /dataset/{name}/validate | 类型string |
| exportUrl | 导出请求的 url。 当设定 name 时， 默认 /dataset/{name}/export | 类型string |
| transport | 自定义 CRUD 请求配置, 详见Transport及AxiosRequestConfig | 类型Transport |
| feedback | 查询和提交数据的反馈配置, 详见Feedback | 类型Feedback |
| children | 级联行数据集, 例： { name1: dataSet1, name2: dataSet2 } | 类型{ name: DataSet |
| primaryKey | 主键字段名，一般用作级联行表的查询字段 | 类型string |
| idField | 树形数据当前节点 id 字段名，与 parentField 组合使用。 适用于平铺数据；变更节点层级可直接修改 idField 和 parentField 对应的值 | 类型string |
| parentField | 树形数据当前父节点 id 字段名，与 idField 组合使用。适用于平铺数据；变更节点层级可直接修改 idField 和 parentField 对应的值 | 类型string |
| childrenField | 树形数据子数据集字段名， 如果要异步加载子节点需设置 idField 和 parentField 或者使用 appendData 方法。适用于树形数据；变更节点层级需要操作 record.parent 和 record.children | 类型string版本1.4.5 |
| expandField | 树形数据标记节点是否展开的字段名 | 类型string |
| treeCheckStrictly | 树形数据节点选中状态是否独自控制（父子节点选中状态不再关联） | 类型boolean版本1.5.3 |
| checkField | 树形数据标记节点是否为选中的字段名，在展开按钮后面会显示 checkbox | 类型string |
| fields | 字段属性数组，详见Field Props | 类型object[] |
| record | 记录属性，详见Record Props | 类型object |
| queryFields | 查询字段属性数组，在内部生成 queryDataSet，优先级高于 queryDataSet 属性，详见Field Props | 类型object[] |
| cacheSelection | 缓存选中记录，使切换分页时仍保留选中状态。当设置了 primaryKey 或有字段设置了 unique 才起作用。 | 类型boolean默认值false |
| cacheModified | 缓存变更记录，使切换分页时仍保留变更的记录。当设置了 primaryKey 或有字段设置了 unique 才起作用。 | 类型boolean默认值false版本1.5.0-beta.0 |
| axios | 覆盖默认 axios | 类型AxiosInstance |
| dataToJSON | 数据转为 json 的方式，详见DataToJSON | 类型DataToJSON默认值dirty |
| cascadeParams | 级联查询参数 | 类型(record, primaryKey) => object默认值(record, primaryKey record.get(primaryKey) record.toData() |
| exportMode | 导出模式选择：前端导出，后端导出 | 类型client server默认值server |
| combineSort | 是否开启组件列排序传参; 前端排序和后端排序具体配置参考 Table API | 类型boolean默认值false版本1.4.2 |
| forceValidate | 始终校验全部数据 | 类型boolean默认值false版本1.4.5 |
| validationRules | 针对 dataSet 主体的校验规则，详见ValidationRule | 类型ValidationRule[]版本1.5.1 |

### DataSet Values

| 名称 | 说明 | 类型/版本 |
| --- | --- | --- |
| current | 获取或者设置当前记录 | 类型observable<Record> |
| currentPage | 当前页码 | 类型readonly observable<number> |
| currentIndex | 当前游标索引 | 类型observable<number> |
| totalCount | 总记录数 | 类型observable<number> |
| totalPage | 总页数 | 类型readonly observable<number> |
| pageSize | 分页大小 | 类型observable<number> |
| paging | 是否分页 | 类型observable<boolean> |
| counting | 是否在异步计数查询 | 类型observable<boolean>版本1.5.5 |
| status | 状态，loading submitting ready | 类型observable<string> |
| selection | 选择的模式, 可选值: false 'multiple' 'single' | 类型observable<string\|boolean> |
| selectionStrategy | 树形选择记录策略， SHOWALL \| SHOWCHILD \| SHOW_PARENT | 类型observable<string[]> |
| records | 所有记录 | 类型observable<Record[]> |
| fields | 所有字段 | 类型ObservableMap<string, Field>版本1.5.0-beta.0 |
| all | 所有记录, 包括缓存的记录 | 类型observable<Record[]> |
| data | 数据, 不包括删除状态的 Record | 类型observable<Record[]> |
| created | 新建的数据 | 类型readonly observable<Record[]> |
| updated | 更新的数据 | 类型readonly observable<Record[]> |
| destroyed | 暂时销毁的数据 | 类型readonly observable<Record[]> |
| selected | 选中记录，包括 isAllPageSelection 为 false 时缓存的选中记录 | 类型readonly observable<Record[]> |
| unSelected | 未选中记录，包括 isAllPageSelection 为 true 时缓存的未选中记录 | 类型readonly observable<Record[]> |
| currentSelected | 当前页选中记录 | 类型readonly observable<Record[]>版本1.4.0 |
| currentUnSelected | 当前页未选中记录 | 类型readonly observable<Record[]>版本1.4.0 |
| cachedSelected | isAllPageSelection 为 false 时缓存的选中记录 或 isAllPageSelection 为 true 时缓存的未选中记录 | 类型readonly observable<Record[]> |
| cachedModified | 缓存的变更记录 | 类型observable<Record[]>版本1.5.0-beta.0 |
| cachedRecords | 缓存的记录, 包括 cachedSelected 和 cachedModified | 类型observable<Record[]>版本1.5.0-beta.0 |
| treeSelected | 树形选中记录， 受 selectionStrategy 影响 | 类型readonly observable<Record[]>版本1.4.2 |
| length | 数据量 | 类型readonly observable<number> |
| queryDataSet | 查询数据源 | 类型observable<DataSet> |
| parent | 级联头数据源 | 类型readonly observable<DataSet> |
| children | 所有级联行数据源 | 类型readonly [key:string]: DataSet} |
| dirty | 含有状态不是 sync 的记录及 dirty 为 true 的记录 | 类型readonly observable<boolean>} |
| isAllPageSelection | 是否是跨页全选状态， 请配合 unSelected 一起做跨页选择数据提交， 需要接口支持 | 类型readonly observable<boolean>}版本1.4.0 |

### DataSet Methods

| 名称 | 说明 | 属性名/返回值类型/版本 |
| --- | --- | --- |
| ready() | 判断数据源是否准备就绪 | 返回值类型Promise |
| query(page, params, cache) | 查询 | 属性名page<optional,default:1> 指定页码params<optional> 临时查询参数cache<optional>(1.5.0-beta.0) 是否保留缓存的变更记录返回值类型Promise<any> |
| queryMore(page, params) | 查询更多， 保留原数据 | 属性名page<optional,default:1> 指定页码 params<optional> 临时查询参数返回值类型Promise<any>版本1.1.0 |
| submit() | 将数据集中的增删改的记录先进行校验再进行远程提交。submit 会抛出请求的异常，请用 promise.catch 或 try-await-catch 来处理异常。 | 返回值类型Promise<any> false 校验失败，undefined 无数据提交或提交相关配置不全，如没有 submitUrl。 |
| submitRecord(record, strictPageSize = false) | 将单条记录先进行校验再进行远程提交。submit 会抛出请求的异常，请用 promise.catch 或 try-await-catch 来处理异常。 | 返回值类型Promise<any>false- 校验失败，undefined- 无数据提交或提交相关配置不全，如没有 submitUrl。版本1.6.5 |
| forceSubmit() | 强制提交，绕过校验。 | 返回值类型Promise<any> undefined 无数据提交或提交相关配置不全，如没有 submitUrl。版本1.5.2 |
| reset() | 重置更改, 并清除校验状态 |  |
| locate(index) | 定位到指定记录, 如果paging 为 true和server，则做远程查询 为server指代的是根节点节点的index坐标 | 属性名index 记录索引返回值类型Promise<Record> |
| page(page) | 定位到指定页码，如果paging 为 true和server，则做远程查询 | 属性名page 页码返回值类型Promise<any> |
| first() | 定位到第一条记录，如果paging 为 true和server，则做远程查询 为server指代的第一个根节点 | 返回值类型Promise<Record> |
| last() | 定位到最后一条记录，如果paging 为 true和server，则做远程查询 为server指代的是最后的根节点 | 返回值类型Promise<Record> |
| pre() | 定位到上一条记录，如果paging 为 true和server，则做远程查询 为server指代的当前根节点的上一个根节点 | 返回值类型Promise<Record> |
| next() | 定位到下一条记录，如果paging 为 true和server，则做远程查询 为server指代的当前根节点的下一个根节点 | 返回值类型Promise<Record> |
| firstPage() | 定位到第一页，如果paging 为 true和server，则做远程查询 | 返回值类型Promise<any> |
| lastPage() | 定位到最后一页，如果paging 为 true和server，则做远程查询 | 返回值类型Promise<any> |
| prePage() | 定位到上一页，如果paging 为 true和server，则做远程查询 | 返回值类型Promise<any> |
| nextPage() | 定位到下一页，如果paging 为 true和server，则做远程查询 | 返回值类型Promise<any> |
| create(data, index) | 创建一条记录 | 属性名data 记录数据对象；index<optional,default:dataSet.records.length> 记录所在的索引返回值类型Record |
| delete(records, confirmMessage: ReactNode \| ModalProps) | 立即删除记录 | 属性名records 删除的记录或记录组 confirmMessage 自定义提示信息或弹窗的属性, 设为false时不弹确认直接删除 |
| remove(records, forceRemove) | 临时删除记录 | 属性名records 删除的记录或记录组; forceRemove(1.5.1) 是否强制删除 |
| deleteAll(confirmMessage: ReactNode \| ModalProps) | 立即删除所有记录 | 属性名confirmMessage 自定义提示信息或弹窗的属性, 设为false时不弹确认直接删除 |
| removeAll(forceRemove) | 临时删除所有记录 | 属性名forceRemove(1.5.1) 是否强制删除 |
| push(...records) | 将若干数据记录插入记录堆栈顶部 | 属性名records 插入的记录列表返回值类型number |
| unshift(...records) | 将若干数据记录插入记录堆栈底部 | 属性名records 插入的记录列表返回值类型number |
| pop() | 从记录堆栈顶部获取记录 | 返回值类型Record |
| shift() | 从记录堆栈底部获取记录 | 返回值类型Record |
| splice(from, deleteCount, ...records) | 删除指定索引的若干记录，并可插入若干新记录 | 属性名from<optional,default:0> 索引开始的位置；deleteCount<optional,default:0> 删除的数量； records 插入的若干新记录返回值类型Record[] |
| slice(start, end) | 截取指定索引范围的记录集，不改变原记录堆栈 | 属性名start<optional,default:0> 开始索引；end<optional,default:记录堆栈长度> 结束索引返回值类型Record[] |
| find(fn) | 根据函数查找并返回第一条记录 | 属性名fn 查询函数(record, index, array) => boolean返回值类型Record |
| findIndex(fn) | 根据函数查找记录所在的索引 | 属性名fn 查询函数(record, index, array) => boolean返回值类型number |
| forEach(fn, thisArg) | 根据函数遍历 | 属性名fn 遍历函数(record, index, array) => void |
| map(fn, thisArg) | 根据函数遍历并输出新数组 | 属性名fn 遍历函数(record, index, array) => any返回值类型any[] |
| some(fn, thisArg) | 根据函数遍历，当有返回值为 true 时，输出 true | 属性名fn 遍历函数(record, index, array) => boolean返回值类型boolean |
| every(fn, thisArg) | 根据函数遍历，当有返回值为 false 时，输出 false | 属性名fn 遍历函数(record, index, array) => boolean返回值类型boolean |
| filter(fn, thisArg) | 根据函数过滤并返回记录集 | 属性名fn 过滤函数(record, index, array) => boolean返回值类型Record[] |
| reduce(fn, initialValue) | 为数组中的所有元素调用指定的回调函数。 回调函数的返回值是累计结果，并在下次调用回调函数时作为参数提供 | 属性名fn 过滤函数(previousValue, record, index, array) => value initialValue 初始值返回值类型typeof |
| reduceRight(fn, initialValue) | 按降序调用数组中所有元素的指定回调函数。 回调函数的返回值是累计结果，并在下次调用回调函数时作为参数提供 | 属性名fn 过滤函数(previousValue, record, index, array) => value initialValue 初始值返回值类型typeof |
| indexOf(record, fromIndex) | 获取记录所在索引 | 属性名record 记录；fromIndex<optional> 开始检索的索引返回值类型number |
| reverse() | 反转记录的顺序 | 返回值类型Record[] |
| select(recordOrIndex) | 选中记录 | 属性名recordOrIndex 记录对象或记录的索引 |
| unSelect(recordOrIndex) | 取消选中记录 | 属性名recordOrIndex 记录对象或记录的索引 |
| selectAll() | 全选当前页 |  |
| unSelectAll() | 取消全选当前页 |  |
| batchSelect(recordOrId) | 批量选择记录 | 属性名recordOrId 记录对象或记录的id集 |
| batchUnSelect(recordOrId) | 取消批量选择记录 | 属性名recordOrId 记录对象或记录的id集 |
| treeSelect(record) | 选择记录和其子记录 | 属性名record 记录对象版本1.4.2 |
| treeUnSelect(record) | 取消选择记录和其子记录 | 属性名record 记录对象 |
| clearCachedSelected() | 清除缓存的选中记录 |  |
| clearCachedModified() | 清除缓存的变更记录 | 版本1.5.0-beta.0 |
| clearCachedRecords() | 清除所有缓存的记录 | 版本1.5.0-beta.0 |
| get(index) | 获取指定索引的记录 | 属性名index 记录索引返回值类型Record |
| getFromTree(index) | 从树形数据中获取指定索引的根节点记录 | 属性名index 记录索引返回值类型Record |
| validate() | 校验数据记录是否有效 | 返回值类型Promise<boolean> |
| getField(fieldName) | 根据字段名获取字段 | 属性名fieldName 字段名返回值类型Field |
| addField(fieldName, fieldProps) | 增加新字段 | 属性名fieldName 字段名，fieldProps 字段属性返回值类型Field |
| toJSONData() | 转换成用于提交的 json 数据 | 返回值类型object[] |
| toData() | 转换成普通数据，不包含删除的数据 | 返回值类型object[] |
| bind(ds, name) | 绑定头 DataSet | 属性名ds DataSet 对象或 id name 绑定名 |
| setQueryParameter(para, value) | 设置查询参数 | 属性名para 参数名 value 参数值 |
| getQueryParameter(para) | 获取查询参数 | 属性名para 参数名版本1.4.0 |
| loadData(data, total, cache) | 加载数据 | 属性名data- 数据数组total- 总数，可选，用于分页cache(1.5.0-beat.0) 是否保留缓存的变更记录 |
| appendData(data, parentRecord) | 附加数据 | 属性名data- 数据数组parentRecord- 父节点，可选， 用于 childrenField 模式的树形数据 |
| setState(key, value) | 设置自定义状态值。 | 属性名key 键名或者键值对对象；value 值版本1.3.1 |
| getState(key) | 获取自定义状态值。 | 属性名key 键名版本1.3.1 |
| modifiedCheck(message) | 变更检查 | 属性名message modifiedCheckMessage， 优先级高于 modifiedCheckMessage版本1.3.1 |
| setAllPageSelection(enabled) | 切换是否跨页全选。 | 属性名enabled 是否开启版本1.4.0 |
| getValidationErrors() | 获取校验错误信息 | 版本1.4.0 |
| generateOrderQueryString() | 获取排序信息。设置 combineSort 属性为 true 时，返回字符串数组，数组形如：['age,desc', 'name,asc']；否则返回 object | 返回值类型{ sortname?: string; sortorder?: string[]版本1.6.4 |

### DataSet Events

| 事件名 | 说明 | 钩子参数/参数说明/是否可异步/版本 |
| --- | --- | --- |
| update | 值更新事件 | 钩子参数({ dataSet, record, name, value, oldValue }) => void参数说明dataSet 数据集 record 更新的记录 name 更新的字段 value 新值 旧值是否可异步是 |
| query | 查询事件，返回值为 false 将阻止查询 | 钩子参数({ dataSet, params, data }) => boolean参数说明dataSet 数据集 params 查询参数 查询参数是否可异步是 |
| beforeLoad | 数据加载前的事件， 用于处理请求数据 | 钩子参数({ dataSet, data }) => void参数说明dataSet 数据集 请求数据是否可异步是 |
| load | 数据加载完后事件 | 钩子参数({ dataSet }) => void参数说明dataSet 数据集是否可异步是 |
| beforeAppend | 数据附加前的事件， 用于处理请求数据 | 钩子参数({ dataSet, data }) => void参数说明dataSet 数据集 请求数据是否可异步是 |
| append | 数据附加完后事件 | 钩子参数({ dataSet }) => void参数说明dataSet 数据集是否可异步是版本1.1.0 |
| loadFailed | 数据加载失败事件 | 钩子参数({ dataSet }) => void参数说明dataSet 数据集是否可异步是 |
| submit | 提交事件，返回值为 false 将阻止提交 | 钩子参数({ dataSet, data }) => boolean参数说明dataSet 数据集 json 数据是否可异步是 |
| submitSuccess | 提交成功事件 | 钩子参数({ dataSet, data }) => void参数说明dataSet 数据集 响应数据是否可异步是 |
| submitFailed | 提交失败事件 | 钩子参数({ dataSet }) => void参数说明dataSet 数据集是否可异步是 |
| select | 选择记录事件 | 钩子参数({ dataSet, record, previous }) => void参数说明dataSet 数据集 record 选择的记录 之前选择的记录，单选模式下有效是否可异步是 |
| unSelect | 撤销选择记录事件 | 钩子参数({ dataSet, record }) => void参数说明dataSet 数据集 撤销选择的记录是否可异步是 |
| selectAll | <废弃>全选记录事件 | 钩子参数({ dataSet }) => void参数说明dataSet 数据集是否可异步是 |
| unSelectAll | <废弃>撤销全选记录事件 | 钩子参数({ dataSet }) => void参数说明dataSet 数据集是否可异步是 |
| batchSelect | 批量选择记录事件, 由 select, selectAll, batchSelect 和 treeSelect 方法触发 | 钩子参数({ dataSet, records }) => void参数说明dataSet 数据集 选择的记录集是否可异步是 |
| batchUnSelect | 批量取消选择记录事件, 由 unSelect, unSelectAll, batchUnSelect 和 treeUnSelect 方法触发 | 钩子参数({ dataSet, records }) => void参数说明dataSet 数据集 选择的记录集是否可异步是版本1.4.2 |
| selectAllPage | 跨页全选事件 | 钩子参数({ dataSet }) => void参数说明dataSet 数据集是否可异步是版本1.5.3 |
| unSelectAllPage | 取消跨页全选事件 | 钩子参数({ dataSet }) => void参数说明dataSet 数据集是否可异步是版本1.5.3 |
| indexChange | 当前记录变更事件 | 钩子参数({ dataSet, record, previous }) => void参数说明dataSet 数据集 record 新当前记录 旧当前记录是否可异步是 |
| fieldChange | 字段属性变更事件 | 钩子参数({ dataSet, record, name, propsName, value, oldValue }) => void参数说明dataSet 数据集 record 字段所属记录，dataSet 的字段无 name 字段名 propsName 属性名 value 新值 旧值是否可异步是 |
| create | 记录创建事件 | 钩子参数({ dataSet, record }) => void参数说明dataSet 数据集 创建的记录是否可异步是 |
| remove | 记录移除事件 | 钩子参数({ dataSet, records }) => void参数说明dataSet 数据集 移除的记录是否可异步是 |
| export | 导出事件，返回值为 false 将阻止导出 | 钩子参数({ dataSet, params, data }) => boolean参数说明dataSet 数据集 params 查询参数 查询参数是否可异步是 |
| beforeRemove | 数据临时删除前的事件， 返回值为 false 将阻止临时删除 | 钩子参数({ dataSet, records }) => boolean参数说明dataSet 数据集 记录集是否可异步否 |
| beforeDelete | 数据删除前的事件， 返回值为 false 将阻止删除 | 钩子参数({ dataSet, records }) => boolean参数说明dataSet 数据集 记录集是否可异步是版本1.0.0 |
| reset | 数据重置事件 | 钩子参数({ dataSet, records }) => void参数说明dataSet 数据集 记录集是否可异步是 |
| validate | 校验事件，针对DS数据，区别于 validateSelf | 钩子参数({ dataSet, result }) => void参数说明dataSet 数据集 校验结果集是否可异步是 |
| validateSelf | 校验dataSet事件,校验只针对DS主体，参考ValidationRule | 钩子参数({ dataSet, result }) => void参数说明dataSet- 数据集result- 校验结果是否可异步是版本1.5.1 |

### Record Props

1.5.0 版本新增属性，更多案例参考Form&Table。

| 属性名 | 说明 | 类型/默认值 |
| --- | --- | --- |
| disabled | 是否禁用 | 类型boolean默认值false |
| selectable | 是否可选 | 类型boolean默认值true |
| defaultSelected | 是否默认选中 | 类型boolean默认值false |
| defaultExpanded | 是否默认展开 | 类型boolean默认值false |
| dynamicProps | 动态属性对象。对象为记录属性和返回该记录属性值的钩子的键值对。 | 类型{ recordProp: (record) => value |

### Record Values

详细介绍：Record

| 名称 | 说明 | 类型 |
| --- | --- | --- |
| id | 唯一 ID，自增长的数字 | 类型number |
| key | 唯一键，主键字段或唯一索引键字段的值，默认同 id | 类型string number |
| status | 状态， 可选值 add \| update \| delete \| sync | 类型observable<string> |
| disabled(1.5.0) | 禁用 | 类型observable<boolean> |
| selectable | 可选 | 类型observable<boolean> |
| selectedTimestamp（1.5.3） | 选中时间戳, 可用于排序 | 类型observable<number> |
| isSelected | 是否选中 | 类型observable<boolean> |
| isCurrent | 是否当前记录 | 类型observable<boolean> |
| isExpanded | 树形节点是否展开 | 类型observable<boolean> |
| children | 树形子数据集 | 类型Record[] undefined |
| parent | 树形父数据 | 类型Record undefined |
| previousRecord | 树形中前一条数据 | 类型Record undefined |
| nextRecord | 树形中后一条数据 | 类型Record undefined |
| level | 树形层级 | 类型number |
| dirty | 数据是否发生变更， 包含级联数据源是否变更 | 类型boolean |
| cascadeParent | 级联父数据 | 类型Record undefined |
| index | 在数据源中的索引 | 类型number |
| editing | 编辑中状态 | 类型boolean |
| pending | 等待中状态， 包括树形子数据异步加载 | 类型boolean |

### Record Methods

详细介绍：Record

| 名称 | 说明 | 属性名/返回值类型/版本 |
| --- | --- | --- |
| get(fieldName) | 根据字段名获取字段值或根据字段名数组获取字段名与字段值的对象。注意：禁止通过 record.data[fieldName]的方式获取字段值。 | 属性名fieldName 字段名 字段名数组返回值类型any |
| getPristineValue(fieldName) | 根据字段名获取字段的原始值。 | 属性名fieldName 字段名返回值类型any |
| set(fieldName, value) | 给指定字段赋值 | 属性名fieldName 字段名或者键值对对象；value |
| init(fieldName, value) | 给指定字段初始化值。字段变为净值。 | 属性名fieldName 字段名或者键值对对象；value |
| setState(key, value) | 设置自定义状态值。 | 属性名key 键名或者键值对对象；value |
| getState(key) | 获取自定义状态值。 | 属性名key 键名 |
| toJSONData() | 转换成用于提交的 json 数据, 受 DataSet 的 dataToJSON 属性影响。 | 返回值类型object |
| toData() | 转换成普通数据, 包括所有级联数据。 注意：禁止通过此方法获取的 data 来获取值，请用更高性能的 get 方法来获取值。 | 返回值类型object |
| validate(all, noCascade) | 校验记录 | 属性名all 校验所有字段，默认为 false，只校验修改或新增字段 noCascade true 时，不校验级联数据返回值类型Promise<boolean> |
| getCascadeRecords(childName) | 根据级联名获取子级联数据 | 属性名childName 级联名返回值类型Record[] |
| getField(fieldName) | 根据字段名获取字段，注意：1.5.0-beta.0 版本后尽量使用 dataSet.getField 来提高性能, 如果要获取 recordField 的属性， 可以使用 dsField.get(name, record) | 属性名fieldName- 字段名返回值类型Field |
| addField(fieldName, fieldProps) | 增加新字段, 1.5.0-beta.0 版本后如果该字段非 record 独有的话，请选择使用 dataSet.addField | 属性名fieldName- 字段名，fieldProps- 字段属性返回值类型Field |
| clone() | 克隆记录，自动剔除主键值 | 返回值类型Record |
| ready() | 判断记录是否准备就绪 | 返回值类型Promise |
| reset() | 重置更改 |  |
| save() | 保存当前数据至缓存 |  |
| restore() | 从缓存恢复保存的数据 |  |
| clear() | 清除所有数据 |  |
| getValidationErrors() | 获取校验错误信息 | 版本1.4.0 |

### Field Props

详细介绍：Field

| 属性名 | 说明 | 类型/默认值/版本 |
| --- | --- | --- |
| name | 字段名 | 类型string |
| type | 字段类型，可选值：boolean \| number \| string \| date \| dateTime \| time \| week \| month \| year \| email \| url \| intl \| object \| attachment \| json \| bigNumber(1.5.1) | 类型string默认值auto |
| order | 排序类型，只支持单 field 排序， 如果多个 field 设置了 order，取第一个有 order 的 field，可选值: asc \| desc | 类型string |
| label | 字段标签 | 类型string ReactNode |
| labelWidth | 字段标签宽度 | 类型number |
| format | 字符串类型和日期类型字段值格式化。 字符串类型格式化可选值: 'uppercase' 'lowercase' 'capitalize' | 类型string |
| pattern | 正则校验 | 类型string RegExp |
| maxLength | 最大长度 | 类型number |
| minLength | 最小长度 | 类型number |
| max | 最大值。 fieldName 指向当前记录的 fieldName 值作为最大值。 | 类型BigNumber.Value MomentInput fieldName默认值Infinity |
| min | 最小值。 fieldName 指向当前记录的 fieldName 值作为最小值。 | 类型BigNumber.Value MomentInput fieldName默认值-Infinity |
| maxExcl | 严格最大值。 fieldName 指向当前记录的 fieldName 值作为最大值。 | 类型BigNumber.Value MomentInput fieldName默认值Infinity版本1.6.6 |
| minExcl | 严格最小值。 fieldName 指向当前记录的 fieldName 值作为最小值。 | 类型BigNumber.Value MomentInput fieldName默认值-Infinity版本1.6.6 |
| step | 步距。 | 类型BigNumber.Value number hour: number, minute: second: string |
| nonStrictStep | 非严格步距，在非严格步距下，允许输入值不为步距的倍数加上最小值，也允许在设置整数步距的情况下输入小数 | 类型boolean默认值false |
| precision | 小数点精度, 提交时会截断 | 类型number版本1.3.0 |
| numberGrouping | 千分位分组显示 | 类型boolean默认值true版本1.3.0 |
| formatterOptions | 数字和货币格式化配置 | 类型FormatNumberFuncOptions: lang?: string, options?:Intl.NumberFormatOptions}版本1.5.1 |
| validator | 校验器，当返回值为 false 或 涵盖错误信息的字符串，则为校验失败 | 类型(value, name, record) => boolean string undefined |
| required | 是否必选 | 类型boolean默认值false |
| readOnly | 是否只读 | 类型boolean默认值false |
| disabled | 是否禁用 | 类型boolean默认值false |
| textField | 值列表的文本字段 | 类型string默认值meaning |
| valueField | 值列表的值字段 | 类型string默认值value |
| trueValue | 类型为 boolean 时，true 对应的值 | 类型boolean \|string \|number默认值true |
| falseValue | 类型为 boolean 时，false 对应的值 | 类型boolean \|string \|number默认值false |
| options | 下拉框组件的菜单数据集 | 类型DataSet |
| optionsProps | 值集组件的数据集配置 | 类型DataSetProps (DataSetProps) => DataSetProps |
| group | 是否分组，如果是 number，则为分组的顺序 | 类型boolean \|number |
| defaultValue | 默认值 | 类型any |
| multiple | 是否为值数组。 当为字符串时，作为数据分隔符，查询时会将字符串分割成数组，提交时会将数组拼接成字符串 | 类型boolean string默认值false |
| range | 是否为范围值。 当为 true 时，则值为[startValue, endValue]；当为数组时，例如['start', 'end']时，则值为{ start: startValue, end: endValue } | 类型boolean [string, string]默认值false |
| unique | 唯一索引或联合唯一索引组名。multiple 和 range 字段不适用。当 column 的 editor 设为 true 时，编辑器只会在新增的记录显示，如果要对已有数据进行编辑，请自定义 editor | 类型boolean string默认值false |
| lovCode | LOV 配置代码 | 类型string |
| lovPara | LOV 或 Lookup 查询参数对象 | 类型object |
| lookupCode | 值列表代码 | 类型string |
| lookupUrl | 值列表请求地址 | 类型string (code) => string |
| lovDefineUrl | lov 配置请求地址 | 类型string (code) => string |
| lovQueryUrl | lov 查询请求地址 | 类型string (code: string, lovConfig?: LovConfig, dataSet, params, data, lovQueryDetail }) => string |
| lookupAxiosConfig | 值列表请求配置或返回配置的钩子，详见AxiosRequestConfig。配置中默认 url 为 lookupUrl， method 为 post。 | 类型AxiosRequestConfig\| ({ dataSet, record, params, lookupCode }) => AxiosRequestConfig |
| lovDefineAxiosConfig | lov 配置的请求配置或返回配置的钩子，详见AxiosRequestConfig。 配置中默认 url 为 lovDefineUrl， method 为 post。 | 类型AxiosRequestConfig\| (code: string, field?: Field) => AxiosRequestConfig |
| lovDefineBatchAxiosConfig | 返回 lov 配置批量查询配置的钩子，优先级高于全局配置的 lovDefineBatchAxiosConfig ，根据返回配置的url的不同分别做批量查询，详见AxiosRequestConfig。 | 类型(codes: string[]) => AxiosRequestConfig默认值-版本1.6.3 |
| lovQueryAxiosConfig | lov 查询的请求配置或返回配置的钩子，详见AxiosRequestConfig。 配置中默认 url 为 lovQueryUrl， method 为 post。 | 类型AxiosRequestConfig\| (code, config, dataSet, params, data, lovQueryDetail }) => AxiosRequestConfig |
| lookupBatchAxiosConfig | 返回 lookup 批量查询配置的钩子，优先级高于全局配置的lookupBatchAxiosConfig，根据返回配置的url的不同分别做批量查询，详见AxiosRequestConfig。 | 类型(codes: string[]) => AxiosRequestConfig默认值-版本1.0.0 |
| bind | 内部字段别名绑定 | 类型string |
| dynamicProps | 动态属性对象。对象为字段属性和返回该字段值的钩子的键值对。 | 类型{ fieldProp: ({ dataSet, record, name }) => value |
| computedProps | 计算属性对象。功能和用法同 dynamicProps，具有 mobx computed 的缓存功能，一般用于计算量大的场景，避免重复计算，提高性能。请确保计算依赖的值是可观察的。 | 类型{ fieldProp: ({ dataSet, record, name }) => value }版本1.4.0 |
| cascadeMap | 快码和 LOV 查询时的级联参数映射，详见级联。 | 类型object |
| currency | 货币代码，详见Current currency & funds code list. | 类型string |
| ignore | 忽略提交, 可选值: always - 总是忽略 clean - 值未变化时忽略 never - 从不忽略 | 类型string |
| transformRequest | 在发送请求之前对数据进行处理 | 类型(value: any, record: Record) => any |
| transformResponse | 在获得响应之后对数据进行处理 | 类型(value: any, object: any) => any |
| trim | 字符串值是否去掉首尾空格，可选值: both \| left \| right \| none | 类型string默认值both |
| defaultValidationMessages | 默认校验信息，详见ValidationMessages | 类型ValidationMessages |
| highlight | 高亮, 如是字符串或 ReactElement, 则会显示 Tooltip | 类型boolean ReactNode版本1.4.0 |
| showCheckedStrategy | 树形多选时定义选中项回填的方式。SHOWCHILD: 只显示子节点. SHOWPARENT: 只显示父节点(当父节点下所有子节点都选中时). 默认显示所有选中节点(包括父节点). | 类型string默认值SHOW_ALL版本1.4.4 |
| bucketName | 附件上传的桶名 | 类型string版本1.4.4 |
| bucketDirectory | 附件上传的桶目录 | 类型string版本1.4.4 |
| storageCode | 附件存储编码 | 类型string版本1.4.4 |
| template | 附件模板 | 类型{ bucketName?: string, bucketDirectory?: storageCode?:string, attachmentUUID: isPublic?: boolean }版本1.5.5 |
| attachmentCount | 附件数量， 一般使用 dynamicProps 来获取 record 中某个字段值作为附件数量， 优先级低于attachments.length | 类型string版本1.4.4 |
| fileKey | 附件上传属性名 | 类型string默认值AttachmentConfig.defaultFileKey版本1.5.2 |
| fileSize | 附件大小限制 | 类型number默认值AttachmentConfig.defaultFileSize版本1.5.2 |
| useChunk | 附件开启分片上传 | 类型string版本1.5.2 |
| chunkSize | 附件分片大小 | 类型number默认值AttachmentConfig.defaultChunkSize版本1.5.2 |
| chunkThreads | 附件分片上传并发数 | 类型number默认值AttachmentConfig.defaultChunkThreads版本1.5.2 |
| processValue | 值变更时，拦截并返回一个新的值 | 类型(value: any, range?: 1) => any版本1.4.4 |
| help | 额外信息，常用于提示 | 类型ReactNode |
| dateMode | 日期组件显示模式,可选值:datedateTimetimeyearmonthweek | 类型string默认值date版本1.5.6 |
| accept | Attachment 接受上传的文件类型input accept Attribute | 类型string[]版本1.5.7 |
| useLookupBatch | 是否使用批量查询快码 | 类型(code: string, field?: Field) => boolean版本1.6.5 |
| useLovDefineBatch | 是否使用批量查询 lov 配置 | 类型(code: string, field?: Field) => boolean版本1.6.5 |

### Field Values

详细介绍：Field

| 名称 | 说明 | 类型/版本 |
| --- | --- | --- |
| name | 字段名 | 类型readonly string |
| type | 类型 | 类型observable<string> |

### Field Methods

详细介绍：Field

- 当 field 是通过 ds.getField 获取的字段时， 以上传了 record 参数的方法等同于调用了通过 record.getField 得到的 field 对应的方法。版本：1.5.0-beta.0+

| 名称 | 说明 | 属性名/返回值类型/版本 |
| --- | --- | --- |
| get(propsName, record) | 根据属性名获取属性值 | 属性名propsName- 属性名record- 记录返回值类型any |
| set(propsName, value) | 设置属性值 | 属性名propsName 属性名；value 属性值 |
| reset() | 重置设置的属性 |  |
| checkValidity(record) | 校验字段值 | 属性名record- 记录返回值类型boolean |
| setLovPara(para, value, record) | 设置 Lov 的查询参数 | 属性名para- 参数名；value- 参数值record- 记录返回值类型- |
| getOptions(record) | 获取选项数据集， 设置了 lookupCode 和 lovCode 的字段也适用 | 属性名record- 记录返回值类型DataSet |
| getValue(record) | 获取当前记录的本字段值 | 属性名record- 记录返回值类型any |
| getText(lookupValue, showValueIfNotFound, record) | 根据 lookup 值获取 lookup 描述 | 属性名lookupValue- lookup 值，默认本字段值showValueIfNotFound- 当未找到文本时显示值record- 记录返回值类型string |
| getLookupData(lookupValue, record) | 根据 lookup 值获取 lookup 数据对象 | 属性名lookupValue- lookup 值，默认本字段值record- 记录返回值类型object |
| fetchLookup(noCache, record) | 请求 lookup 数据，若有缓存直接返回缓存数据。 | 属性名noCache- 是否禁用缓存record- 记录返回值类型Promise<object[]> |
| isValid(record) | 是否校验通过 | 属性名record- 记录返回值类型boolean |
| isDirty(record) | 值是否变更 | 属性名record- 记录返回值类型boolean |
| getValidationMessage(record) | 获取校验信息 | 属性名record- 记录返回值类型string |
| getValidationErrorValues(record) | 获取校验结果 | 属性名record- 记录返回值类型ValidationResult[]版本1.5.0-beta.0 |
| getAttachments(record) | 获取附件列表 | 属性名record- 记录返回值类型AttachmentFile[]版本1.5.0-beta.0 |
| getAttachmentCount(record) | 获取附件数量 | 属性名record- 记录返回值类型number版本1.5.0-beta.0 |

### Group Values

1.5.1 版本新增属性

| 名称 | 说明 | 类型 |
| --- | --- | --- |
| name | 分组名， 对应字段名 | 类型readonly string |
| value | 分组值， 对应字段值 | 类型readonly any |
| records | 分组数据集，若有子分组则为空数组 | 类型Record[] |
| totalRecords | 总数据集，涵盖所有子分组的数据集 | 类型Record[] |
| subGroups | 非同组子分组 | 类型Group[] |
| parentGroup | 非同组父分组 | 类型Group |
| children | 同组树形子分组 | 类型Group[] |
| parent | 同组树形父分组 | 类型Group |
| index | 索引 | 类型number |

### Group Methods

1.5.1 版本新增属性

| 名称 | 说明 | 属性名/返回值类型 |
| --- | --- | --- |
| setState(key, value) | 设置自定义状态值。 | 属性名key 键名或者键值对对象；value |
| getState(key) | 获取自定义状态值。 | 属性名key 键名 |

### Transport

详细介绍：Transport

| 属性 | 说明 | 类型 |
| --- | --- | --- |
| create | 新建请求的 axios 配置或 url 字符串 | 类型AxiosRequestConfig ({ data, params, dataSet }) => AxiosRequestConfig string |
| read | 查询请求的 axios 配置或 url 字符串 | 类型AxiosRequestConfig ({ data, params, dataSet }) => AxiosRequestConfig string |
| update | 更新请求的 axios 配置或 url 字符串 | 类型AxiosRequestConfig ({ data, params, dataSet }) => AxiosRequestConfig string |
| destroy | 删除请求的 axios 配置或 url 字符串 | 类型AxiosRequestConfig ({ data, params, dataSet }) => AxiosRequestConfig string |
| validate | 唯一性校验请求的 axios 配置或 url 字符串。当字段配了 unique 属性时，在当前数据集中没有重复数据的情况下，则会发起远程唯一性校验。校验的请求 data 格式为 { unique: [{fieldName1: fieldValue1,fieldName2: fieldValue2...}] }，响应格式为 boolean \| boolean[]。 | 类型AxiosRequestConfig ({ data, params, dataSet }) => AxiosRequestConfig string |
| submit | create, update, destroy 的默认配置或 url 字符串。 | 类型AxiosRequestConfig ({ data, params, dataSet }) => AxiosRequestConfig string |
| tls | 多语言数据请求的 axios 配置或 url 字符串。UI 接收的接口返回值格式为：[{ name: { zhCN: '简体中文', enUS: '美式英语', ... }}]， 其中 name 是字段名。请使用全局配置 transport 的 tls 钩子统一处理。 | 类型AxiosRequestConfig ({ data, params, dataSet, record, name }) => AxiosRequestConfig string |
| exports | 导出的配置或 url 字符串 | 类型AxiosRequestConfig ({ data, params, dataSet }) => AxiosRequestConfig string |
| adapter | CRUD 配置适配器 | 类型(config: AxiosRequestConfig, type: string) => AxiosRequestConfig |

### Feedback

| 属性 | 说明 | 类型 |
| --- | --- | --- |
| loadSuccess(resp) | DataSet 查询成功的反馈, resp - 响应值 | 类型Function |
| loadFailed(error) | DataSet 查询失败的反馈, error - 异常对象 | 类型Function |
| submitSuccess(resp) | DataSet 提交成功的反馈, resp - 响应值 | 类型Function |
| submitFailed(error) | DataSet 提交失败的反馈, error - 异常对象 | 类型Function |

### DataToJSON

详细介绍：DataToJSON

| 枚举值 | 说明 | 版本 |
| --- | --- | --- |
| dirty | 只转换变更的数据，包括本身无变更但级联有变更的数据 |  |
| dirty-field | 只转数据中变更了的字段（包括主键和unique以及ignore为never的字段），包括本身无变更但级联有变更的数据 | 版本1.4.2 |
| selected | 只转换选中的数据，无关数据的变更状态 |  |
| all | 转换所有数据 |  |
| normal | 转换所有数据为普通 json，不会带上__status, __id 等附加字段，也不会出现临时删除的数据， 一般用于大 JSON 字段 |  |
| dirty-self | 同 dirty， 但不转换级联数据 |  |
| dirty-field-self | 同 dirty-field， 但不转换级联数据 | 版本1.4.2 |
| selected-self | 同 selected， 但不转换级联数据 |  |
| all-self | 同 all， 但不转换级联数据 |  |
| normal-self | 同 normal， 但不转换级联数据 |  |

### AttachmentFile

1.4.4 版本新增属性

| 属性 | 说明 | 类型 |
| --- | --- | --- |
| name | 文件全名 | 类型string |
| size | 文件大小 | 类型number |
| type | 文件类型 | 类型string |
| lastModified | 文件最后修改时间戳 | 类型number |
| creationDate | 上传时间 | 类型Date |
| uid | 唯一标识 | 类型string |
| url | url地址 | 类型string |
| filename | 文件名（不包含后缀） | 类型string |
| ext | 文件后缀 | 类型string |
| status | 状态 error \| success \| uploading \| deleting \| done | 类型string |
| percent | 上传进度, 0 至 100 | 类型number |
| error | 上传错误对象 | 类型AxiosError |
| errorMessage | 错误消息 | 类型string |
| invalid | 检验失败，如果为true, 则无法重新上传 | 类型boolean |
| originFileObj | 原始文件对象，只有通过上传按钮选择的附件才有该对象 | 类型File |

### AttachmentFileChunk

1.5.2 版本新增属性

| 属性 | 说明 | 类型 |
| --- | --- | --- |
| file | AttachmentFile对象 | 类型AttachmentFile |
| total | 文件总大小 | 类型number |
| start | 分片起始位置 | 类型number |
| end | 分片结束位置 | 类型number |
| index | 分片索引 | 类型number |
| status | 状态 error \| success \| uploading | 类型string |
| percent | 上传进度, 0 至 100 | 类型number |

### ValidationRule

1.5.1 版本新增属性

| 属性 | 说明 | 类型 |
| --- | --- | --- |
| name | 校验的名称，可选值：minLength \| maxLength | 类型string |
| value | 校验值 | 类型number |
| message | 校验提示内容 | 类型string |
| disabled(1.5.2) | 禁用 | 类型boolean ({ dataSet }) => boolean |



================================================================================
文件: DataSet_Example.md
路径: doc\DataSet_Example.md
================================================================================

# DataSet Example 数据源示例

针对 DataSet 关键属性做示例说明。

## 代码演示

## 数据转化案例

通过表格示例，观察执行结果理解 DataSet 数据转化 dataToJSON 属性。

| 名称 | 编码 | 数字 | 多选日期 |
| --- | --- | --- | --- |
|  | name1 | code1 | 30 |
|  | name2 | code2 | 30 |

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import {
  Button,
  DataSet,
  Form,
  Table,
  SelectBox,
  CodeArea,
  Row,
  Col,
} from 'choerodon-ui/pro';
import { action } from 'mobx';
// 引入格式化器
import JSONFormatter from 'choerodon-ui/pro/lib/code-area/formatters/JSONFormatter';
// 引入 json lint
import 'choerodon-ui/pro/lib/code-area/lint/json';
// 处理 codemirror 的SSR问题， 如无需SSR，请用import代替require;
import 'codemirror/mode/javascript/javascript';

const data = [
  {
    id: '1',
    code: 'code1',
    name: 'name1',
    number: 30,
    date_multiple_range: [
      ['1984-11-22', '1985-07-01'],
      ['2020-11-22', '2021-07-01'],
    ],
    jsonData: JSON.stringify({
      view: [
        { id: 'id1-1', code: 'code1-1', name: 'view1-1' },
        { id: 'id1-2', code: 'code1-2', name: 'view1-2' },
      ],
      model: [
        { id: 'id1-1', code: 'code1-1', name: 'model1-1' },
        { id: 'id1-2', code: 'code1-2', name: 'model1-2' },
      ],
    }),
  },
  {
    id: '2',
    code: 'code2',
    name: 'name2',
    number: 30,
    jsonData: JSON.stringify({
      view: [
        { id: 'id2-1', code: 'code2-1', name: 'view2-1' },
        { id: 'id2-2', code: 'code2-2', name: 'view2-2' },
      ],
      model: [
        { id: 'id2-1', code: 'code2-1', name: 'model2-1' },
        { id: 'id2-2', code: 'code2-2', name: 'model2-2' },
      ],
    }),
  },
];
const json = JSON.stringify(data, null, 2);

const jsonStyle = { height: 400 };

const App = () => {
  const [result, setResult] = React.useState();
  const [dataToJSON, setDataToJSON] = React.useState('dirty');
  const dataToJSONOptions = React.useMemo(
    () =>
      new DataSet({
        data: [
          { value: 'dirty', meaning: 'dirty' },
          { value: 'dirty-field', meaning: 'dirty-field' },
          { value: 'selected', meaning: 'selected' },
          { value: 'all', meaning: 'all' },
          { value: 'normal', meaning: 'normal' },
          { value: 'dirty-self', meaning: 'dirty-self' },
          { value: 'dirty-field-self', meaning: 'dirty-field-self' },
          { value: 'selected-self', meaning: 'selected-self' },
          { value: 'all-self', meaning: 'all-self' },
          { value: 'normal-self', meaning: 'normal-self' },
        ],
      }),
    [],
```

## API

更多属性请参考DataSet。



================================================================================
文件: DatePicker.md
路径: doc\DatePicker.md
================================================================================

# DatePicker 日期选择框

输入或选择日期的控件。

## 何时使用

当用户需要输入一个日期，可以点击标准输入框，弹出日期面板进行选择。

## 代码演示

## 基本使用

日期选择器。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import {
  DatePicker,
  MonthPicker,
  DateTimePicker,
  YearPicker,
  TimePicker,
  WeekPicker,
  Row,
  Col,
} from 'choerodon-ui/pro';

function handleChange(value, oldValue) {
  console.log(
    '[datepicker]',
    value && value.format(),
    '[oldValue]',
    oldValue && oldValue.format(),
  );
}

ReactDOM.render(
  <Row gutter={10}>
    <Col style={{ marginBottom: 10 }} span={12}>
      <DatePicker placeholder="Select date" onChange={handleChange} />
    </Col>
    <Col style={{ marginBottom: 10 }} span={12}>
      <MonthPicker placeholder="Select month" onChange={handleChange} />
    </Col>
    <Col style={{ marginBottom: 10 }} span={12}>
      <YearPicker placeholder="Select year" onChange={handleChange} />
    </Col>
    <Col style={{ marginBottom: 10 }} span={12}>
```

## 受控日期控件

最简单的用法。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DatePicker } from 'choerodon-ui/pro';

class App extends React.Component {
  state = {};

  handleChange = moment => {
    console.log('[controlled]', moment && moment.format());
    this.setState({
      moment,
    });
  };

  render() {
    return (
      <DatePicker value={this.state.moment} placeholder="controlled" onChange={this.handleChange} />
    );
  }
}

ReactDOM.render(<App />, document.getElementById('container'));
```

## 数据源

绑定数据源。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, DatePicker, DateTimePicker, Row, Col } from 'choerodon-ui/pro';

function handleDataSetChange({ value, oldValue }) {
  console.log(
    '[dataset newValue]',
    value && value.format(),
    '[oldValue]',
    oldValue && oldValue.format(),
  );
}

const data = [
  {
    birth: '1984-11-22',
    creationTime: '2017-12-22 15:00:00',
  },
];

class App extends React.Component {
  ds = new DataSet({
    data,
    fields: [{ name: 'birth', type: 'date' }, { name: 'creationTime', type: 'dateTime' }],
    events: {
      update: handleDataSetChange,
    },
  });
```

## 最大最小值

指定最大最小值。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Divider } from 'choerodon-ui';
import {
  DataSet,
  DatePicker,
  MonthPicker,
  YearPicker,
  DateTimePicker,
  Row,
  Col,
} from 'choerodon-ui/pro';
import moment from 'moment';

function filterDate(currentDate, selected, mode) {
  // currentDate 配合 mode，限制只能选择每周二
  // 选择面板的mode会变化，需要根据mode变化设置是否过滤
  // currentDate 为日期时间面板中的每个时间，会循环执行 filter，selected 为选中或者当前 hover 的时间。
  if (mode !== 'date') {
    // 设置日期之外的层级都可以点击，如月、年
    return true;
  }
  const dayInWeek = currentDate.get('d');
  return dayInWeek === 2;
}

function filterTime(currentDate, selected, mode) {
  if (mode === 'time') {
    // currentDate 配合 mode
    // 限制只能选择每天的8点以后
    return currentDate.get('hour') >= 8;
  }
  return true;
}

function filterRangeDate(currentDate, selected, mode, rangeTarget, rangeValue) {
  // range模式过滤
  // 限制：开始日期小于等于结束日期，结束日期大于等于开始日期
  if (!currentDate) return true;
  const [startValue, endValue] = Array.isArray(rangeValue) ? rangeValue : [];
  if (rangeTarget === 0 && endValue) {
```

## 单元格渲染器

单元格渲染器，可以自定义单元格的内容和样式。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DatePicker } from 'choerodon-ui/pro';

function dayRenderer(props, text, currentDate) {
  const dayInWeek = currentDate.get('d');
  if (dayInWeek === 0 || dayInWeek === 1) {
    props.style = { color: 'red' };
  }
  return <td {...props} />;
}

function cellRenderer(view) {
  if (view === 'date') {
    return dayRenderer;
  }
}

ReactDOM.render(
  <DatePicker placeholder="Select date" cellRenderer={cellRenderer} />,
  document.getElementById('container')
);
```

## 多值

通过属性multiple设置为多值。

- 1984-11-22
- 2019-08-09

- 2025-07-25

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, DatePicker, Row, Col } from 'choerodon-ui/pro';

function handleChange(value, oldValue) {
  console.log('[multiple]', value, '[oldValue]', oldValue);
}

function handleDataSetChange({ record, name, value, oldValue }) {
  console.log(
    '[dataset multiple]',
    value,
    '[oldValue]',
    oldValue,
    `[record.get('${name}')]`,
    record.get(name),
  );
}

class App extends React.Component {
  ds = new DataSet({
    autoCreate: true,
    fields: [
      {
        name: 'date',
        type: 'date',
        defaultValue: '1984-11-22,2019-08-09',
        required: true,
        multiple: ',',
```

## 范围


```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import {
  DataSet,
  DatePicker,
  DateTimePicker,
  TimePicker,
  Row,
  Col,
} from 'choerodon-ui/pro';
import { Divider } from 'choerodon-ui';
import moment from 'moment';

function handleDataSetChange({ value, oldValue }) {
  console.log('[range dataset newValue]', value, '[oldValue]', oldValue);
}

function handleChange(value, oldValue) {
  console.log('[range newValue]', value, '[oldValue]', oldValue);
}

function rangeValidator(value, name) {
  console.log(`[validation ${name} value]`, value);
  return true;
}

class App extends React.Component {
  ds = new DataSet({
    autoCreate: true,
    fields: [
      {
        name: 'date',
        type: 'date',
        range: ['start', 'end'],
        defaultValue: { start: '1984-11-22', end: new Date() },
        required: true,
        validator: rangeValidator,
      },
      {
        name: 'date2',
        type: 'date',
        range: true,
        required: true,
        validator: rangeValidator,
      },
      {
```

## 时间格式

时间格式，使用 format 配置显示格式。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, TimePicker, Row, Col } from 'choerodon-ui/pro';

function handleDataSetChange({ value, oldValue }) {
  console.log('[range dataset newValue]', value, '[oldValue]', oldValue);
}

class App extends React.Component {
  ds = new DataSet({
    autoCreate: true,
    fields: [
      {
        name: 'time',
        type: 'time',
        format: 'hh:mm:ss A',
      },
      {
        name: 'time2',
        type: 'time',
        format: 'HH:mm',
      },
    ],
    events: {
      update: handleDataSetChange,
    },
  });

  render() {
```

## 时间步距

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, TimePicker } from 'choerodon-ui/pro';

function handleDataSetChange({ value, oldValue }) {
  console.log('[range dataset newValue]', value, '[oldValue]', oldValue);
}

class App extends React.Component {
  ds = new DataSet({
    autoCreate: true,
    fields: [
      {
        name: 'time',
        type: 'time',
        step: {
          minute: 15,
          second: 10,
        },
      },
    ],
    events: {
      update: handleDataSetChange,
    },
  });

  render() {
    return (
      <TimePicker
```

## 显示时区

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { configure } from 'choerodon-ui';
import { Form, TimePicker, DateTimePicker, SelectBox } from 'choerodon-ui/pro';
import moment from 'moment';

const { Option } = SelectBox;
const App = () => {
  const [value, setValue] = React.useState(() => moment());
  const [isGMT, setIsGMT] = React.useState(true);
  // const timeZone = React.useMemo(() => {}, [isGMT]);

  React.useEffect(() => {
    configure({
      formatter: {
        timeZone: isGMT
          ? ' ([GTM]+8)'
          : (moment) => (
              <span key="timeZone" style={{ color: 'gray' }}>
                {' '}
                {moment.format('Z')}
              </span>
            ),
      },
    });
  }, [isGMT]);
  return (
    <Form>
      <SelectBox value={isGMT} onChange={setIsGMT}>
        <Option value>GMT</Option>
        <Option value={false}>UTC</Option>
      </SelectBox>
      <DateTimePicker value={value} onChange={setValue} />
      <TimePicker value={value} onChange={setValue} timeZone="ZZ" />
    </Form>
  );
};
```

## 确定按钮

配置日期时间组件确定按钮。

#### 默认无确定按钮：

#### 配置确定按钮：

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { ConfigProvider, configure } from 'choerodon-ui';
import { DataSet, DatePicker, Row, Col } from 'choerodon-ui/pro';

// 使用 configure 全局配置或者 ConfigProvider 局部配置开启日期时间组件的确定按钮
// configure({
//   dateTimePickerOkButton: true,
// });

function handleDataSetChange({ value, oldValue }) {
  console.log(
    '[dataset newValue]',
    value && value.format(),
    '[oldValue]',
    oldValue && oldValue.format(),
  );
}

class App extends React.Component {
  ds = new DataSet({
    fields: [
      { name: 'birth', type: 'dateTime' },
      { name: 'creationTime', type: 'dateTime' },
    ],
    events: {
      update: handleDataSetChange,
    },
  });
```

## API

### DatePicker

| 属性名 | 说明 | 类型/默认值/版本 |
| --- | --- | --- |
| mode | 显示模式,可选值: date \| dateTime \| time \| year \| month \| week | 类型string默认值date |
| min | 最小日期 | 类型MomentInput |
| max | 最大日期 | 类型MomentInput |
| format | 日期格式，如 YYYY-MM-DD HH:mm:ss | 类型string |
| timeZone | 时区显示 | 类型string (moment) => string版本1.4.2 |
| step | 时间步距 | 类型{ hour: number, minute: second: number |
| filter | 日期过滤, 选择面板的 mode 会变化, 需要根据 mode 变化设置是否过滤。currentDate 为日期时间面板中的每个时间，会循环执行 filter，selected 为选中或者当前 hover 的时间。当在 range 模式中时（1.6.3 支持），rangeTarget 为 0 代表在 start，1 代表在 end，rangeValue 为值数组 | 类型(currentDate, selected, mode, rangeTarget, rangeValue) => boolean |
| cellRenderer | 单元格渲染, view 可选值：date \| dateTime \| time \| week \| month \| year \| decade | 类型(view) => (props, text, currentDate, selected) ReactNode |
| renderExtraFooter | 在面板中添加额外的页脚 | 类型() => React.ReactNode |
| extraFooterPlacement | 额外的页脚的位置 可选值: top bottom | 类型string默认值bottom |
| editorInPopup | 编辑器在下拉框中 | 类型boolean版本1.4.5 |
| defaultTime | 设置用户选择日期时默认的时分秒，仅应用于 dateTime mode，DateTimePicker 组件 | 类型moment [moment, moment]版本1.4.5 |
| useInvalidDate | 允许使用非法日期, 但校验依旧无法通过 | 类型boolean默认值true版本1.5.4 |
| comboRangeMode | 设置在range模式时，选择弹窗是否组合显示（time和dateTime模式不支持） | 类型boolean版本1.6.5 |
| inputReadOnly | 设置输入框为只读（避免在移动设备上打开虚拟键盘） | 类型boolean默认值false版本1.6.6 |

更多属性请参考TriggerField。



================================================================================
文件: Divider.md
路径: doc\Divider.md
================================================================================

# Divider 分割线

区隔内容的分割线。

## 何时使用

- 对不同章节的文本段落进行分割。
- 对行内文字/链接进行分割，例如表格的操作列。

## 代码演示

## 水平分割线

默认为水平分割线，可在中间加入文字。

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed nonne merninisti licere mihi ista probare, quae sunt a te dicta? Refert tamen, quo modo.

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed nonne merninisti licere mihi ista probare, quae sunt a te dicta? Refert tamen, quo modo.

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed nonne merninisti licere mihi ista probare, quae sunt a te dicta? Refert tamen, quo modo.

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed nonne merninisti licere mihi ista probare, quae sunt a te dicta? Refert tamen, quo modo.

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed nonne merninisti licere mihi ista probare, quae sunt a te dicta? Refert tamen, quo modo.

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed nonne merninisti licere mihi ista probare, quae sunt a te dicta? Refert tamen, quo modo.

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Divider } from 'choerodon-ui';

ReactDOM.render(
  <div>
    <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed nonne merninisti licere mihi ista probare, quae sunt a te dicta? Refert tamen, quo modo.</p>
    <Divider />
    <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed nonne merninisti licere mihi ista probare, quae sunt a te dicta? Refert tamen, quo modo.</p>
    <Divider>With Text</Divider>
    <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed nonne merninisti licere mihi ista probare, quae sunt a te dicta? Refert tamen, quo modo.</p>
    <Divider dashed />
    <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed nonne merninisti licere mihi ista probare, quae sunt a te dicta? Refert tamen, quo modo.</p>
    <Divider orientation="left">With Text</Divider>
    <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed nonne merninisti licere mihi ista probare, quae sunt a te dicta? Refert tamen, quo modo.</p>
    <Divider orientation="right">With Text</Divider>
    <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed nonne merninisti licere mihi ista probare, quae sunt a te dicta? Refert tamen, quo modo.</p>
  </div>,
  document.getElementById('container'));
```

## 垂直分割线

使用type="vertical"设置为行内的垂直分割线。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Divider } from 'choerodon-ui';

ReactDOM.render(
  <div>
    Text
    <Divider type="vertical" />
    <a href="#">Link</a>
    <Divider type="vertical" />
    <a href="#">Link</a>
  </div>,
  document.getElementById('container'));
```

## API

| 属性名 | 说明 | 类型/默认值 |
| --- | --- | --- |
| dashed | 是否虚线 | 类型Boolean默认值false |
| type | 水平还是垂直类型 | 类型enum:horizontalvertical默认值horizontal |
| orientation | 分割线标题的位置 | 类型enum:leftright默认值center |
| style | 分割线样式对象 | 类型object默认值- |
| type | 水平还是垂直类型 | 类型enum:horizontalvertical默认值horizontal |



================================================================================
文件: Dropdown.md
路径: doc\Dropdown.md
================================================================================

# Dropdown 下拉菜单

向下弹出的列表。

## 何时使用

当页面上的操作命令过多时，用此组件可以收纳操作元素。点击或移入触点，会出现一个下拉菜单。可在列表中进行选择，并执行相应的命令。

## 代码演示

## 基本

最简单的下拉菜单。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Menu, Dropdown, Icon, Button } from 'choerodon-ui/pro';

const menu = (
  <Menu>
    <Menu.Item>
      <a target="_blank" rel="noopener noreferrer" href="https://choerodon.io">1st menu item</a>
    </Menu.Item>
    <Menu.Item>
      <a target="_blank" rel="noopener noreferrer" href="https://choerodon.io">2nd menu item</a>
    </Menu.Item>
    <Menu.Item>
      <a target="_blank" rel="noopener noreferrer" href="https://choerodon.io">3rd menu item</a>
    </Menu.Item>
  </Menu>
);

ReactDOM.render(
  <div>
    <Dropdown overlay={menu}>
      <Button>
        Click me <Icon type="arrow_drop_down" />
      </Button>
    </Dropdown>
  </div>,
  document.getElementById('container'));
```

## 弹出位置

支持 6 个弹出位置。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Menu, Dropdown, Button } from 'choerodon-ui/pro';

const menu = (
  <Menu>
    <Menu.Item>
      <a target="_blank" rel="noopener noreferrer" href="https://choerodon.io">
        1st menu item
      </a>
    </Menu.Item>
    <Menu.Item>
      <a target="_blank" rel="noopener noreferrer" href="https://choerodon.io">
        2nd menu item
      </a>
    </Menu.Item>
    <Menu.Item>
      <a target="_blank" rel="noopener noreferrer" href="https://choerodon.io">
        3rd menu item
      </a>
    </Menu.Item>
  </Menu>
);

ReactDOM.render(
  <div>
    <Dropdown overlay={menu} placement="bottomLeft">
      <Button>bottomLeft</Button>
```

## 其他元素

分割线和不可用菜单项。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Menu, Dropdown, Icon, Button } from 'choerodon-ui/pro';

const menu = (
  <Menu>
    <Menu.Item key="0">
      <a target="_blank" rel="noopener noreferrer" href="https://choerodon.io">1st menu item</a>
    </Menu.Item>
    <Menu.Item key="1">
      <a target="_blank" rel="noopener noreferrer" href="https://choerodon.io">2nd menu item</a>
    </Menu.Item>
    <Menu.Divider />
    <Menu.Item key="3" disabled>3rd menu item（disabled）</Menu.Item>
  </Menu>
);

ReactDOM.render(
  <Dropdown overlay={menu}>
    <Button>
      Click me <Icon type="arrow_drop_down" />
    </Button>
  </Dropdown>,
  document.getElementById('container'));
```

## 触发方式

默认是点击触发菜单，可以移入触发。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Menu, Dropdown, Icon, Button } from 'choerodon-ui/pro';

const menu = (
  <Menu>
    <Menu.Item key="0">
      <a href="https://choerodon.io">1st menu item</a>
    </Menu.Item>
    <Menu.Item key="1">
      <a href="https://choerodon.io">2nd menu item</a>
    </Menu.Item>
    <Menu.Divider key="d" />
    <Menu.Item key="2">3rd menu item</Menu.Item>
  </Menu>
);

ReactDOM.render(
  <div>
    <Dropdown overlay={menu} trigger={['hover']}>
      <Button>
        Hover me <Icon type="arrow_drop_down" />
      </Button>
    </Dropdown>
  </div>,
  document.getElementById('container'));
```

## 触发事件

点击菜单项后会触发事件，用户可以通过相应的菜单项 key 进行不同的操作。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Menu, Dropdown, Icon, message, Button } from 'choerodon-ui/pro';
const onClick = function ({ key }) {
  message.info(`Click on item ${key}`);
};

const menu = (
  <Menu onClick={onClick}>
    <Menu.Item key="1">1st menu item</Menu.Item>
    <Menu.Item key="2">2nd memu item</Menu.Item>
    <Menu.Item key="3">3rd menu item</Menu.Item>
  </Menu>
);

ReactDOM.render(
  <Dropdown overlay={menu}>
    <Button>
      Click me, Click menu item <Icon type="arrow_drop_down" />
    </Button>
  </Dropdown>,
  document.getElementById('container'));
```

## 多级菜单

传入的菜单里有多个层级。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Menu, Dropdown, Icon, Button } from 'choerodon-ui/pro';
const SubMenu = Menu.SubMenu;

const menu = (
  <Menu mode="vertical">
    <Menu.Item>1st menu item</Menu.Item>
    <Menu.Item>2nd menu item</Menu.Item>
    <SubMenu title="sub menu">
      <Menu.Item>3rd menu item</Menu.Item>
      <Menu.Item>4th menu item</Menu.Item>
    </SubMenu>
    <SubMenu title="disabled sub menu" disabled>
      <Menu.Item>5d menu item</Menu.Item>
      <Menu.Item>6th menu item</Menu.Item>
    </SubMenu>
  </Menu>
);

ReactDOM.render(
  <Dropdown overlay={menu}>
    <Button>
      Cascading menu <Icon type="arrow_drop_down" />
    </Button>
  </Dropdown>,
  document.getElementById('container'));
```

## 菜单隐藏方式

默认是点击关闭菜单，可以关闭此功能。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Menu, Dropdown, Icon, Button } from 'choerodon-ui/pro';

class OverlayVisible extends React.Component {
  state = {
    hidden: true,
    disabled: true,
  };

  handleMenuClick = (e) => {
    if (e.key === '3') {
      this.setState({ hidden: true });
    }
    if (e.key === '1') {
      this.setState({ disabled: false });
    }
  }

  handleToggleDropdown = () => {
    this.setState({ hidden: !this.state.hidden });
  }

  render() {
    const menu = (
      <Menu onClick={this.handleMenuClick}>
        <Menu.Item key="1">Clicking me will not close the menu.</Menu.Item>
        <Menu.Item key="2" disabled={this.state.disabled}>Clicking me will not close the menu also.</Menu.Item>
```

## 右键菜单

默认是移入触发菜单，可以点击触发。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Menu, Dropdown } from 'choerodon-ui/pro';

const menu = (
  <Menu>
    <Menu.Item key="1">1st menu item</Menu.Item>
    <Menu.Item key="2">2nd menu item</Menu.Item>
    <Menu.Item key="3">3rd menu item</Menu.Item>
  </Menu>
);

ReactDOM.render(
  <Dropdown overlay={menu} trigger={['contextMenu']}>
    <span style={{ userSelect: 'none' }}>Right Click on Me</span>
  </Dropdown>,
  document.getElementById('container'));
```

## 带下拉框的按钮

左边是按钮，右边是额外的相关功能菜单。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Menu, Dropdown, Icon, message } from 'choerodon-ui/pro';

function handleButtonClick(e) {
  message.info('Click on left button.');
  console.log('click left button', e);
}

function handleMenuClick(e) {
  message.info('Click on menu item.');
  console.log('click', e);
}

const menu = (
  <Menu onClick={handleMenuClick}>
    <Menu.Item key="1">1st menu item</Menu.Item>
    <Menu.Item key="2">2nd menu item</Menu.Item>
    <Menu.Item key="3">3rd item</Menu.Item>
  </Menu>
);

ReactDOM.render(
  <div>
    <Dropdown.Button
      onClick={handleButtonClick}
      overlay={menu}
      size="large"
```

## API

| 属性名 | 说明 | 类型/默认值 |
| --- | --- | --- |
| disabled | 菜单是否禁用 | 类型boolean |
| getPopupContainer | 菜单渲染父节点。默认渲染到 body 上，如果你遇到菜单滚动定位问题，试试修改为滚动的区域，并相对其定位。示例 | 类型Function(triggerNode)默认值() => document.body |
| overlay | 菜单。建议使用函数返回菜单，可提高性能 | 类型Menu\| () =>Menu |
| placement | 菜单弹出位置：bottomLeft \| bottomCenter \| bottomRight \| topLeft \| topCenter \| topRight | 类型String默认值bottomLeft |
| trigger | 触发下拉的行为 | 类型Array<click hover contextMenu>默认值['click', 'focus'] |
| hidden | 菜单是否隐藏 | 类型boolean |
| onHiddenBeforeChange | 菜单显示状态改变前调用，参数为 hidden， 返回值为false将阻止改变 | 类型(hidden) => boolean默认值无 |
| onHiddenChange | 菜单显示状态改变时调用，参数为 hidden | 类型Function(hidden) |
| onOverlayClick | 点击菜单时调用，参数为 event | 类型Function(event) |

overlay菜单使用Menu，还包括菜单项Menu.Item，分割线Menu.Divider。

注意： Menu.Item 必须设置唯一的 key 属性。

Dropdown 下的 Menu 默认不可选中。如果需要菜单可选中，可以指定<Menu selectable>.

### Dropdown.Button

| 属性名 | 说明 | 类型/默认值/版本 |
| --- | --- | --- |
| buttonProps | 按钮属性，和Button一致 | 类型string版本1.5.4 |
| type | 按钮类型，和Button一致 | 类型string默认值button版本1.5.4 |
| icon | 自定义下拉菜单图标 | 类型ReactNode版本1.5.4 |
| onClick | 点击左侧按钮的回调，和Button一致 | 类型Function版本1.5.4 |
| size | 整体大小，和Button一致 | 类型string默认值default版本1.5.4 |
| funcType | 按钮展现模式，和Button一致 | 类型string默认值raised版本1.5.4 |

更多属性请参考Dropdown和Button



================================================================================
文件: EmailField.md
路径: doc\EmailField.md
================================================================================

# EmailField 电子邮件输入框

电子邮件输入框。

## 何时使用

当用户需要输入电子邮件时。

## 代码演示

## 基本使用

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { EmailField, Row, Col } from 'choerodon-ui/pro';

function log(value) {
  console.log('[basic]', value);
}

ReactDOM.render(
  <Row gutter={10}>
    <Col span={8}>
      <EmailField placeholder="请输入" onChange={log} />
    </Col>
    <Col span={8}>
      <EmailField placeholder="清除按钮" defaultValue="点击清除" clearButton onChange={log} />
    </Col>
    <Col span={8}>
      <EmailField value="不可用" disabled />
    </Col>
  </Row>,
  document.getElementById('container')
);
```

## 受控输入框

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { EmailField } from 'choerodon-ui/pro';

class App extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      value: 'abc@123.com',
    };
  }

  handleChange = (value, oldValue) => {
    console.log('[newValue]', value, '[oldValue]', oldValue);
    this.setState({
      value,
    });
  }

  handleInput = (e) => {
    console.log('[input]', e.target.value);
  }

  render() {
    return <EmailField value={this.state.value} onChange={this.handleChange} onInput={this.handleInput} />;
  }
}
```

## 数据源

绑定数据源。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, EmailField } from 'choerodon-ui/pro';

function handleDataSetChange({ record, name, value, oldValue }) {
  console.log('[dataset newValue]', value, '[oldValue]', oldValue, `[record.get('${name}')]`, record.get(name));
}

class App extends React.Component {
  ds = new DataSet({
    autoCreate: true,
    fields: [
      { name: 'email', type: 'email', defaultValue: '123@abc.com', required: true },
    ],
    events: {
      update: handleDataSetChange,
    },
  });

  render() {
    return <EmailField dataSet={this.ds} name="email" />;
  }
}

ReactDOM.render(
  <App />,
  document.getElementById('container')
);
```

## API

内置邮件格式校验的输入框。

更多属性请参考TextField。



================================================================================
文件: Form.md
路径: doc\Form.md
================================================================================

# Form 表单

- 默认开启校验失败自定定位
- 默认表格布局模式，使用方便；也支持栅格布局
- 支持组合输入框展示
- 可控校验提示方式、label 展示方式及超出 tooltip 处理

## 何时使用

## 代码演示

## 基本使用

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import {
  Form,
  TextField,
  Password,
  NumberField,
  EmailField,
  UrlField,
  DatePicker,
  Select,
  SelectBox,
  Button,
  Menu,
  Dropdown,
  Icon,
} from 'choerodon-ui/pro';

const { Option } = Select;

function passwordValidator(value, name, form) {
  if (value !== form.getField('password').getValue()) {
    return '您两次输入的密码不一致，请重新输入';
  }
  return true;
}

function validationRenderer(error, props) {
  if (error.ruleName === 'valueMissing' && props.name === 'password') {
    return (
      <span style={{ color: 'blue' }}>{error.validationMessage}(自定义)</span>
    );
  }
}

const menu = (
  <Menu>
    <Menu.Item>
      <a target="_blank" rel="noopener noreferrer" href="https://choerodon.io/">
        1st menu item
      </a>
    </Menu.Item>
    <Menu.Item>
      <a
        target="_blank"
        rel="noopener noreferrer"
        href="https://choerodon.com.cn/"
      >
        2nd menu item
      </a>
    </Menu.Item>
    <Menu.Item>
      <a
```

## 数据源

表单绑定数据源。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import {
  DataSet,
  Form,
  TextField,
  NumberField,
  Password,
  EmailField,
  UrlField,
  DatePicker,
  Select,
  SelectBox,
  Switch,
  Lov,
  Button,
} from 'choerodon-ui/pro';

const { Option } = Select;

function passwordValidator(value, name, record) {
  if (value !== record.get('password')) {
    return '您两次输入的密码不一致，请重新输入';
  }
  return true;
}

const defaultValidationMessages = {
  valueMissing: '请输入{label}。（自定义）',
};

class App extends React.Component {
  ds = new DataSet({
    autoCreate: true,
    fields: [
      {
        name: 'phone',
        type: 'string',
        label: '手机号',
        labelWidth: 150,
        required: true,
        pattern: '^1[3-9]\\d{9}$',
      },
      {
        name: 'password',
        type: 'string',
        label: '密码',
        required: true,
        defaultValidationMessages,
      },
      {
        name: 'confirmPassword',
        type: 'string',
        label: '确认密码',
        required: true,
        validator: passwordValidator,
      },
      {
        name: 'age',
        type: 'number',
```

## 数据源记录

表单绑定数据源某条记录。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, Form, TextField, NumberField, Password, EmailField, UrlField, DatePicker, Select, SelectBox, Lov, Button } from 'choerodon-ui/pro';

const { Option } = Select;

function passwordValidator(value, name, record) {
  if (value !== record.get('password')) {
    return '您两次输入的密码不一致，请重新输入';
  }
  return true;
}

class App extends React.Component {
  ds = new DataSet({
    autoCreate: true,
    fields: [
      { name: 'phone', type: 'string', label: '手机号', required: true },
      { name: 'password', type: 'string', label: '密码', required: true },
      { name: 'confirmPassword', type: 'string', label: '确认密码', required: true, validator: passwordValidator },
      { name: 'age', type: 'number', label: '年龄', required: true, help: '我们需要确定你的年龄' },
      { name: 'sex', type: 'string', label: '性别', required: true },
      { name: 'language', type: 'string', label: '语言', required: true, help: '超过两行的帮助信息超过两行的帮助信息超过两行的帮助信息' },
      { name: 'email', type: 'email', label: '邮箱', required: true },
      { name: 'homepage', type: 'url', label: '个人主页', required: true },
      { name: 'birth', type: 'date', label: '生日', required: true },
      { name: 'code', type: 'object', label: '代码描述', lovCode: 'LOV_CODE' },
    ],
  });

  render() {
    return (
      <Form record={this.ds.current} style={{ width: '4rem' }}>
        <TextField pattern="1[3-9]\d{9}" name="phone" />
        <Password name="password" />
        <Password name="confirmPassword" />
        <NumberField name="age" min={18} step={1} addonAfter="周岁" showHelp="tooltip" />
        <SelectBox name="sex">
          <Option value="M">男</Option>
          <Option value="F">女</Option>
        </SelectBox>
        <Select name="language">
          <Option value="zh-cn">简体中文</Option>
          <Option value="en-us">英语(美国)</Option>
          <Option value="ja-jp">日本語</Option>
        </Select>
        <EmailField name="email" />
        <UrlField name="homepage" />
        <DatePicker name="birth" />
        <Lov name="code" />
        <div>
          <Button type="submit">注册</Button>
          <Button type="reset" style={{ marginLeft: 8 }}>重置</Button>
        </div>
      </Form>
```

## 标签布局

不同标签布局展示。

```javascript
import ReactDOM from 'react-dom';
import React from 'react';
import {
  Form,
  TextField,
  Password,
  NumberField,
  EmailField,
  UrlField,
  DatePicker,
  Switch,
  CheckBox,
  Select,
  SelectBox,
  TextArea,
  CodeArea,
  Range,
  Icon,
  Button,
  Output,
} from 'choerodon-ui/pro';

const { Option } = Select;

function passwordValidator(value, name, form) {
  if (value !== form.getField('password').getValue()) {
    return '您两次输入的密码不一致，请重新输入';
  }
  return true;
}

const fixedLabelWidth = '60,70,90';

const App = () => {
  const [labelLayout, setLabelLayout] = React.useState('horizontal');
  const [labelWidth, setLabelWidth] = React.useState(fixedLabelWidth);
  const [labelAlign, setLabelAlign] = React.useState('right');
  const [useColon, setUseColon] = React.useState(true);
  const [showHelp, setShowHelp] = React.useState('label');
  const [
    separateSpacingHorizontal,
    setSeparateSpacingHorizontal,
  ] = React.useState(0);
  const [separateSpacingVertical, setSeparateSpacingVertical] = React.useState(
    0,
  );
  const [spacingType, setSpacingType] = React.useState('around');
  return (
    <>
      <Form
        columns={2}
        labelLayout="vertical"
        separateSpacing={{ width: 20, height: 20 }}
        spacingType="around"
      >
        <SelectBox
          label="labelLayout"
          value={labelLayout}
          onChange={setLabelLayout}
        >
```

## 浮动标签

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import {
  Form,
  CheckBox,
  TextField,
  Password,
  NumberField,
  EmailField,
  UrlField,
  DatePicker,
  Range,
  Select,
  SelectBox,
  Switch,
  TextArea,
  Button,
  Icon,
} from 'choerodon-ui/pro';

const { Option } = Select;

function passwordValidator(value, name, form) {
  if (value !== form.getField('password').getValue()) {
    return '您两次输入的密码不一致，请重新输入';
  }
  return true;
}

ReactDOM.render(
  <Form labelLayout="float" columns={3} header="Float Label">
    <TextField
      colSpan={3}
      label="手机号"
      pattern="1[3-9]\d{9}"
      name="phone"
      required
      placeholder="请输入手机号"
      addonBefore="+86"
      addonAfter="中国大陆"
    />
    <Password label="密码" name="password" required />
    <Password
      label="确认密码"
      name="confirmPassword"
      required
      validator={passwordValidator}
      help="请输入与左侧相同的密码"
      disabled
    />
    <NumberField
      rowSpan={2}
      label="年龄"
      name="age"
      min={18}
      step={1}
      required
    />
    <SelectBox label="性别" name="sex" required>
      <Option value="M">男</Option>
```

## 表单头

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Form, TextField, Password, NumberField, EmailField, UrlField, DatePicker, Select, SelectBox, Button } from 'choerodon-ui/pro';

const { Option } = Select;

function passwordValidator(value, name, form) {
  if (value !== form.getField('password').getValue()) {
    return '您两次输入的密码不一致，请重新输入';
  }
  return true;
}

ReactDOM.render(
  <Form header="Custom Header">
    <TextField label="手机号" pattern="1[3-9]\d{9}" name="phone" required clearButton />
    <Password label="密码" name="password" required />
    <Password label="确认密码" name="confirmPassword" required validator={passwordValidator} />
    <NumberField label="年龄" name="age" min={18} step={1} required />
    <SelectBox label="性别" name="sex" required>
      <Option value="M">男</Option>
      <Option value="F">女</Option>
    </SelectBox>
    <Select label="语言" name="language" required>
      <Option value="zh-cn">简体中文</Option>
      <Option value="en-us">英语(美国)</Option>
      <Option value="ja-jp">日本語</Option>
    </Select>
    <EmailField label="邮箱" name="email" required />
    <UrlField label="个人主页" name="homepage" required />
    <DatePicker label="生日" name="birth" required />
    <div>
      <Button type="submit">注册</Button>
      <Button type="reset" style={{ marginLeft: 8 }}>重置</Button>
    </div>
  </Form>,
  document.getElementById('container')
);
```

## 响应式

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import {
  Form,
  TextField,
  Password,
  NumberField,
  EmailField,
  UrlField,
  DatePicker,
  Select,
  SelectBox,
  Button,
} from 'choerodon-ui/pro';

const { Option } = Select;

ReactDOM.render(
  <Form
    columns={{ xs: 1, sm: 1, md: 2, lg: 3, xl: 4, xxl: 5 }}
    labelWidth={{ xs: 'auto', sm: 50, md: 50, lg: 100, xl: 100, xxl: 'auto' }}
    labelLayout={{ xs: 'vertical', sm: 'float', md: 'horizontal' }}
  >
    <TextField
      label="手机号"
      pattern="1[3-9]\d{9}"
      name="phone"
      required
      clearButton
      addonBefore="+86"
      addonAfter="中国大陆"
    />
    <Password label="密码" name="password" required />
    <Password
      label="确认密码"
```

## 禁用

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import {
  DataSet,
  Form,
  TextField,
  Password,
  NumberField,
  EmailField,
  UrlField,
  Lov,
  Switch,
  DatePicker,
  Select,
  SelectBox,
  Button,
  Menu,
  Dropdown,
  Icon,
} from 'choerodon-ui/pro';

const { Option } = Select;

function passwordValidator(value, name, form) {
  if (value !== form.getField('password').getValue()) {
    return '您两次输入的密码不一致，请重新输入';
  }
  return true;
}

const menu = (
  <Menu>
    <Menu.Item>
      <a target="_blank" rel="noopener noreferrer" href="https://choerodon.io/">
        1st menu item
      </a>
    </Menu.Item>
    <Menu.Item>
      <a
        target="_blank"
        rel="noopener noreferrer"
        href="https://choerodon.com.cn/"
      >
        2nd menu item
      </a>
    </Menu.Item>
    <Menu.Item>
      <a
        target="_blank"
        rel="noopener noreferrer"
        href="https://github.com/open-hand/choerodon-ui"
      >
        3rd menu item
      </a>
```

## 显示原始值

显示原始值。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import {
  DataSet,
  Form,
  TextField,
  NumberField,
  Password,
  EmailField,
  UrlField,
  DatePicker,
  Select,
  SelectBox,
  Switch,
  Lov,
  Button,
  Row,
  Col,
} from 'choerodon-ui/pro';

const { Option } = Select;

function passwordValidator(value, name, record) {
  if (value !== record.get('password')) {
    return '您两次输入的密码不一致，请重新输入';
  }
  return true;
}

class App extends React.Component {
  ds = new DataSet({
    data: [
      {
        phone: 1800000000,
        age: 18,
        sex: 'F',
        language: 'zh-cn',
        email: 'xxx@choerodon.io',
        homepage: 'https://choerodon.io',
        birth: '1984-11-22',
        code: 'HR.EMPLOYEE_GENDER',
        frozen: 'true',
      },
    ],
    fields: [
      {
        name: 'phone',
        type: 'string',
        label: '手机号',
        required: true,
        pattern: '^1[3-9]\\d{9}$',
      }, // /^1[3-9]\d{9}$/
      { name: 'password', type: 'string', label: '密码', required: true },
      {
        name: 'confirmPassword',
        type: 'string',
        label: '确认密码',
```

## Modal中使用浮动标签

Modal中使用浮动标签Form。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import {
  Form,
  CheckBox,
  TextField,
  Password,
  NumberField,
  EmailField,
  UrlField,
  DatePicker,
  Range,
  Select,
  SelectBox,
  Switch,
  TextArea,
  Button,
  Modal,
} from 'choerodon-ui/pro';

const { Option } = Select;

function passwordValidator(value, name, form) {
  if (value !== form.getField('password').getValue()) {
    return '您两次输入的密码不一致，请重新输入';
  }
  return true;
}
```

## 栅格布局

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import {
  DataSet,
  Form,
  TextField,
  NumberField,
  Password,
  EmailField,
  UrlField,
  DatePicker,
  Select,
  SelectBox,
  Switch,
  Lov,
  Button,
  Row,
  Col,
} from 'choerodon-ui/pro';
import { observer } from 'mobx-react';

const { Option } = Select;
const { FormVirtualGroup } = Form;

function passwordValidator(value, name, record) {
  if (value !== record.get('password')) {
    return '您两次输入的密码不一致，请重新输入';
  }
  return true;
}

@observer
class App extends React.Component {
  ds = new DataSet({
    autoCreate: true,
    fields: [
      { name: 'phone', type: 'string', label: '手机号', required: true },
      { name: 'password', type: 'string', label: '密码', required: true },
      {
        name: 'confirmPassword',
        type: 'string',
        label: '确认密码',
        required: true,
        validator: passwordValidator,
      },
      {
        name: 'age',
        type: 'number',
        label: '年龄',
        required: true,
        help: '我们需要确定你的年龄',
      },
      { name: 'sex', type: 'string', label: '性别', required: true },
      {
        name: 'language',
        type: 'string',
        label: '语言',
        required: true,
        help: '超过两行的帮助信息超过两行的帮助信息超过两行的帮助信息',
```

## 输入框组合

输入框的组合展现。

## 非Form下使用：

## Form下使用：

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import {
  DataSet,
  Form,
  TextField,
  NumberField,
  DatePicker,
  Select,
  Button,
  Row,
  Col,
} from 'choerodon-ui/pro';

const { Option } = Select;
const { ItemGroup } = Form;

class App extends React.Component {
  ds = new DataSet({
    autoCreate: true,
    fields: [
      {
        name: 'phonePrefix',
        type: 'string',
        label: '手机区号',
        required: true,
      },
      {
        name: 'phone',
        type: 'string',
        label: '手机号',
        labelWidth: 150,
        required: true,
        pattern: '^1[3-9]\\d{9}$',
      },
      {
        name: 'ageLevel',
        type: 'string',
        label: '年龄阶段',
        required: true,
      },
      {
        name: 'age',
        type: 'number',
        label: '年龄',
        required: true,
        min: 18,
        step: 1,
        help: '我们需要确定你的年龄',
      },
```

## API

| 属性名 | 说明 | 类型/默认值/版本 |
| --- | --- | --- |
| action | 表单提交请求地址，当设置了 dataSet 时，该属性无作用 | 类型string |
| method | 表单提交的 HTTP Method，可选值 GET \| POST | 类型string默认值POST |
| target | 表单提交的目标，当表单设置了设置 target 且没有 dataSet 时作浏览器默认提交，否则作 Ajax 提交 | 类型string |
| layout | 布局, 可选值： table \| none | 类型string默认值table版本1.4.0 |
| processParams | Ajax 提交时的参数回调 | 类型(event) => object |
| useColon | 是否使用冒号当开启时会在所有的label后面加上冒号, 在没有label时不显示。 | 类型boolean默认值false |
| requiredMarkAlign | 控制必输星号位置 | 类型left right默认值left版本1.6.3 |
| labelWidth | 内部控件的标签宽度。如果为数组则分别对应每列的标签宽度。数组长度不够列数，以默认值补全, 响应式参考Responsive, 如果为auto，则根据内部label最大长度来对齐所有label。设置 minWidth 或 maxWidth 时，table 布局样式为 auto | 类型number\| 'auto' ('auto' number)[] ({ minWidth?: number; maxWidth?: number }) object默认值全局配置labelWidth |
| labelAlign | 标签文字对齐方式，只在 labelLayout 为 horizontal 时起作用，可选值：left \| center \| right，响应式参考Responsive | 类型string object默认值right |
| labelLayout | 标签位置，可选值 horizontal \| vertical \| placeholder \| float \| none，响应式参考Responsive | 类型string object默认值horizontal |
| labelTooltip | 用 Tooltip 显示标签内容。可选值 'none'\|'always'\|'overflow' | 类型string默认值'none' |
| dataIndex | 对照 record 在 DataSet 中的 index | 类型number默认值ds.currentIndex |
| record | 对照 record，优先级高于 dataSet 和 dataIndex | 类型Record |
| columns | 列数，响应式参考Responsive | 类型number object默认值1 |
| pristine | 显示原始值 | 类型boolean默认值false |
| onSubmit | 提交回调 | 类型Function |
| onReset | 重置回调 | 类型Function |
| onSuccess | 提交成功回调 | 类型Function |
| onError | 提交失败回调 | 类型Function |
| separateSpacing | 切分单元格间隔，当label布局为默认值 horizontal 时候使用 padding 修改单元格横向间距可能需要结合 labelWidth 效果会更好 | 类型number [number, number {width:number,height:number} |
| spacingType | 间隔类型， 可选值 between\| around\| evenly | 类型SpacingType [SpacingType, SpacingType] {width:SpacingType,height:SpacingType}默认值between版本1.5.2 |
| fieldHighlightRenderer | 高亮渲染器 | 类型({ title, content, dataSet, record, name, className, style }, element) => ReactNode |
| showValidation | 校验信息提示方式 | 类型tooltip newLine版本1.4.4 |
| autoValidationLocate | 校验失败自动定位。如果多个组件的定位有冲突， 可以关闭自动定位， 通过手动调用 focus 方法来定位 | 类型boolean默认值true版本1.5.3 |
| labelWordBreak | 设置标签是否换行显示 (仅支持 labelWidth 为固定宽度) | 类型boolean版本1.6.5 |

更多属性请参考DataSetComponent。

### Form Layout

#### Form 子元素属性

| 属性名 | 说明 | 类型/默认值/版本 |
| --- | --- | --- |
| rowSpan | 表单下控件跨越的行数 | 类型number默认值1 |
| colSpan | 表单下控件跨越的列数 | 类型number默认值1 |
| newLine | 另起新行 | 类型boolean |
| label | 标签 | 类型string ReactNode |
| name | 字段名。可获取 DataSet 的字段属性，如 label，require 等，一般用于控件外需要嵌套其他元素时使用。 | 类型string |
| labelWidth | 标签宽度。同列控件中标签宽度取最大设定值。子元素的 labelWidth 无法响应式。 | 类型number版本1.1.0 |
| useColon | 是否使用冒号当开启时会在所有的label后面加上冒号, 在没有label时不显示。 | 类型boolean默认值false |
| requiredMarkAlign | 控制必输星号位置 | 类型left right默认值left版本1.6.3 |
| hidden | 是否隐藏字段（依然会校验字段） | 类型boolean版本1.4.4 |
| labelWordBreak | 设置标签是否换行显示 (仅支持 labelWidth 为固定宽度) | 类型boolean版本1.6.5 |

#### Form.Item

| 属性名 | 说明 | 类型/版本 |
| --- | --- | --- |
| label | 标签 | 类型string ReactNode版本1.4.2 |
| name | 字段名。可获取 DataSet 的字段属性，如 label，require 等，一般用于控件外需要嵌套其他元素时使用。 | 类型string版本1.4.2 |
| labelWidth | 标签宽度。同列控件中标签宽度取最大设定值。子元素的 labelWidth 无法响应式。 | 类型number版本1.4.2 |
| labelTooltip | 用 Tooltip 显示标签内容。可选值 'none'\|'always'\|'overflow' | 类型string版本'none' |
| useColon | 是否使用冒号当开启时会在所有的label后面加上冒号, 在没有label时不显示。 | 类型boolean版本false |
| requiredMarkAlign | 控制必输星号位置 | 类型left right版本left |
| hidden | 是否隐藏字段（依然会校验字段） | 类型boolean |
| labelWordBreak | 设置标签是否换行显示 (仅支持 labelWidth 为固定宽度) | 类型boolean |

#### Form.ItemGroup

1.5.3 新增组件。

| 属性名 | 说明 | 类型/默认值 |
| --- | --- | --- |
| className | 自定义类名 | 类型string |
| style | 自定义样式 | 类型React.CSSProperties |
| label | 标签 | 类型string ReactNode |
| labelWidth | 标签宽度。同列控件中标签宽度取最大设定值。 | 类型number |
| labelTooltip | 用 Tooltip 显示标签内容。可选值 none \| always \| overflow | 类型string |
| help | 帮助信息(显示在label旁) | 类型string |
| required | 是否显示必填样式(不做校验) | 类型boolean |
| useColon | 是否使用冒号, 当开启时会在所有的 label 后面加上冒号, 并且必填的 * 号会被移到最前方, 无 label 时不显示。未设置时沿用Form的useColon属性 | 类型boolean |
| compact | 是否用紧凑模式 | 类型boolean |
| hidden | 是否隐藏字段（依然会校验字段） | 类型boolean |
| rowSpan | 表单下控件跨越的行数 | 类型number默认值1 |
| colSpan | 表单下控件跨越的列数 | 类型number默认值1 |
| newLine | 另起新行 | 类型boolean |
| labelWordBreak | 设置标签是否换行显示 (仅支持 labelWidth 为固定宽度) | 类型boolean |

### Form.FormVirtualGroup

当需要对 Form 的一些表单控件进行分组控制的时候可以使用，例如统一控制某些表单控件的显隐，此外，使用FormVirtualGroup可以统一对表单控件进行属性注入，例如统一的className等.注意，FormVirtualGroup组件本身不会产生实际的dom结果，其结果与去掉FormVirtualGroup然后将显隐控制等逐一写入表单控件中的写法完全一致，

### Form Responsive

响应式可设置参数 columns | labelWidth | labelAlign | labelLayout 为一个键值对。

键值可参考Responsive BreakPoints。



================================================================================
文件: FormField.md
路径: doc\FormField.md
================================================================================

# FormField 抽象表单控件

表单控件的抽象基类。

## API

### FormField

| 属性名 | 说明 | 类型/默认值/版本 |
| --- | --- | --- |
| label | 标签，只在 Form 下生效 | 类型ReactNode |
| name | 字段名 | 类型string |
| value | <受控>当前值 | 类型any |
| defaultValue | 默认值 | 类型any |
| required | 是否必输 | 类型boolean默认值false |
| readOnly | 是否只读 | 类型boolean默认值false |
| disabled | 是否禁用 | 类型boolean默认值false |
| form | 对照表单 id | 类型string |
| dataIndex | 对照 record 在 DataSet 中的 index | 类型number默认值ds.currentIndex |
| record | 对照 record，优先级高于 dataSet 和 dataIndex | 类型Record |
| multiple | 是否是多值 | 类型boolean默认值false |
| validator | 校验器，回调返回值为 true 或 Promise.resolve(true) 为校验通过，否则为不通过 | 类型(value, name, form) => string boolean Promise<string boolean> |
| help | 额外信息，常用于提示 | 类型ReactNode |
| showHelp | 表单展示提示(帮助)信息的方式，tooltip 只有在 TextField 及其子类上生效， 可选值 tooltip \| newLine \| none | 类型string默认值newLine |
| helpTooltipProps | 用于配置 help 提示信息的 Tooltip 相关参数 | 类型TooltipProps版本1.6.2 |
| renderer | 渲染器，覆盖默认渲染行为 | 类型({ value, text, name, record, dataSet }) => ReactNode默认值({ text |
| tagRenderer | 多值 Tag 渲染器 | 类型({ value, text, key, readOnly, invalid, disabled, onClose, className, inputBoxIsFocus }: TagRendererProps) => ReactNode版本1.6.2 |
| noValidate | 不校验，不影响 DataSet 校验 | 类型boolean默认值false |
| maxTagPlaceholder | 多值标签超出最大数量时的占位描述 | 类型ReactNode (restValues) => ReactNode |
| maxTagCount | 多值标签最大数量 | 类型number |
| maxTagTextLength | 多值标签文案最大长度 | 类型number |
| overMaxTagCountTooltip | 超过多值标签最大数量是否显示 tooltip, 或者自定义 tooltip 内容 | 类型boolean (options: title: string, record?: Record }) => ReactNode默认值true版本1.6.6 |
| pristine | 显示原始值 | 类型boolean默认值false |
| trim | 字符串值是否去掉首尾空格，如果绑定 DataSet 需要在 DataSet 的 Field 上设置 trim，可选值: both \| left \| right \| none | 类型string默认值both |
| format | 字符串格式化，可选值: uppercase \| lowercase \| capitalize | 类型string |
| validationRenderer | 校验信息渲染 | 类型(validationResult, validationProps) => ReactNode |
| highlight | 高亮 | 类型boolean ReactNode title, content, className, style }版本1.4.0 |
| highlightRenderer | 高亮渲染器 | 类型({ title, content, dataSet, record, name, className, style }, element) => ReactNode版本1.4.0 |
| onInvalid | 校验失败回调 | 类型(validationResults, validity, name) => void |
| onBeforeChange | 值变化前回调, 返回 false 或 Promise.resolve(false) 时将阻止onChange | 类型(value, oldValue, form) => boolean Promise版本1.3.2 |
| onChange | 值变化回调 | 类型(value, oldValue, form) => void |
| onInput | 输入回调 | 类型Function |
| onEnterDown | 键盘回车回调 | 类型Function |
| onClear | 值清空回调 | 类型Function |
| showValidation | 校验信息提示方式 | 类型tooltip newLine默认值tooltip版本1.4.4 |
| showHelp | 显示提示信息的方式 | 类型tooltip newLine\| label\| none默认值newline版本1.5.0 |
| processValue | 值变更时，拦截并返回一个新的值 | 类型(value: any, range?: 1) => any版本1.4.4 |

注意，当绑定 DataSet 时，以 DataSet 的校验为主，校验规则应设置在 DataSet 的 Field 上。

更多属性请参考DataSetComponent。

#### RenderParam

```ts
export type RendererParam = {
  value?: any;
  text?: any;
  record?: Record | null;
  name?: string;
  dataSet?: DataSet | null;
};
```



================================================================================
文件: Grid.md
路径: doc\Grid.md
================================================================================

# Grid 栅格

24 栅格系统。

## 设计理念

在多数业务情况下，Choerodon UI 需要在设计区域内解决大量信息收纳的问题，因此在 12 栅格系统的基础上，我们将整个设计建议区域按照 24 等分的原则进行划分。

划分之后的信息区块我们称之为『盒子』。建议横向排列的盒子数量最多四个，最少一个。『盒子』在整个屏幕上占比见上图。设计部分基于盒子的单位定制盒子内部的排版规则，以保证视觉层面的舒适感。

## 概述

布局的栅格化系统，我们是基于行（row）和列（col）来定义信息区块的外部框架，以保证页面的每个区域能够稳健地排布起来。下面简单介绍一下它的工作原理：

- 通过row在水平方向建立一组column（简写 col）
- 你的内容应当放置于col内，并且，只有col可以作为row的直接元素
- 栅格系统中的列是指 1 到 24 的值来表示其跨越的范围。例如，三个等宽的列可以使用.col-8来创建
- 如果一个row中的col总和超过 24，那么多余的col会作为一个整体另起一行排列

## Flex 布局

我们的栅格化系统支持 Flex 布局，允许子元素在父节点内的水平对齐方式 - 居左、居中、居右、等宽排列、分散排列。子元素与子元素之间，支持顶部对齐、垂直居中对齐、底部对齐的方式。同时，支持使用 order 来定义元素的排列顺序。

Flex 布局是基于 24 栅格来定义每一个『盒子』的宽度，但排版则不拘泥于栅格。

## 代码演示

## 基础栅格

从堆叠到水平排列。

使用单一的一组Row和Col栅格组件，就可以创建一个基本的栅格系统，所有列（Col）必须放在Row内。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Row, Col } from 'choerodon-ui';

ReactDOM.render(
  <div>
    <Row>
      <Col span={12}>col-12</Col>
      <Col span={12}>col-12</Col>
    </Row>
    <Row>
      <Col span={8}>col-8</Col>
      <Col span={8}>col-8</Col>
      <Col span={8}>col-8</Col>
    </Row>
    <Row>
      <Col span={6}>col-6</Col>
      <Col span={6}>col-6</Col>
      <Col span={6}>col-6</Col>
      <Col span={6}>col-6</Col>
    </Row>
  </div>,
  document.getElementById('container'),
);
```

## 区块间隔

栅格常常需要和间隔进行配合，你可以使用Row的gutter属性，我们推荐使用(16+8n)px作为栅格间隔。(n 是自然数)

如果要支持响应式，可以写成{ xs: 8, sm: 16, md: 24, lg: 32 }。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Row, Col } from 'choerodon-ui';

ReactDOM.render(
  <div className="gutter-example">
    <Row gutter={16}>
      <Col className="gutter-row" span={6}>
        <div className="gutter-box">col-6</div>
      </Col>
      <Col className="gutter-row" span={6}>
        <div className="gutter-box">col-6</div>
      </Col>
      <Col className="gutter-row" span={6}>
        <div className="gutter-box">col-6</div>
      </Col>
      <Col className="gutter-row" span={6}>
        <div className="gutter-box">col-6</div>
      </Col>
    </Row>
  </div>,
  document.getElementById('container'));
```

## 左右偏移

使用offset可以将列向右侧偏。例如，offset={4}将元素向右侧偏移了 4 个列（column）的宽度。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Row, Col } from 'choerodon-ui';

ReactDOM.render(
  <div>
    <Row>
      <Col span={8}>col-8</Col>
      <Col span={8} offset={8}>
        col-8
      </Col>
    </Row>
    <Row>
      <Col span={6} offset={6}>
        col-6 col-offset-6
      </Col>
      <Col span={6} offset={6}>
        col-6 col-offset-6
      </Col>
    </Row>
    <Row>
      <Col span={12} offset={6}>
        col-12 col-offset-6
      </Col>
    </Row>
  </div>,
  document.getElementById('container'),
);
```

## 栅格排序

通过使用push和pull类就可以很容易的改变列（column）的顺序。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Row, Col } from 'choerodon-ui';

ReactDOM.render(
  <div>
    <Row>
      <Col span={18} push={6}>
        col-18 col-push-6
      </Col>
      <Col span={6} pull={18}>
        col-6 col-pull-18
      </Col>
    </Row>
  </div>,
  document.getElementById('container'),
);
```

## Flex 布局

Flex 布局基础。

使用row-flex定义flex布局，其子元素根据不同的值start,center,end,space-between,space-around，分别定义其在父节点里面的排版方式。

sub-element align left

sub-element align center

sub-element align right

sub-element monospaced arrangement

sub-element align full

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Row, Col } from 'choerodon-ui';

ReactDOM.render(
  <div>
    <p>sub-element align left</p>
    <Row type="flex" justify="start">
      <Col span={4}>col-4</Col>
      <Col span={4}>col-4</Col>
      <Col span={4}>col-4</Col>
      <Col span={4}>col-4</Col>
    </Row>

    <p>sub-element align center</p>
    <Row type="flex" justify="center">
      <Col span={4}>col-4</Col>
      <Col span={4}>col-4</Col>
      <Col span={4}>col-4</Col>
      <Col span={4}>col-4</Col>
    </Row>

    <p>sub-element align right</p>
    <Row type="flex" justify="end">
      <Col span={4}>col-4</Col>
      <Col span={4}>col-4</Col>
      <Col span={4}>col-4</Col>
      <Col span={4}>col-4</Col>
    </Row>

    <p>sub-element monospaced arrangement</p>
    <Row type="flex" justify="space-between">
      <Col span={4}>col-4</Col>
      <Col span={4}>col-4</Col>
      <Col span={4}>col-4</Col>
      <Col span={4}>col-4</Col>
    </Row>

    <p>sub-element align full</p>
    <Row type="flex" justify="space-around">
      <Col span={4}>col-4</Col>
      <Col span={4}>col-4</Col>
      <Col span={4}>col-4</Col>
      <Col span={4}>col-4</Col>
    </Row>
  </div>,
  document.getElementById('container'),
```

## Flex 对齐

Flex 子元素垂直对齐。

Align Top

Align Center

Align Bottom

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Row, Col } from 'choerodon-ui';

const DemoBox = props => <p className={`height-${props.value}`}>{props.children}</p>;

ReactDOM.render(
  <div>
    <p>Align Top</p>
    <Row type="flex" justify="center" align="top">
      <Col span={4}>
        <DemoBox value={100}>col-4</DemoBox>
      </Col>
      <Col span={4}>
        <DemoBox value={50}>col-4</DemoBox>
      </Col>
      <Col span={4}>
        <DemoBox value={120}>col-4</DemoBox>
      </Col>
      <Col span={4}>
        <DemoBox value={80}>col-4</DemoBox>
      </Col>
    </Row>

    <p>Align Center</p>
    <Row type="flex" justify="space-around" align="middle">
      <Col span={4}>
        <DemoBox value={100}>col-4</DemoBox>
      </Col>
      <Col span={4}>
        <DemoBox value={50}>col-4</DemoBox>
      </Col>
      <Col span={4}>
        <DemoBox value={120}>col-4</DemoBox>
      </Col>
      <Col span={4}>
        <DemoBox value={80}>col-4</DemoBox>
      </Col>
    </Row>

    <p>Align Bottom</p>
    <Row type="flex" justify="space-between" align="bottom">
      <Col span={4}>
        <DemoBox value={100}>col-4</DemoBox>
      </Col>
      <Col span={4}>
        <DemoBox value={50}>col-4</DemoBox>
      </Col>
      <Col span={4}>
        <DemoBox value={120}>col-4</DemoBox>
      </Col>
      <Col span={4}>
        <DemoBox value={80}>col-4</DemoBox>
      </Col>
```

## Flex 排序

通过 Flex 布局的 Order 来改变元素的排序。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Row, Col } from 'choerodon-ui';

ReactDOM.render(
  <div>
    <Row type="flex">
      <Col span={6} order={4}>
        1 col-order-4
      </Col>
      <Col span={6} order={3}>
        2 col-order-3
      </Col>
      <Col span={6} order={2}>
        3 col-order-2
      </Col>
      <Col span={6} order={1}>
        4 col-order-1
      </Col>
    </Row>
  </div>,
  document.getElementById('container'),
);
```

## 响应式布局

参照 Bootstrap 的响应式设计，预设五个响应尺寸：xssmmdlgxlxxl。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Row, Col } from 'choerodon-ui';

ReactDOM.render(
  <Row>
    <Col xs={2} sm={4} md={6} lg={8} xl={10}>Col</Col>
    <Col xs={20} sm={16} md={12} lg={8} xl={4}>Col</Col>
    <Col xs={2} sm={4} md={6} lg={8} xl={10}>Col</Col>
  </Row>,
  document.getElementById('container'));
```

## 其他属性的响应式

spanpullpushoffsetorder属性可以通过内嵌到xssmmdlgxlxxl属性中来使用。

其中xs={6}相当于xs={{ span: 6 }}。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Row, Col } from 'choerodon-ui';

ReactDOM.render(
  <Row>
    <Col xs={{ span: 5, offset: 1 }} lg={{ span: 6, offset: 2 }}>Col</Col>
    <Col xs={{ span: 11, offset: 1 }} lg={{ span: 6, offset: 2 }}>Col</Col>
    <Col xs={{ span: 5, offset: 1 }} lg={{ span: 6, offset: 2 }}>Col</Col>
  </Row>,
  document.getElementById('container'));
```

## 栅格配置器

可以简单配置几种等分栅格和间距。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Row, Col, Slider } from 'choerodon-ui';

class App extends React.Component {
  gutters = {};

  colCounts = {};

  constructor() {
    super();
    this.state = {
      gutterKey: 1,
      colCountKey: 2,
    };
    [8, 16, 24, 32, 40, 48].forEach((value, i) => {
      this.gutters[i] = value;
    });
    [2, 3, 4, 6, 8, 12].forEach((value, i) => {
      this.colCounts[i] = value;
    });
  }

  onGutterChange = gutterKey => {
    this.setState({ gutterKey });
  };

  onColCountChange = colCountKey => {
    this.setState({ colCountKey });
  };

  render() {
    const { gutterKey, colCountKey } = this.state;
    const cols = [];
    const colCount = this.colCounts[colCountKey];
    let colCode = '';
    for (let i = 0; i < colCount; i++) {
      cols.push(
        <Col key={i.toString()} span={24 / colCount}>
          <div>Column</div>
        </Col>,
      );
      colCode += `  <Col span={${24 / colCount}} />\n`;
    }
    return (
      <div>
        <div style={{ marginBottom: 16 }}>
          <span style={{ marginRight: 6 }}>Gutter (px): </span>
```

## API

Choerodon UI 的布局组件若不能满足你的需求，你也可以直接使用社区的优秀布局组件：

- react-flexbox-grid
- react-blocks

### Row

| 属性 | 说明 | 类型/默认值 |
| --- | --- | --- |
| align | flex 布局下的垂直对齐方式：topmiddlebottom | 类型string默认值top |
| gutter | 栅格间隔，可以写成像素值或支持响应式的对象写法{ xs: 8, sm: 16, md: 24} | 类型number/object默认值0 |
| justify | flex 布局下的水平排列方式：startendcenterspace-aroundspace-between | 类型string默认值start |
| type | 布局模式，可选flex，现代浏览器下有效 | 类型string |

### Col

| 属性 | 说明 | 类型/默认值 |
| --- | --- | --- |
| offset | 栅格左侧的间隔格数，间隔内不可以有栅格 | 类型number默认值0 |
| order | 栅格顺序，flex布局模式下有效 | 类型number默认值0 |
| pull | 栅格向左移动格数 | 类型number默认值0 |
| push | 栅格向右移动格数 | 类型number默认值0 |
| span | 栅格占位格数，为 0 时相当于display: none | 类型number默认值- |
| xs | <576px响应式栅格，可为栅格数或一个包含其他属性的对象 | 类型number\|object默认值- |
| sm | ≥576px响应式栅格，可为栅格数或一个包含其他属性的对象 | 类型number\|object默认值- |
| md | ≥768px响应式栅格，可为栅格数或一个包含其他属性的对象 | 类型number\|object默认值- |
| lg | ≥992px响应式栅格，可为栅格数或一个包含其他属性的对象 | 类型number\|object默认值- |
| xl | ≥1200px响应式栅格，可为栅格数或一个包含其他属性的对象 | 类型number\|object默认值- |
| xxl | ≥1600px响应式栅格，可为栅格数或一个包含其他属性的对象 | 类型number\|object默认值- |

响应式栅格的断点扩展自BootStrap 4 的规则（不包含链接里occasionally的部分)。



================================================================================
文件: Hooks.md
路径: doc\Hooks.md
================================================================================

# Hooks 钩子

基于 choerodon-ui，方便开发的 hooks。

## 使用

```jsx
import React from 'react';
import ReactDOM from 'react-dom';
import { ConfigProvider, useConfig } from 'choerodon-ui';
import { Button, ModalProvider, useDataSet, useModal, Form } from 'choerodon-ui/pro';

const App = () => {
  const config = useConfig();
  const modal = useModal();
  const dataSet = useDataSet(() => ({
    autoQuery: true,
  }), []);
  const handleOpenModal = React.useCallback(() => modal.open({
    children: (
      <Form dataSet={dataSet} />
    ),
  }), [modal]);
  console.log(config.getConfig('prefixCls'));
  return <Button onClick={handleOpenModal}>Open Modal</Button>
}

ReactDOM.render(
  <ConfigProvider prefixCls="c7n">
    <ModalProvider>
     <App />
    </ModalProvider>
  </ConfigProvider>,
  document.getElementById('container')
);
```

## API

| 钩子 | 说明 | 属性名/版本 |
| --- | --- | --- |
| useConfig() | 获取配置实例, 受ConfigProvider控制 | 版本1.5.0 |
| useDataSet(factory, deps) | 获取DataSet实例, 相关配置受ConfigProvider控制 | 属性名factory- 返回 DataSet 配置的函数deps- 钩子依赖列表版本1.5.0 |
| useModal() | 获取 Modal 实例， 配合ModalProvider使用时可以传递上下文 |  |



================================================================================
文件: IconPicker.md
路径: doc\IconPicker.md
================================================================================

# IconPicker 图标选择框

图标选择框。

## 何时使用

当用户需要输入一个图标，可以点击标准输入框，弹出图标面板进行选择。

## 代码演示

## 基本使用

图标选择器。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { IconPicker } from 'choerodon-ui/pro';

function handleChange(value, oldValue) {
  console.log('[datepicker]', value, '[oldValue]', oldValue);
}

ReactDOM.render(
  <IconPicker onChange={handleChange} />,
  document.getElementById('container')
);
```

## 受控图标选择器

受控图标选择器

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { IconPicker } from 'choerodon-ui/pro';

class App extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      value: 'add',
    };
  }

  handleChange = (value, oldValue) => {
    console.log('[newValue]', value, '[oldValue]', oldValue);
    this.setState({
      value,
    });
  }

  render() {
    return <IconPicker value={this.state.value} onChange={this.handleChange} />;
  }
}

ReactDOM.render(
  <App />,
  document.getElementById('container')
);
```

## 数据源

绑定数据源。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, IconPicker } from 'choerodon-ui/pro';

function handleDataSetChange({ record, name, value, oldValue }) {
  console.log('[dataset newValue]', value, '[oldValue]', oldValue, `[record.get('${name}')]`, record.get(name));
}

class App extends React.Component {
  ds = new DataSet({
    autoCreate: true,
    fields: [
      { name: 'icon', type: 'string', defaultValue: 'cancel', required: true },
    ],
    events: {
      update: handleDataSetChange,
    },
  });

  render() {
    return <IconPicker dataSet={this.ds} name="icon" />;
  }
}

ReactDOM.render(
  <App />,
  document.getElementById('container')
);
```

## API

| 属性名 | 说明 | 类型 |
| --- | --- | --- |
| pageSize | 控制icon页面展示数量 | 类型number |
| customFontName | 控制icon的自定义图标配置 | 类型string |
| icons | 配置需要的icons选择列表 | 类型{ [key: string]: string[]; string[] |

更多属性请参考TriggerField。

### customFontName 属性说明

- 解决需求：可以用户客制化字体库进行项目专属的 icon 配置。
- 使用步骤：先按照 icon 配置进行第三方自定义的 icon 配置在 configure 配置需要的 icons 或者 用 icons 封装成项目公共组件（推荐） 字符串数组以及分类，完成配置后可以自定义选择使用配置对应的 customFontName 就可以实现自定义项目 icon 选择

### 自定义图标示例代码

```text
// 组件单独配置：
// 配置成数组，每一项则代表一个图标，如下代表 IconPicker 中只有一个叫 clubs 的图标，并且下拉面板中不会有 Tabs 进行分类
<IconPicker icons={['clubs']} customFontName="c7ntest1" />

// 配置成键值对，每一个键值对代表一个图标分组，键为分组名，值为图标集合，下拉面板中会使用 Tabs 对图标进行相应分类
<IconPicker icons={{ group1: ['icon1-1', 'icon1-2'], group2: ['icon2-1', 'icon2-2'] }} customFontName="c7ntest1" />

// 建议维护成图标库
import customIcons from 'customIcons';
<IconPicker icons={customIcons} customFontName="c7ntest1" />

// 全局配置
import c7nIcons from 'choerodon-ui-font';
import customIcons from 'customIcons';
configure({ icons: { ...c7nIcons, ...customIcons } });

// 全局应用的图标可以这样查看
import { getConfig } from 'choerodon-ui';
console.log('全局图标：', getConfig('icons'));
```

### 注意事项

- 不管是全局配置还是组件配置，icons 数据格式满足 { [key: string]: string[]; } | string[] 类型都可以；
- 配置新图标时对应的样式文件不要忘记引入；
- 新的全局配置会覆盖默认配置，不要忘记将默认图标（choerodon-ui-font）加入其中。



================================================================================
文件: ImageCrop.md
路径: doc\ImageCrop.md
================================================================================

# ImageCrop 图片裁剪

## 何时使用

## 代码演示

## 基本

最简单的用法。

```javascript
import ReactDOM from 'react-dom';
import { ImageCrop, Button } from 'choerodon-ui';
import React, { useState, useCallback } from 'react';

const Demo = () => {
  const [visable, setVisiable] = useState(false);

  const hanleClick = useCallback(() => {
    setVisiable(true);
  }, []);

  const hanleOk = useCallback(({ url, blob, area }) => {
    console.log(url, blob, area);
    setVisiable(false);
  }, []);

  const hanleCancel = useCallback(() => {
    setVisiable(false);
    console.log('close');
  }, []);

  return (
    <>
      <Button onClick={hanleClick} funcType="raised">
        查看
      </Button>
      <ImageCrop
        modalVisible={visable}
```

## 图片裁剪下载

图片裁剪下载。

```javascript
import ReactDOM from 'react-dom';
import { ImageCrop, Button } from 'choerodon-ui';
import React, { useState, useCallback } from 'react';

const Demo = () => {
  const [visable, setVisiable] = useState(false);

  const hanleClick = useCallback(() => {
    setVisiable(true);
  }, []);

  const hanleOk = useCallback(({ url, blob, area }) => {
    console.log(url, blob, area);
    setVisiable(false);
    // 这里是获取到的图片base64编码,这里只是个例子哈，要自行编码图片替换这里才能测试看到效果
    const imgUrl = url;
    // 如果浏览器支持msSaveOrOpenBlob方法（也就是使用IE浏览器的时候），那么调用该方法去下载图片
    if (window.navigator.msSaveOrOpenBlob) {
      const bstr = atob(imgUrl.split(',')[1]);
      let n = bstr.length;
      const u8arr = new Uint8Array(n);
      // eslint-disable-next-line no-plusplus
      while (n--) {
        u8arr[n] = bstr.charCodeAt(n);
      }
      // eslint-disable-next-line no-shadow
      const blob = new Blob([u8arr]);
      window.navigator.msSaveOrOpenBlob(blob, 'chart-download.png');
```

## 头像展示

```javascript
import ReactDOM from 'react-dom';
import { ImageCrop, Avatar } from 'choerodon-ui';
import React, { useState, useCallback } from 'react';

const { AvatarUploader } = ImageCrop;

const Demo = () => {
  const [visable, setVisiable] = useState(false);

  const hanleClick = useCallback(() => {
    setVisiable(true);
  }, []);

  const hanleOk = useCallback(() => {
    setVisiable(false);
  }, []);

  const hanleCancel = useCallback(() => {
    setVisiable(false);
    console.log('close');
  }, []);

  return (
    <>
      <Avatar onClick={hanleClick} style={{ backgroundColor: '#87d068' }}>
        我绿了
      </Avatar>
      <AvatarUploader
```

## 图片裁剪并上传

图片裁剪并上传，不可以使用upload上传类型和上传前的钩子其他upload的配置可以正常使用。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Icon, Modal, ImageCrop, Upload } from 'choerodon-ui';

class PicturesWall extends React.Component {
  state = {
    previewVisible: false,
    previewImage: '',
    fileList: [
      {
        uid: -1,
        name: 'xxx.png',
        status: 'done',
        url:
          'https://zos.alipayobjects.com/rmsportal/jkjgkEfvpUPVyRjUImniVslZfWPnJuuZ.png',
      },
    ],
  };

  handleCancel = () => this.setState({ previewVisible: false });

  handlePreview = (file) => {
    this.setState({
      previewImage: file.url || file.thumbUrl,
      previewVisible: true,
    });
  };
```

## 图片服务端裁剪

图片服务端裁剪，把完整的裁剪信息和原图传输到服务器。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Icon, Modal, ImageCrop, Upload } from 'choerodon-ui';

class PicturesWall extends React.Component {
  state = {
    previewVisible: false,
    previewImage: '',
    fileList: [
      {
        uid: -1,
        name: 'xxx.png',
        status: 'done',
        url:
          'https://zos.alipayobjects.com/rmsportal/jkjgkEfvpUPVyRjUImniVslZfWPnJuuZ.png',
      },
    ],
  };

  handleCancel = () => this.setState({ previewVisible: false });

  handlePreview = (file) => {
    this.setState({
      previewImage: file.url || file.thumbUrl,
      previewVisible: true,
    });
  };
```

## 裁剪区域自定义渲染

支持在裁剪区域设置想要的渲染样式。

```javascript
import ReactDOM from 'react-dom';
import { ImageCrop, Button, Row, Col, Avatar } from 'choerodon-ui';
import React, { useState, useCallback } from 'react';

const avatarRender = (src) => {
  const prefix = `c7n-image-crop`;
  const avatarList = [
    {
      src,
      size: 80,
      icon: 'person',
      text: '80×80',
    },
    {
      src,
      size: 40,
      icon: 'person',
      text: '40×40',
    },
    {
      src,
      size: 20,
      icon: 'person',
      text: '20×20',
    },
  ];
  return src
    ? avatarList.map(
        // eslint-disable-next-line react/jsx-key
        (itemProps) => (
          <Row
            key={itemProps.text}
```

## API

| 属性名 | 说明 | 类型/默认值 |
| --- | --- | --- |
| aspect | 裁切区域宽高比， width / height | 类型number默认值1 |
| shape | 裁切区域形状， 'rect' 或 'round' | 类型string默认值'rect' |
| grid | 显示裁切区域网格（九宫格） | 类型boolean默认值false |
| zoom | 启用图片缩放 | 类型boolean默认值true |
| rotate | 启用图片旋转 | 类型boolean默认值false |
| rotateStep | 每次旋转角度 | 类型number默认值90 |
| beforeCrop | 弹窗打开前调用，若返回 false ，弹框将不会打开 | 类型function |
| modalTitle | 弹窗标题 | 类型string默认值'编辑图片' |
| modalWidth | 弹窗宽度，像素值或百分比 | 类型number string默认值520 |
| modalOk | 弹窗确定按钮文字 | 类型string默认值'确定' |
| modalCancel | 弹窗取消按钮文字 | 类型string默认值'取消' |
| onCancel | 取消模态框触发 | 类型onCancel?: () => void |
| onOk | 点击模态框确定触发 | 类型{ url: string, blob: Blob,area:Area }=> void |
| modalVisible | 控制模态框的展示 | 类型boolean默认值ture |
| serverCrop | 服务端裁剪 | 类型boolean默认值false |
| onCropComplete | 裁剪完毕触发方法 | 类型({ url: string, blob: Blob, area: Area }) => void |
| cropContent | 修改裁剪编辑位置的渲染 | 类型(crop: ReactElement) => React.ReactElement |
| modalProps | modal 的属性配置不可以更改onOk，onCancel | 类型ModalProps |

### ImgCrop.AvatarUploader

这个组件可以完成对于头像上传的裁剪的场景需求，主要是增加预览效果集成

| 属性名 | 说明 | 类型/默认值 |
| --- | --- | --- |
| visible | 上传图片模态框的显示状态 | 类型boolean默认值false |
| onClose | 模态框关闭时的回调 | 类型(visible: boolean) => void; |
| onUploadOk | 成功上传时的回调 | 类型(res: any) => void; |
| uploadUrl | 上传链接 | 类型string |
| uploadFaild | 上传失败 | 类型() => void; |
| uploadError | 上传服务器错误 | 类型(error: any) => void; |
| handleUpload | 点击上传 | 类型(area: AvatarArea) => void; |
| cropComplete | 裁剪完成 | 类型(imageState: any) => void; |
| title | 上传头像标题 | 类型string React.ReactElement; |
| previewTitle | 头像预览标题 | 类型string React.ReactElement; |
| reloadTitle | 重新上传标题 | 类型string React.ReactElement; |
| uploadProps | 上传配置 | 类型UploadProps |
| modalProps | 模态框的配置 | 类型ModalProps |
| limit | 限制内容 | 类型boolean默认值{type: 'jpeg,png,jpg',size: 1024,} |
| previewList | 定义预览的大小 | 类型number[]默认值[80, 48, 34] |
| editorWidth | 裁剪容器宽度 | 类型number默认值380 |
| editorHeight | 裁剪容器高度 | 类型number默认值380 |
| rectSize | 裁剪区域大小 | 类型number默认值280 |
| axiosConfig | axios 上传配置 | 类型AxiosRequestConfig |



================================================================================
文件: IntlField.md
路径: doc\IntlField.md
================================================================================

# IntlField 多语言输入框

多语言表单控件。

## 何时使用

当用户需要输入多语言说明，可以点击图标，弹出对应多语言输入列表进行输入。

## 代码演示

## 数据源

绑定数据源。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, IntlField, Row, Col } from 'choerodon-ui/pro';

function handleDataSetChange({ record, name, value, oldValue }) {
  console.log(
    '[dataset newValue]',
    value,
    '[oldValue]',
    oldValue,
    `[record.get('${name}')]`,
    record.get(name),
  );
}

class App extends React.Component {
  ds = new DataSet({
    primaryKey: 'pk',
    data: [{ 'first-name': '吴' }],
    tlsUrl: '/dataset/user/languages',
    fields: [
      {
        name: 'first-name',
        type: 'intl',
        defaultValue: 'Zhangsan',
        required: true,
      },
      {
```

## 多行

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, IntlField, Row, Col } from 'choerodon-ui/pro';

function handleDataSetChange({ record, name, value, oldValue }) {
  console.log(
    '[dataset newValue]',
    value,
    '[oldValue]',
    oldValue,
    `[record.get('${name}')]`,
    record.get(name),
  );
}

class App extends React.Component {
  ds = new DataSet({
    primaryKey: 'pk',
    data: [{ 'first-name': '吴' }],
    tlsUrl: '/dataset/user/languages',
    fields: [
      {
        name: 'first-name',
        type: 'intl',
        defaultValue: 'Huazhen',
        required: true,
      },
      {
        name: 'last-name',
```

## 设置多语言字段校验属性

通过 modalProps 提供的 beforeOpen 回调函数，在打开多语言弹窗前设置多语言字段的校验属性。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { getConfig } from 'choerodon-ui';
import { DataSet, IntlField } from 'choerodon-ui/pro';

class App extends React.Component {
  hadSetValidation = false;

  ds = new DataSet({
    primaryKey: 'pk',
    data: [{ 'first-name': '吴' }],
    tlsUrl: '/dataset/user/languages',
    fields: [
      {
        name: 'first-name',
        type: 'intl',
        defaultValue: 'Huazhen',
        required: true,
      },
    ],
  });

  beforeOpen = () => {
    if (!this.hadSetValidation) {
      const tlsKey = getConfig('tlsKey');
      const fieldName = 'first-name';
      const languageKeys = ['en_GB', 'en_US'];
      languageKeys.forEach((languageKey) => {
```

## API

多行模式在 1.5.0 版本新增。

| 属性名 | 说明 | 类型/默认值 |
| --- | --- | --- |
| modalProps | 弹窗属性，详见ModalProps | 类型object |
| maxLengths | 多语言弹窗内选项输入最大长度(主语言 Field maxLength 配置优先) | 类型object |
| type | 单行或多行输入，可选值：singleLine\|multipleLine | 类型string默认值singleLine |
| rows | 文本域高(type为multipleLine有效) | 类型number默认值3 |
| resize | 是否能够拖拽调整大小(type为multipleLine有效)，可选值：none\|both\|vertical\|horizontal | 类型string默认值vertical |
| displayOutput(1.5.5) | 显示为 Output 样式 | 类型boolean |

更多属性请参考TextField或TextArea。



================================================================================
文件: Layout.md
路径: doc\Layout.md
================================================================================

# Layout 布局

协助进行页面级整体布局。

## 设计规则

### 尺寸

一级导航项偏左靠近 logo 放置，辅助菜单偏右放置。

- 顶部导航（大部分系统）：一级导航高度64px，二级导航48px。
- 顶部导航（展示类页面）：一级导航高度80px，二级导航56px。
- 顶部导航高度的范围计算公式为：48+8n。
- 侧边导航宽度的范围计算公式：200+8n。

### 交互

- 一级导航和末级的导航需要在可视化的层面被强调出来；
- 当前项应该在呈现上优先级最高；
- 当导航收起的时候，当前项的样式自动赋予给它的上一个层级；
- 左侧导航栏的收放交互同时支持手风琴和全展开的样式，根据业务的要求进行适当的选择。

### 视觉

导航样式上需要根据信息层级合理的选择样式：

- 大色块强调建议用于底色为深色系时，当前页面父级的导航项。
- 高亮火柴棍当导航栏底色为浅色系时使用，可用于当前页面对应导航项，建议尽量在导航路径的最终项使用。
- 字体高亮变色从可视化层面，字体高亮的视觉强化力度低于大色块，通常在当前项的上一级使用。
- 字体放大12px、14px是导航的标准字号，14 号字体用在一、二级导航中。字号可以考虑导航项的等级做相应选择。

## 组件概述

- Layout：布局容器，其下可嵌套HeaderSiderContentFooter或Layout本身，可以放在任何父容器中。
- Header：顶部布局，自带默认样式，其下可嵌套任何元素，只能放在Layout中。
- Sider：侧边栏，自带默认样式及基本功能，其下可嵌套任何元素，只能放在Layout中。
- Content：内容部分，自带默认样式，其下可嵌套任何元素，只能放在Layout中。
- Footer：底部布局，自带默认样式，其下可嵌套任何元素，只能放在Layout中。

注意：采用 flex 布局实现，请注意浏览器兼容性问题。

## 代码演示

## 基本结构

典型的页面布局。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Layout } from 'choerodon-ui';

const { Header, Footer, Sider, Content } = Layout;

ReactDOM.render(
  <div>
    <Layout>
      <Header>Header</Header>
      <Content>Content</Content>
      <Footer>Footer</Footer>
    </Layout>

    <Layout>
      <Header>Header</Header>
      <Layout>
        <Sider>Sider</Sider>
        <Content>Content</Content>
      </Layout>
      <Footer>Footer</Footer>
    </Layout>

    <Layout>
      <Header>Header</Header>
      <Layout>
        <Content>Content</Content>
        <Sider>Sider</Sider>
      </Layout>
      <Footer>Footer</Footer>
    </Layout>

    <Layout>
      <Sider>Sider</Sider>
      <Layout>
        <Header>Header</Header>
        <Content>Content</Content>
        <Footer>Footer</Footer>
      </Layout>
    </Layout>
  </div>,
  document.getElementById('container'),
);
```

## 上中下布局

最基本的『上-中-下』布局。

一般主导航放置于页面的顶端，从左自右依次为：logo、一级导航项、辅助菜单（用户、设置、通知等）。通常将内容放在固定尺寸（例如：1200px）内，整个页面排版稳定，不受用户终端显示器影响；上下级的结构符合用户上下浏览的习惯，也是较为经典的网站导航模式。页面上下切分的方式提高了主工作区域的信息展示效率，但在纵向空间上会有一些牺牲。此外，由于导航栏水平空间的限制，不适合那些一级导航项很多的信息结构。

- nav 1
- nav 2
- nav 3

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Layout, Menu, Breadcrumb } from 'choerodon-ui';

const { Header, Content, Footer } = Layout;

ReactDOM.render(
  <Layout className="layout">
    <Header>
      <div className="logo" />
      <Menu
        theme="dark"
        mode="horizontal"
        defaultSelectedKeys={['2']}
        style={{ lineHeight: '64px' }}
      >
        <Menu.Item key="1">nav 1</Menu.Item>
        <Menu.Item key="2">nav 2</Menu.Item>
        <Menu.Item key="3">nav 3</Menu.Item>
      </Menu>
    </Header>
    <Content style={{ padding: '0 50px' }}>
      <Breadcrumb style={{ margin: '16px 0' }}>
        <Breadcrumb.Item>Home</Breadcrumb.Item>
        <Breadcrumb.Item>List</Breadcrumb.Item>
        <Breadcrumb.Item>App</Breadcrumb.Item>
      </Breadcrumb>
      <div style={{ background: '#fff', padding: 24, minHeight: 280 }}>Content</div>
    </Content>
    <Footer style={{ textAlign: 'center' }}>Choerodon UI</Footer>
  </Layout>,
  document.getElementById('container'),
);
```

## 顶部-侧边布局-通栏

同样拥有顶部导航及侧边栏，区别是两边未留边距，多用于应用型的网站。

- nav 1
- nav 2
- nav 3

- subnav 1option1option2option3option4
- subnav 2
- subnav 3

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Layout, Menu, Breadcrumb, Icon } from 'choerodon-ui';

const { SubMenu } = Menu;
const { Header, Content, Sider } = Layout;

ReactDOM.render(
  <Layout>
    <Header className="header">
      <div className="logo" />
      <Menu
        theme="dark"
        mode="horizontal"
        defaultSelectedKeys={['2']}
        style={{ lineHeight: '64px' }}
      >
        <Menu.Item key="1">nav 1</Menu.Item>
        <Menu.Item key="2">nav 2</Menu.Item>
        <Menu.Item key="3">nav 3</Menu.Item>
      </Menu>
    </Header>
    <Layout>
      <Sider width={200} style={{ background: '#fff' }}>
        <Menu
          mode="inline"
          defaultSelectedKeys={['1']}
          defaultOpenKeys={['sub1']}
          style={{ height: '100%', borderRight: 0 }}
        >
          <SubMenu
            key="sub1"
            title={
              <span>
                <Icon type="user" />
                subnav 1
              </span>
            }
          >
            <Menu.Item key="1">option1</Menu.Item>
            <Menu.Item key="2">option2</Menu.Item>
            <Menu.Item key="3">option3</Menu.Item>
            <Menu.Item key="4">option4</Menu.Item>
          </SubMenu>
          <SubMenu
            key="sub2"
            title={
              <span>
                <Icon type="laptop" />
                subnav 2
              </span>
```

## 顶部-侧边布局

拥有顶部导航及侧边栏的页面，多用于展示类网站。

- nav 1
- nav 2
- nav 3

- subnav 1option1option2option3option4
- subnav 2
- subnav 3

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Layout, Menu, Breadcrumb, Icon } from 'choerodon-ui';

const { SubMenu } = Menu;
const { Header, Content, Footer, Sider } = Layout;

ReactDOM.render(
  <Layout>
    <Header className="header">
      <div className="logo" />
      <Menu
        theme="dark"
        mode="horizontal"
        defaultSelectedKeys={['2']}
        style={{ lineHeight: '64px' }}
      >
        <Menu.Item key="1">nav 1</Menu.Item>
        <Menu.Item key="2">nav 2</Menu.Item>
        <Menu.Item key="3">nav 3</Menu.Item>
      </Menu>
    </Header>
    <Content style={{ padding: '0 50px' }}>
      <Breadcrumb style={{ margin: '16px 0' }}>
        <Breadcrumb.Item>Home</Breadcrumb.Item>
        <Breadcrumb.Item>List</Breadcrumb.Item>
        <Breadcrumb.Item>App</Breadcrumb.Item>
      </Breadcrumb>
      <Layout style={{ padding: '24px 0', background: '#fff' }}>
        <Sider width={200} style={{ background: '#fff' }}>
          <Menu
            mode="inline"
            defaultSelectedKeys={['1']}
            defaultOpenKeys={['sub1']}
            style={{ height: '100%' }}
          >
            <SubMenu
              key="sub1"
              title={
                <span>
                  <Icon type="user" />
                  subnav 1
                </span>
              }
            >
              <Menu.Item key="1">option1</Menu.Item>
              <Menu.Item key="2">option2</Menu.Item>
              <Menu.Item key="3">option3</Menu.Item>
              <Menu.Item key="4">option4</Menu.Item>
            </SubMenu>
            <SubMenu
```

## 侧边布局

侧边两列式布局。页面横向空间有限时，侧边导航可收起。

侧边导航在页面布局上采用的是左右的结构，一般主导航放置于页面的左侧固定位置，辅助菜单放置于工作区顶部。内容根据浏览器终端进行自适应，能提高横向空间的使用率，但是整个页面排版不稳定。侧边导航的模式层级扩展性强，一、二、三级导航项目可以更为顺畅且具关联性的被展示，同时侧边导航可以固定，使得用户在操作和浏览中可以快速的定位和切换当前位置，有很高的操作效率。但这类导航横向页面内容的空间会被牺牲一部份。

- Option 1
- Option 2
- User
- Team
- File

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Layout, Menu, Breadcrumb, Icon } from 'choerodon-ui';

const { Header, Content, Footer, Sider } = Layout;
const SubMenu = Menu.SubMenu;

class SiderDemo extends React.Component {
  state = {
    collapsed: false,
  };

  onCollapse = collapsed => {
    console.log(collapsed);
    this.setState({ collapsed });
  };

  render() {
    return (
      <Layout style={{ minHeight: '100vh' }}>
        <Sider collapsible collapsed={this.state.collapsed} onCollapse={this.onCollapse}>
          <div className="logo" />
          <Menu theme="dark" defaultSelectedKeys={['1']} mode="inline">
            <Menu.Item key="1">
              <Icon type="pie-chart" />
              <span>Option 1</span>
            </Menu.Item>
            <Menu.Item key="2">
              <Icon type="desktop" />
              <span>Option 2</span>
            </Menu.Item>
            <SubMenu
              key="sub1"
              title={
                <span>
                  <Icon type="user" />
                  <span>User</span>
                </span>
              }
            >
              <Menu.Item key="3">Tom</Menu.Item>
              <Menu.Item key="4">Bill</Menu.Item>
              <Menu.Item key="5">Alex</Menu.Item>
            </SubMenu>
            <SubMenu
              key="sub2"
              title={
                <span>
                  <Icon type="team" />
                  <span>Team</span>
                </span>
```

## 自定义触发器

要使用自定义触发器，可以设置trigger={null}来隐藏默认设定。

- nav 1
- nav 2
- nav 3

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Layout, Menu, Icon } from 'choerodon-ui';

const { Header, Sider, Content } = Layout;

class SiderDemo extends React.Component {
  state = {
    collapsed: false,
  };

  toggle = () => {
    this.setState({
      collapsed: !this.state.collapsed,
    });
  };

  render() {
    return (
      <Layout>
        <Sider trigger={null} collapsible collapsed={this.state.collapsed}>
          <div className="logo" />
          <Menu theme="dark" mode="inline" defaultSelectedKeys={['1']}>
            <Menu.Item key="1">
              <Icon type="user" />
              <span>nav 1</span>
            </Menu.Item>
            <Menu.Item key="2">
              <Icon type="video-camera" />
              <span>nav 2</span>
            </Menu.Item>
            <Menu.Item key="3">
              <Icon type="upload" />
              <span>nav 3</span>
            </Menu.Item>
          </Menu>
        </Sider>
        <Layout>
          <Header style={{ background: '#fff', padding: 0 }}>
            <Icon
              className="trigger"
              type={this.state.collapsed ? 'menu-unfold' : 'menu-fold'}
              onClick={this.toggle}
            />
          </Header>
          <Content style={{ margin: '24px 16px', padding: 24, background: '#fff', minHeight: 280 }}>
            Content
          </Content>
        </Layout>
      </Layout>
    );
```

## 响应式布局

Layout.Sider 支持响应式布局。

说明：配置breakpoint属性即生效，视窗宽度小于breakpoint时 Sider 缩小为collapsedWidth宽度，若将collapsedWidth设置为零，会出现特殊 trigger。

- nav 1
- nav 2
- nav 3
- nav 4

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Layout, Menu, Icon } from 'choerodon-ui';

const { Header, Content, Footer, Sider } = Layout;

ReactDOM.render(
  <Layout>
    <Sider
      breakpoint="lg"
      collapsedWidth="0"
      onCollapse={(collapsed, type) => {
        console.log(collapsed, type);
      }}
    >
      <div className="logo" />
      <Menu theme="dark" mode="inline" defaultSelectedKeys={['4']}>
        <Menu.Item key="1">
          <Icon type="user" />
          <span className="nav-text">nav 1</span>
        </Menu.Item>
        <Menu.Item key="2">
          <Icon type="video-camera" />
          <span className="nav-text">nav 2</span>
        </Menu.Item>
        <Menu.Item key="3">
          <Icon type="upload" />
          <span className="nav-text">nav 3</span>
        </Menu.Item>
        <Menu.Item key="4">
          <Icon type="user" />
          <span className="nav-text">nav 4</span>
        </Menu.Item>
      </Menu>
    </Sider>
    <Layout>
      <Header style={{ background: '#fff', padding: 0 }} />
      <Content style={{ margin: '24px 16px 0' }}>
        <div style={{ padding: 24, background: '#fff', minHeight: 360 }}>content</div>
      </Content>
      <Footer style={{ textAlign: 'center' }}>Choerodon UI</Footer>
    </Layout>
  </Layout>,
  document.getElementById('container'),
);
```

## 固定头部

一般用于固定顶部导航，方便页面切换。

- nav 1
- nav 2
- nav 3

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Layout, Menu, Breadcrumb } from 'choerodon-ui';

const { Header, Content, Footer } = Layout;

ReactDOM.render(
  <Layout>
    <Header style={{ position: 'fixed', width: '100%' }}>
      <div className="logo" />
      <Menu
        theme="dark"
        mode="horizontal"
        defaultSelectedKeys={['2']}
        style={{ lineHeight: '64px' }}
      >
        <Menu.Item key="1">nav 1</Menu.Item>
        <Menu.Item key="2">nav 2</Menu.Item>
        <Menu.Item key="3">nav 3</Menu.Item>
      </Menu>
    </Header>
    <Content style={{ padding: '0 50px', marginTop: 64 }}>
      <Breadcrumb style={{ margin: '16px 0' }}>
        <Breadcrumb.Item>Home</Breadcrumb.Item>
        <Breadcrumb.Item>List</Breadcrumb.Item>
        <Breadcrumb.Item>App</Breadcrumb.Item>
      </Breadcrumb>
      <div style={{ background: '#fff', padding: 24, minHeight: 380 }}>Content</div>
    </Content>
    <Footer style={{ textAlign: 'center' }}>Choerodon UI</Footer>
  </Layout>,
  document.getElementById('container'),
);
```

## 固定侧边栏

当内容较长时，使用固定侧边栏可以提供更好的体验。

- nav 1
- nav 2
- nav 3
- nav 4
- nav 5
- nav 6
- nav 7
- nav 8

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Layout, Menu, Icon } from 'choerodon-ui';

const { Header, Content, Footer, Sider } = Layout;

ReactDOM.render(
  <Layout>
    <Sider style={{ overflow: 'auto', height: '100vh', position: 'fixed', left: 0 }}>
      <div className="logo" />
      <Menu theme="dark" mode="inline" defaultSelectedKeys={['4']}>
        <Menu.Item key="1">
          <Icon type="user" />
          <span className="nav-text">nav 1</span>
        </Menu.Item>
        <Menu.Item key="2">
          <Icon type="video-camera" />
          <span className="nav-text">nav 2</span>
        </Menu.Item>
        <Menu.Item key="3">
          <Icon type="upload" />
          <span className="nav-text">nav 3</span>
        </Menu.Item>
        <Menu.Item key="4">
          <Icon type="bar-chart" />
          <span className="nav-text">nav 4</span>
        </Menu.Item>
        <Menu.Item key="5">
          <Icon type="cloud-o" />
          <span className="nav-text">nav 5</span>
        </Menu.Item>
        <Menu.Item key="6">
          <Icon type="appstore-o" />
          <span className="nav-text">nav 6</span>
        </Menu.Item>
        <Menu.Item key="7">
          <Icon type="team" />
          <span className="nav-text">nav 7</span>
        </Menu.Item>
        <Menu.Item key="8">
          <Icon type="shop" />
          <span className="nav-text">nav 8</span>
        </Menu.Item>
      </Menu>
    </Sider>
    <Layout style={{ marginLeft: 200 }}>
      <Header style={{ background: '#fff', padding: 0 }} />
      <Content style={{ margin: '24px 16px 0', overflow: 'initial' }}>
        <div style={{ padding: 24, background: '#fff', textAlign: 'center' }}>
          ...
          <br />
```

## API

```jsx
<Layout>
  <Header>header</Header>
  <Layout>
    <Sider>left sidebar</Sider>
    <Content>main content</Content>
    <Sider>right sidebar</Sider>
  </Layout>
  <Footer>footer</Footer>
</Layout>
```

### Layout

| 属性名 | 说明 | 类型/默认值 |
| --- | --- | --- |
| className | 容器 className | 类型string默认值- |
| style | 指定样式 | 类型object默认值- |
| hasSider | 表示子元素里有 Sider，一般不用指定。可用于服务端渲染时避免样式闪动 | 类型boolean默认值- |

Layout.HeaderLayout.FooterLayout.ContentAPI 与Layout相同

### Layout.Sider

| 属性名 | 说明 | 类型/默认值 |
| --- | --- | --- |
| breakpoint | 触发响应式布局的断点 | 类型Enum 'xs', 'sm', 'md', 'lg', 'xl', 'xxl' }默认值- |
| className | 容器 className | 类型string默认值- |
| collapsed | 当前收起状态 | 类型boolean默认值- |
| collapsedWidth | 收缩宽度，设置为 0 会出现特殊 trigger | 类型number默认值64 |
| collapsible | 是否可收起 | 类型boolean默认值false |
| defaultCollapsed | 是否默认收起 | 类型boolean默认值false |
| reverseArrow | 翻转折叠提示箭头的方向，当 Sider 在右边时可以使用 | 类型boolean默认值false |
| style | 指定样式 | 类型object默认值- |
| trigger | 自定义 trigger，设置为 null 时隐藏 trigger | 类型string\|ReactNode默认值- |
| width | 宽度 | 类型number\|string默认值200 |
| onCollapse | 展开-收起时的回调函数，有点击 trigger 以及响应式反馈两种方式可以触发 | 类型(collapsed, type) => {}默认值- |

#### breakpoint width

```js
{
  xs: '480px',
  sm: '576px',
  md: '768px',
  lg: '992px',
  xl: '1200px',
  xxl: '1600px',
}
```



================================================================================
文件: List.md
路径: doc\List.md
================================================================================

# List 列表

## 何时使用

最基础的列表展示，可承载文字、列表、图片、段落，常用于后台数据展示页面。

## 代码演示

## 简单列表

列表拥有大、中、小三种尺寸。

通过设置size为largesmall分别把按钮设为大、小尺寸。若不设置size，则尺寸为中。

可通过设置header和footer，来自定义列表头部和尾部。

### Default Size

### Small Size

### Large Size

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { List } from 'choerodon-ui';

const data = [
  'Racing car sprays burning fuel into crowd.',
  'Japanese princess to wed commoner.',
  'Australian walks 100km after outback crash.',
  'Man charged over missing wedding girl.',
  'Los Angeles battles huge wildfires.',
];

ReactDOM.render(
  <div>
    <h3 style={{ marginBottom: 16 }}>Default Size</h3>
    <List
      header={<div>Header</div>}
      footer={<div>Footer</div>}
      bordered
      dataSource={data}
      renderItem={item => <List.Item>{item}</List.Item>}
    />
    <h3 style={{ margin: '16px 0' }}>Small Size</h3>
    <List
      size="small"
      header={<div>Header</div>}
      footer={<div>Footer</div>}
      bordered
      dataSource={data}
      renderItem={item => <List.Item>{item}</List.Item>}
    />
    <h3 style={{ margin: '16px 0' }}>Large Size</h3>
    <List
      size="large"
      header={<div>Header</div>}
      footer={<div>Footer</div>}
      bordered
      dataSource={data}
      renderItem={item => <List.Item>{item}</List.Item>}
    />
  </div>,
  document.getElementById('container'),
);
```

## 基础列表

#### Choerodon UI Title 1

#### Choerodon UI Title 2

#### Choerodon UI Title 3

#### Choerodon UI Title 4

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { List, Avatar } from 'choerodon-ui';

const data = [
  {
    title: 'Choerodon UI Title 1',
  },
  {
    title: 'Choerodon UI Title 2',
  },
  {
    title: 'Choerodon UI Title 3',
  },
  {
    title: 'Choerodon UI Title 4',
  },
];

ReactDOM.render(
  <List
    itemLayout="horizontal"
    dataSource={data}
    renderItem={(item) => (
      <List.Item>
        <List.Item.Meta
          avatar={<Avatar>Choerodon</Avatar>}
          title={
            <a href="https://open-hand.github.io/choerodon-ui/">{item.title}</a>
          }
          description="Choerodon"
        />
      </List.Item>
    )}
  />,
  document.getElementById('container'),
);
```

## 加载更多

可通过loadMore属性实现加载更多功能。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { List, Avatar, Button, Spin } from 'choerodon-ui';

import reqwest from 'reqwest';

const fakeDataUrl =
  'https://randomuser.me/api/?results=5&inc=name,gender,email,nat&noinfo';

class LoadMoreList extends React.Component {
  state = {
    loading: true,
    loadingMore: false,
    showLoadingMore: true,
    data: [],
  };

  componentDidMount() {
    this.getData((res) => {
      this.setState({
        loading: false,
        data: res.results,
      });
    });
  }

  getData = (callback) => {
    reqwest({
      url: fakeDataUrl,
      type: 'json',
      method: 'get',
      contentType: 'application/json',
      success: (res) => {
        callback(res);
      },
    });
  };

  onLoadMore = () => {
    this.setState({
      loadingMore: true,
    });
    this.getData((res) => {
      const data = this.state.data.concat(res.results);
      this.setState(
        {
```

## 竖排列表样式

通过设置itemLayout属性为vertical可实现竖排列表样式。

#### choerodon ui part 0

- 156
- 156
- 2

#### choerodon ui part 1

- 156
- 156
- 2

#### choerodon ui part 2

- 156
- 156
- 2

#### choerodon ui part 3

- 156
- 156
- 2

#### choerodon ui part 4

- 156
- 156
- 2

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { List, Avatar, Icon } from 'choerodon-ui';

const listData = [];
for (let i = 0; i < 5; i += 1) {
  listData.push({
    href: 'https://open-hand.github.io/choerodon-ui/',
    title: `choerodon ui part ${i}`,
    avatar: 'https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png',
    description:
      'Choerodon UI, An enterprise-class UI design language and React-based implementation.',
    content:
      'We supply a series of design principles, practical patterns and high quality design resources (Sketch and Axure), to help people create their product prototypes beautifully and efficiently.',
  });
}

const pagination = {
  pageSize: 10,
  current: 1,
  total: listData.length,
  onChange: () => {},
};

const IconText = ({ type, text }) => (
  <span>
    <Icon type={type} style={{ marginRight: 8 }} />
    {text}
  </span>
);

ReactDOM.render(
  <List
    itemLayout="vertical"
    size="large"
    pagination={pagination}
    dataSource={listData}
    renderItem={(item) => (
      <List.Item
        key={item.title}
        actions={[
          <IconText key="star-o" type="star-o" text="156" />,
          <IconText key="like-o" type="like-o" text="156" />,
          <IconText key="message" type="message" text="2" />,
        ]}
        extra={
          <img
            width={272}
            alt="logo"
            src="https://gw.alipayobjects.com/zos/rmsportal/mqaQswcyDLcXyDKnZfES.png"
          />
        }
      >
        <List.Item.Meta
          avatar={<Avatar src={item.avatar} />}
          title={<a href={item.href}>{item.title}</a>}
          description={item.description}
        />
        {item.content}
      </List.Item>
    )}
  />,
  document.getElementById('container'),
);
```

## 栅格列表

可以通过设置List的grid属性来实现栅格列表，column可设置期望显示的列数。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { List, Card } from 'choerodon-ui';

const data = [
  {
    title: 'Title 1',
  },
  {
    title: 'Title 2',
  },
  {
    title: 'Title 3',
  },
  {
    title: 'Title 4',
  },
];

ReactDOM.render(
  <List
    grid={{ gutter: 16, column: 4 }}
    dataSource={data}
    renderItem={item => (
      <List.Item>
        <Card title={item.title}>Card content</Card>
      </List.Item>
    )}
  />,
  document.getElementById('container'));
```

## 响应式的栅格列表

响应式的栅格列表。尺寸与Layout Grid保持一致。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { List, Card } from 'choerodon-ui';

const data = [
  {
    title: 'Title 1',
  },
  {
    title: 'Title 2',
  },
  {
    title: 'Title 3',
  },
  {
    title: 'Title 4',
  },
  {
    title: 'Title 5',
  },
  {
    title: 'Title 6',
  },
];

ReactDOM.render(
  <List
    grid={{ gutter: 16, xs: 1, sm: 2, md: 4, lg: 4, xl: 6, xxl: 3 }}
    dataSource={data}
    renderItem={item => (
      <List.Item>
        <Card title={item.title}>Card content</Card>
      </List.Item>
    )}
  />,
  document.getElementById('container'));
```

## 绑定数据源

通过绑定数据源实现列表。开启勾选项 DataSet 必须指定 primaryKey 来确定勾选项的值。

#### 彭霞

#### 孔秀兰

#### 孟艳

#### 邱芳

#### 叶芳

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { List, Avatar } from 'choerodon-ui';
import { DataSet } from 'choerodon-ui/pro';

class App extends React.Component {
  ds = new DataSet({
    autoQuery: true,
    name: 'user',
    primaryKey: 'name',
    pageSize: 5,
    events: {
      select: ({ dataSet, record, previous }) => {
        console.log('select', { dataSet, record, previous });
      },
      unSelect: ({ dataSet, record, previous }) => {
        console.log('unSelect', { dataSet, record, previous });
      },
    },
  });

  render() {
    return (
      <List
        dataSet={this.ds}
        rowKey="name"
        renderItem={({ record }) => (
          <List.Item>
            <List.Item.Meta
              avatar={<Avatar>Choerodon</Avatar>}
              title={
                <a href="https://choerodon.github.io/choerodon-ui/">
                  {record.get('name')}
                </a>
              }
              description="Choerodon"
            />
          </List.Item>
        )}
      />
    );
```

## 可勾选列表

通过配置 rowSelection 实现可勾选列表。

#### Choerodon UI Title 1

#### Choerodon UI Title 2

#### Choerodon UI Title 3

#### Choerodon UI Title 4

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { List, Avatar } from 'choerodon-ui';

const data = [
  {
    id: 1,
    title: 'Choerodon UI Title 1',
  },
  {
    id: 2,
    title: 'Choerodon UI Title 2',
  },
  {
    id: 3,
    title: 'Choerodon UI Title 3',
  },
  {
    id: 4,
    title: 'Choerodon UI Title 4',
  },
];

ReactDOM.render(
  <List
    itemLayout="horizontal"
    dataSource={data}
    rowSelection
    renderItem={(item) => (
      <List.Item value={item.id}>
        <List.Item.Meta
          avatar={<Avatar>Choerodon</Avatar>}
          title={
            <a href="https://choerodon.github.io/choerodon-ui/">{item.title}</a>
          }
          description="Choerodon"
        />
```

## API

### List

| 属性名 | 说明 | 类型/默认值 |
| --- | --- | --- |
| bordered | 是否展示边框 | 类型boolean默认值false |
| footer | 列表底部 | 类型string\|ReactNode默认值- |
| empty | 当数据源为空时显示的内容 | 类型string\|ReactNode默认值- |
| grid | 列表栅格配置 | 类型object默认值- |
| header | 列表头部 | 类型string\|ReactNode默认值- |
| itemLayout | 设置List.Item布局, 设置成vertical则竖直样式显示, 默认横排 | 类型string默认值- |
| loading | 当卡片内容还在加载中时，可以用loading展示一个占位 | 类型boolean\|object默认值false |
| loadMore | 加载更多 | 类型string\|ReactNode默认值- |
| pagination | 对应的pagination配置, 设置false不显示 | 类型boolean\|object默认值false |
| size | list 的尺寸 | 类型default\|large\|small默认值default |
| split | 是否展示分割线 | 类型boolean默认值true |

### List grid props

| 属性名 | 说明 | 类型/默认值 |
| --- | --- | --- |
| column | 列数 | 类型number默认值- |
| gutter | 栅格间隔 | 类型number默认值0 |
| xs | <576px展示的列数 | 类型number默认值- |
| sm | ≥576px展示的列数 | 类型number默认值- |
| md | ≥768px展示的列数 | 类型number默认值- |
| lg | ≥992px展示的列数 | 类型number默认值- |
| xl | ≥1200px展示的列数 | 类型number默认值- |
| xxl | ≥1600px展示的列数 | 类型number默认值- |

### List.Item

| 属性名 | 说明 | 类型/默认值 |
| --- | --- | --- |
| actions | 列表操作组，根据itemLayout的不同, 位置在卡片底部或者最右侧 | 类型Array<ReactNode>默认值- |
| extra | 额外内容, 通常用在itemLayout为vertical的情况下, 展示右侧内容;horizontal展示在列表元素最右侧 | 类型string\|ReactNode默认值- |

### List.Item.Meta

| 属性名 | 说明 | 类型/默认值 |
| --- | --- | --- |
| avatar | 列表元素的图标 | 类型ReactNode默认值- |
| description | 列表元素的描述内容 | 类型string\|ReactNode默认值- |
| title | 列表元素的标题 | 类型string\|ReactNode默认值- |

### Pagination

| 属性名 | 说明 | 类型/默认值 |
| --- | --- | --- |
| current | 当前页数 | 类型number默认值- |
| defaultCurrent | 默认的当前页数 | 类型number默认值1 |
| defaultPageSize | 默认的每页条数 | 类型number默认值10 |
| hideOnSinglePage | 只有一页时是否隐藏分页器 | 类型boolean默认值false |
| itemRender | 用于自定义页码的结构，可用于优化 SEO | 类型(page, type: 'page' 'prev' 'next', originalElement) => React.ReactNode默认值- |
| pageSize | 每页条数 | 类型number默认值- |
| pageSizeOptions | 指定每页可以显示多少条 | 类型string[]默认值['10', '20', '30', '40'] |
| showQuickJumper | 是否可以快速跳转至某页 | 类型boolean默认值false |
| showSizeChanger | 是否可以改变 pageSize | 类型boolean默认值false |
| showTotal | 用于显示数据总量和当前数据顺序 | 类型Function(total, range)默认值- |
| simple | 当添加该属性时，显示为简单分页 | 类型boolean默认值- |
| tiny | 当添加该属性时，显示为简单分页 | 类型boolean默认值true |
| size | 当为「small」时，是小尺寸分页 | 类型string默认值"" |
| total | 数据总数 | 类型number默认值0 |
| onChange | 页码改变的回调，参数是改变后的页码及每页条数 | 类型Function(page, pageSize)默认值noop |
| onShowSizeChange | pageSize 变化的回调 | 类型Function(current, size)默认值noop |

### rowSelection

| 属性名 | 说明 | 类型/默认值 |
| --- | --- | --- |
| selectedRowKeys | 指定选中项的 key 数组，需要和 onChange 进行配合 | 类型string[] number[]默认值- |
| defaultSelectedRowKeys | 默认选中项的 key 数组 | 类型string[] number[] |
| onChange | 选中项发生变化时的回调 | 类型function(selectedRowKeys)默认值- |



================================================================================
文件: LocaleContext.md
路径: doc\LocaleContext.md
================================================================================

# LocaleContext 国际化

为组件内建文案提供统一的国际化支持。

## 使用

```jsx
import { localeContext } from 'choerodon-ui/pro';
import zh_CN from 'choerodon-ui/pro/lib/locale-context/zh_CN';
import 'moment/locale/zh-cn';

localeContext.setLocale(zh_CN);
```

我们提供了英语，英语(美)，中文，日语支持，所有语言包可以在这里找到。

注意：如果你需要使用 UMD 版的 dist 文件，应该引入choerodon-ui/pro/dist/choerodon-ui/pro-with-locales.js，同时引入 moment 对应的 locale，然后按以下方式使用：

```jsx
const { localeContext, locales } = window['choerodon-ui/pro'];

...

localeContext.setLocale(zh_CN);
```

注意：设置 IntlField 多语言输入。注意一般是在整个项目外层设置语言支持，不推荐在业务组件中使用，因为会修改全局的支持情况。

```jsx
import { localeContext } from 'choerodon-ui/pro';

...

localeContext.setSupport({zh_CN: '简体中文',en_GB: 'English',en_US: 'English(US)',ja_JP:'日本語');
```

### 增加语言包

如果你找不到你需要的语言包，欢迎你在简体中文语言包的基础上创建一个新的语言包，并给我们 Pull Request。

## API Methods

| 方法 | 说明 | 参数类型/默认值/版本 |
| --- | --- | --- |
| setLocale(locale) | 语言包可以在此找到 choerodon-ui/pro/lib/locale-context/ | 参数类型object默认值choerodon-ui/pro/lib/locale-context/zh_CN |
| setNumberFormatLanguage(lang) | 数字格式化使用的国际化语言编码，若未设置则使用locale.lang。数字格式化详见Intl.NumberFormat | 参数类型string版本1.1.0 |
| setSupports(supports) | IntlField 支持语言，默认 jaJP,enGB,enUS,zhCNchoerodon-ui/pro/lib/locale-context/supports | 参数类型object默认值{ zhCN: '简体中文', enGB: 'English', en_US: 'English(US)' |



================================================================================
文件: LocaleProvider.md
路径: doc\LocaleProvider.md
================================================================================

# LocaleProvider 国际化

为组件内建文案提供统一的国际化支持。

## 使用

LocaleProvider 使用 React 的context特性，只需在应用外围包裹一次即可全局生效。

```jsx
import { LocaleProvider } from 'choerodon-ui';
import zh_CN from 'choerodon-ui/lib/locale-provider/zh_CN';
import 'moment/locale/zh-cn';

...

return <LocaleProvider locale={zh_CN}><App /></LocaleProvider>;
```

我们提供了英语，中文，俄语，法语，德语等多种语言支持，所有语言包可以在这里找到。

注意：如果你需要使用 UMD 版的 dist 文件，应该引入choerodon-ui/dist/choerodon-ui-with-locales.js，同时引入 moment 对应的 locale，然后按以下方式使用：

```jsx
const { LocaleProvider, locales } = window['choerodon-ui'];

...

return <LocaleProvider locale={locales.en_US}><App /></LocaleProvider>;
```

### 增加语言包

如果你找不到你需要的语言包，欢迎你在英文语言包的基础上创建一个新的语言包，并给我们 Pull Request。

### 其他国际化需求

本模块仅用于组件的内建文案，若有业务文案的国际化需求，建议使用react-intl，可参考示例：Intl demo 1和Intl demo 2。

## 代码演示

## 国际化

用LocaleProvider包裹你的应用，并引用对应的语言包。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Pagination, LocaleProvider } from 'choerodon-ui';
import enUS from 'choerodon-ui/lib/locale-provider/en_US';

const App = () => (
  <div>
    <Pagination defaultCurrent={1} total={50} showSizeChanger />
  </div>
);

ReactDOM.render(
  <LocaleProvider locale={enUS}>
    <App />
  </LocaleProvider>,
  document.getElementById('container'));
```

## 所有组件

此处列出 Choerodon UI 中需要国际化支持的组件，你可以在演示里切换语言。

- Items / page10
- 1 - 10 / 50



| Su | Mo | Tu | We | Th | Fr | Sa |
| --- | --- | --- | --- | --- | --- | --- |
| 29 | 30 | 01 | 02 | 03 | 04 | 05 |
| 06 | 07 | 08 | 09 | 10 | 11 | 12 |
| 13 | 14 | 15 | 16 | 17 | 18 | 19 |
| 20 | 21 | 22 | 23 | 24 | 25 | 26 |
| 27 | 28 | 29 | 30 | 31 | 01 | 02 |
| 03 | 04 | 05 | 06 | 07 | 08 | 09 |


```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import {
  LocaleProvider,
  Pagination,
  DatePicker,
  TimePicker,
  Calendar,
  Popconfirm,
  Table,
  Modal,
  Button,
  Select,
  Transfer,
  Radio,
} from 'choerodon-ui';
import zhCN from 'choerodon-ui/lib/locale-provider/zh_CN';
import moment from 'moment';
import 'moment/locale/zh-cn';

moment.locale('en');

const { Option } = Select;
const { RangePicker } = DatePicker;

const columns = [
  {
    title: 'Name',
    dataIndex: 'name',
    filters: [
      {
        text: 'filter1',
        value: 'filter1',
      },
    ],
  },
  {
    title: 'Age',
    dataIndex: 'age',
  },
];

class Page extends React.Component {
  state = {
    visible: false,
  };

  showModal = () => {
    this.setState({ visible: true });
  };

  hideModal = () => {
    this.setState({ visible: false });
  };

  render() {
    const info = () => {
      Modal.info({
        title: 'some info',
        content: 'some info',
      });
    };
    const confirm = () => {
      Modal.confirm({
        title: 'some info',
```

## API

| 属性名 | 说明 | 类型/默认值 |
| --- | --- | --- |
| locale | 语言包配置，语言包可到choerodon-ui/lib/locale-provider/目录下寻找 | 类型object默认值- |



================================================================================
文件: Lov.md
路径: doc\Lov.md
================================================================================

# Lov 弹出选择输入框

大数据值集取值表单控件，弹出选择输入框。

## 何时使用

当用户需要从大数据列表中取值。

需结合后端值集接口，配置对应字段属性。Lov 相关教程，优先级高于视图配置的属性开发者慎重修改，避免配置修改造成不一致。

## 代码演示

## 数据源

绑定数据源。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, Lov, Row, Col } from 'choerodon-ui/pro';
import { Divider } from 'choerodon-ui';

function handleDataSetChange({ record, name, value, oldValue }) {
  console.log(
    '[dataset]',
    value,
    '[oldValue]',
    oldValue,
    `[record.get('${name}')]`,
    record.get(name),
  );
}

class App extends React.Component {
  ds = new DataSet({
    autoCreate: true,
    fields: [
      {
        name: 'code',
        textField: 'code',
        type: 'object',
        lovCode: 'LOV_CODE',
        lovPara: { code: '111' },
        required: true,
      },
      {
```

## 多值

通过属性multiple设置为多值。

- 性别
- 员工状态
- Choerodon UI

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { configure } from 'choerodon-ui';
import { DataSet, Lov, message } from 'choerodon-ui/pro';

configure({
  lovQueryCachedSelected() {
    return Promise.resolve([{ code: 'c7n', description: 'Choerodon UI' }]);
  },
});

function handleDataSetChange({ record, name, value, oldValue }) {
  console.log(
    '[dataset multiple]',
    value,
    '[oldValue]',
    oldValue,
    `[record.get('${name}')]`,
    record.get(name),
  );
}

class App extends React.Component {
  ds = new DataSet({
    primaryKey: 'code',
    data: [
      {
        code_code: 'HR.EMPLOYEE_GENDER, HR.EMPLOYEE_STATUS, c7n',
```

## LOV级联

LOV 级联。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, Lov, Select, Row, Col } from 'choerodon-ui/pro';

function handleDataSetChange({ record, value, oldValue }) {
  console.log(
    '[dataset newValue]',
    value,
    '[oldValue]',
    oldValue,
    '[record.toJSONData()]',
    record.toJSONData(),
  );
}

class App extends React.Component {
  ds = new DataSet({
    fields: [
      {
        name: 'mySex',
        type: 'string',
        label: '性别',
        lookupCode: 'HR.EMPLOYEE_GENDER',
      },
      {
        name: 'code',
        type: 'object',
        label: 'LOV',
```

## 按钮模式

按钮模式，可单独展示数据或按钮内展示。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, Lov, Output, Row, Col } from 'choerodon-ui/pro';

function handleDataSetChange({ record, name, value, oldValue }) {
  console.log(
    '[dataset]',
    value,
    '[oldValue]',
    oldValue,
    `[record.get('${name}')]`,
    record.get(name),
  );
}

class App extends React.Component {
  ds = new DataSet({
    autoCreate: true,
    fields: [
      {
        name: 'code',
        type: 'object',
        lovCode: 'LOV_CODE',
        lovPara: { code: '111' },
        required: true,
      },
      {
        name: 'code_string',
        type: 'object',
        lovCode: 'LOV_CODE',
        required: true,
      },
```

## 失焦触发搜索

搜索触发变更的动作，默认 input 触发，支持 blur。


```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, Lov } from 'choerodon-ui/pro';

function handleDataSetChange({ record, name, value, oldValue }) {
  console.log(
    '[dataset multiple]',
    value,
    '[oldValue]',
    oldValue,
    `[record.get('${name}')]`,
    record.get(name),
  );
}

class App extends React.Component {
  ds = new DataSet({
    primaryKey: 'code',
    autoCreate: true,
    fields: [
      {
        name: 'code',
        type: 'object',
        lovCode: 'LOV_MOCK_CODE',
        multiple: true,
        required: true,
      },
    ],
    cacheSelection: true,
    selection: 'multiple',
    events: {
      update: handleDataSetChange,
```

## 树形数据

树形数据, LovConfig 配置中需要有 treeFlag、parentIdField、idField， 如果配置无法辨别是否是树形， 可以给 tableProps 加上 mode: 'tree'，以及 dataSetProps 加上 parentField 和 idField。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, Form, Lov, SelectBox } from 'choerodon-ui/pro';

const { Option } = SelectBox;

class App extends React.Component {
  state = {
    showCheckedStrategy: 'SHOW_ALL',
  };

  ds = new DataSet({
    autoCreate: true,
    fields: [
      {
        name: 'code',
        type: 'object',
        lovCode: 'LOV_TREE_CODE',
      },
      { name: 'code_code', type: 'string', bind: 'code.code' },
      { name: 'code_description', type: 'string', bind: 'code.description' },
    ],
  });

  ds2 = new DataSet({
    autoCreate: true,
    fields: [
      {
        name: 'code',
        type: 'object',
        lovCode: 'LOV_TREE_CODE',
        multiple: true,
```

## Lov配置覆盖

Lov 组件内关联的内置 DataSet 配置可通过 optionsProps 进行覆盖。可实现监听值集数据源事件、阻止查询、修改配置等功能。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, Lov, Row, Col } from 'choerodon-ui/pro';
import { Divider } from 'choerodon-ui';

function handleDataSetChange({ record, name, value, oldValue }) {
  console.log(
    '[dataset]',
    value,
    '[oldValue]',
    oldValue,
    `[record.get('${name}')]`,
    record.get(name),
  );
}

class App extends React.Component {
  ds = new DataSet({
    autoCreate: true,
    fields: [
      {
        name: 'code',
        type: 'object',
        lovCode: 'LOV_CODE',
        optionsProps: (dsProps) => {
          console.log(dsProps);
          return {
            ...dsProps,
            // 修改值集配置，取消分页
```

## 其他模式

其他展示模式，popup & drawer

- Choerodon UI



```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, Row, Col, Lov, Tree } from 'choerodon-ui/pro';

function nodeRenderer({ record }) {
  return record.get('text');
}

const App = () => {
  const ds = React.useMemo(
    () =>
      new DataSet({
        autoCreate: true,
        fields: [
          {
            name: 'popup_code',
            textField: 'code',
            type: 'object',
            lovCode: 'LOV_CODE',
            required: true,
          },
          {
            name: 'popup_code_string',
            type: 'object',
            lovCode: 'LOV_CODE',
            multiple: true,
            defaultValue: [{ description: 'Choerodon UI', code: 'c7n' }],
          },
          {
            name: 'drawer_code',
            textField: 'code',
            type: 'object',
            lovCode: 'LOV_CODE',
            multiple: true,
            required: true,
          },
          {
```

## 查看详情

只读支持查看详情，不分页查询。需要后端支持。

- 性别
- 员工状态

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, Lov, message } from 'choerodon-ui/pro';

class App extends React.Component {
  ds = new DataSet({
    primaryKey: 'code',
    data: [
      // { 'code_code': 'HR.EMPLOYEE_GENDER, HR.EMPLOYEE_STATUS, SYS.USER_STATUS11' , 'code_description': '性别,员工状态,SYS.USER_STATUS11' },
      {
        code_code: 'HR.EMPLOYEE_GENDER,HR.EMPLOYEE_STATUS',
        code_description: '性别,员工状态',
      },
    ],
    fields: [
      {
        name: 'code',
        type: 'object',
        lovCode: 'LOV_CODE',
        multiple: true,
        lovQueryAxiosConfig: (code, lovConfig, props, lovQueryUrl) => {
          console.log('lovQueryAxiosConfig', props);
          const { params, lovQueryDetail } = props || {};
          let defaultUrl = `/common/lov/dataset/${code}${
            code === 'LOV_CODE' && params
              ? `/${params.pagesize}/${params.page}`
              : ''
          }`;
          defaultUrl = lovQueryDetail
```

## API

| 属性名 | 说明 | 类型/默认值/版本 |
| --- | --- | --- |
| modalProps | 弹窗属性，详见ModalProps，优先级高于视图配置 | 类型object |
| tableProps | 表格属性，详见TableProps，优先级高于视图配置（modal 参数仅在模态框模式下存在） | 类型object (lovTablePropsConfig, modal) => object |
| noCache | 弹窗时自动重新查询 | 类型string\| boolean默认值false |
| mode | 显示模式，可选值: default \| button | 类型string默认值default |
| searchMatcher | 搜索器。当为字符串时，作为 lookup 的参数名来重新请求值列表。 | 类型string ({ record, text, textField, valueField }) => boolean默认值({ textField record.get(textField).indexOf(text) !== -1 |
| paramMatcher | 参数匹配器。当为字符串时，进行参数拼接。 | 类型string ({ record, text, textField, valueField }) => string |
| searchAction | 搜索触发变更的动作, 可选值：blur \| input， | 类型string默认值input |
| fetchSingle | searchAction 为 blur 时生效，获取记录有重复时弹出选择窗口 | 类型boolean默认值false版本1.1.1 |
| autoSelectSingle | 点击查询仅存在一条数据时自动选中 | 类型boolean默认值false版本1.3.2 |
| showCheckedStrategy | 定义选中项回填的方式。SHOWCHILD: 只显示子节点. SHOWPARENT: 只显示父节点(当父节点下所有子节点都选中时). 默认显示所有选中节点(包括父节点). | 类型string默认值SHOW_ALL版本1.4.2 |
| onBeforeSelect | 确认勾选前回调，返回 false 弹窗不关闭。支持返回一个 Promise 对象(1.5.6)，Promise 对象 resolve(false) 或 reject 时弹窗不关闭。 | 类型(records: Record Record[]) => boolean undefined版本1.4.4 |
| onSearchMatcherChange | viewMode 为 popup 时，查询条选项值变更事件 | 类型(searchMatcher?:string) => void undefined版本1.5.0-beta.0 |
| viewRenderer | 自定义弹窗视图渲染器 | 类型({ dataSet, lovConfig, textField, valueField, multiple, modal}) => ReactNode版本1.5.0 |
| viewMode | 弹窗视图渲染模式，可选值：modal \| drawer \| popup | 类型string默认值modal |
| nodeRenderer | 树形展示节点渲染器 | 类型(record: Record) => ReactNode版本1.5.0 |
| showSelectedInView | 多选时，viewMode 为 modal 或 drawer，在对话框中显示已选记录(TableProps 的 showSelectionTips会被设置为 false) | 类型boolean版本1.5.0 |
| selectionProps | 显示已选记录时的参数，详情见selectionProps | 类型object版本1.5.1 |
| popupSearchMode | viewMode 为 popup 时，查询条件显示位置 | 类型PopupSearchMode: 'single', 'multiple'默认值multiple版本1.5.7 |
| showDetailWhenReadonly | 组件为 readOnly 或 disabled 时，可点击后缀查看选中项详情(需值集支持详情查询) | 类型boolean版本1.6.6 |

### selectionProps

1.5.1 版本新增属性。

| 属性名 | 说明 | 类型/默认值 |
| --- | --- | --- |
| nodeRenderer | 节点渲染器 | 类型(record: Record) => ReactNode |
| placeholder | 已选记录为空时的默认文案 | 类型string ReactNode |

更多属性请参考Select,TextField,Button。

## Q & A

### Lov多选时输入框显示过长

参考Select maxTagCount说明，Lov 相同。

### 如何配置一个树形 Lov

参考Lov 树形教程示例。

### Lov 搜索下拉弹出规则

参考Lov 搜索下拉菜单弹出规则。



================================================================================
文件: Mentions.md
路径: doc\Mentions.md
================================================================================

# Mentions 提及

## 何时使用

用于在输入中提及某人或某事，常用于发布、聊天或评论功能。

1.5.2 版本新增组件。

## 代码演示

## 基本使用

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Mentions } from 'choerodon-ui/pro';

const { Option, getMentions } = Mentions;

function onChange(value) {
  console.log('Change:', value);

  console.log('getMentions: ', value && getMentions(value));
}

function onSelect(option, mentionsKey) {
  console.log('select:', option, 'mentionsKey:', mentionsKey);
}

ReactDOM.render(
  <Mentions
    style={{ width: '100%' }}
    onChange={onChange}
    onSelect={onSelect}
    defaultValue="@mike"
  >
    <Option value="mike">mike</Option>
    <Option value="jason">jason</Option>
    <Option value="Kevin">Kevin</Option>
  </Mentions>,
  document.getElementById('container'),
```

## 异步加载

匹配内容列表为异步返回时。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Mentions } from 'choerodon-ui/pro';
import { debounce } from 'lodash';

const { Option } = Mentions;

class AsyncMention extends React.Component {
  constructor() {
    super();

    this.loadGithubUsers = debounce(this.loadGithubUsers, 800);
  }

  state = {
    search: '',
    loading: false,
    users: [],
  };

  onSearch = (search) => {
    this.setState({ search, loading: !!search, users: [] });
    console.log('Search:', search);
    this.loadGithubUsers(search);
  };

  loadGithubUsers(key) {
    if (!key) {
```

## 自定义触发字符

通过mentionsKey属性自定义触发字符。默认为@, 可以定义为数组。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Mentions } from 'choerodon-ui/pro';

const { Option } = Mentions;

const MOCK_DATA = {
  '@': ['mike', 'jason', 'Kevin'],
  '#': ['1.0', '2.0', '3.0'],
};

class App extends React.Component {
  state = {
    mentionsKey: '@',
  };

  onSearch = (_, mentionsKey) => {
    this.setState({ mentionsKey });
  };

  render() {
    const { mentionsKey } = this.state;

    return (
      <Mentions
        style={{ width: '100%' }}
        placeholder="input @ to mention people, # to mention tag"
        mentionsKey={['@', '#']}
```

## 无效或只读

通过disabled属性设置是否生效。通过readOnly属性设置是否只读。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Mentions } from 'choerodon-ui/pro';

const { Option } = Mentions;

function getOptions() {
  return ['mike', 'jason', 'Kevin'].map((value) => (
    <Option key={value} value={value}>
      {value}
    </Option>
  ));
}

function App() {
  return (
    <>
      <div style={{ marginBottom: 10 }}>
        <Mentions
          style={{ width: '100%' }}
          placeholder="this is disabled Mentions"
          disabled
        >
          {getOptions()}
        </Mentions>
      </div>
      <Mentions
        style={{ width: '100%' }}
        placeholder="this is readOnly Mentions"
        readOnly
      >
        {getOptions()}
```

## 向上展开

向上展开建议。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Mentions } from 'choerodon-ui/pro';

const { Option } = Mentions;

ReactDOM.render(
  <Mentions style={{ width: '100%' }} placement="top">
    <Option value="mike">mike</Option>
    <Option value="jason">jason</Option>
    <Option value="Kevin">Kevin</Option>
  </Mentions>,
  document.getElementById('container'),
);
```

## 自动大小

自适应内容高度。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Mentions } from 'choerodon-ui/pro';

const { Option } = Mentions;

ReactDOM.render(
  <Mentions autoSize style={{ width: '100%' }}>
    <Option value="mike">mike</Option>
    <Option value="jason">jason</Option>
    <Option value="Kevin">Kevin</Option>
  </Mentions>,
  document.getElementById('container'),
);
```

## 受控模式

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Mentions } from 'choerodon-ui/pro';

const { Option, getMentions } = Mentions;

class App extends React.Component {
  state = {
    value: '@mike',
  };

  handleChange = (editorState) => {
    console.log(
      'getMentions: ',
      editorState && getMentions(editorState, { mentionsKey: '@', split: ' ' }),
    );

    this.setState({
      value: editorState,
    });
  };

  render() {
    const { value } = this.state;
    return (
      <Mentions
        style={{ width: '100%' }}
        onChange={this.handleChange}
```

## API

```jsx
<Mentions onChange={onChange}>
  <Mentions.Option value="sample">Sample</Mentions.Option>
</Mentions>
```

### Mentions API

| API | 说明 | 类型 |
| --- | --- | --- |
| getMentions | 根据输入值解析提及人的列表信息 | 类型Function(value: string, config?: mentionsKey?: string string[], split?: }): mentionsKey: value: }[] |

### Mentions

| 属性名 | 说明 | 类型/默认值 |
| --- | --- | --- |
| notFoundContent | 当下拉列表为空时显示的内容 | 类型ReactNode默认值无匹配结果。 |
| split | 设置选中项前后分隔符 | 类型string默认值' |
| transitionName | 动画名称，可选值：zoomfadeslide-upslide-downslide-leftslide-rightswingmove | 类型string |
| placement | 弹出层展示位置 | 类型top\|bottom |
| mentionsKey | 设置触发关键字 | 类型string string[]默认值@ |
| filterOption | 自定义过滤逻辑 | 类型false (input: string, option: OptionProps) => boolean |
| validateSearch | 自定义触发验证逻辑 | 类型(text: string, props: MentionsProps) => void |
| onSelect | 选择选项时触发 | 类型(option: OptionProps, mentionsKey: string) => void |
| onSearch | 搜索时触发 | 类型(text: string, mentionsKey: string) => void |
| getPopupContainer | 指定建议框挂载的 HTML 节点 | 类型(triggerNode: Element) => HTMLElement |
| loading | 是否正在加载选项 | 类型boolean |

### Option

| 属性名 | 说明 | 类型/默认值 |
| --- | --- | --- |
| value | 选择时填充的值 | 类型string |
| key | 唯一值 | 类型string |
| disabled | 是否禁用 | 类型boolean |
| children | 选项内容 | 类型ReactNode |
| className | 选项类名 | 类型string |
| style | 选项样式 | 类型CSSProperties |

更多属性请参考TextArea。



================================================================================
文件: Menu.md
路径: doc\Menu.md
================================================================================

# Menu 导航菜单

为页面和功能提供导航的菜单列表。

## 何时使用

导航菜单是一个网站的灵魂，用户依赖导航在各个页面中进行跳转。一般分为顶部导航和侧边导航，顶部导航提供全局性的类目和功能，侧边导航提供多级结构来收纳和排列网站架构。

更多布局和导航的使用可以参考：通用布局。

## 代码演示

## 顶部导航

水平的顶部导航菜单。

- Navigation One
- Navigation Two
- Navigation Three - Submenu
- Navigation Four - Link

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Menu, Icon } from 'choerodon-ui';

const SubMenu = Menu.SubMenu;
const MenuItemGroup = Menu.ItemGroup;

class App extends React.Component {
  state = {
    current: 'mail',
  };

  handleClick = (e) => {
    console.log('click ', e);
    this.setState({
      current: e.key,
    });
  };

  render() {
    return (
      <Menu
        onClick={this.handleClick}
        selectedKeys={[this.state.current]}
        mode="horizontal"
      >
        <Menu.Item key="mail">
          <Icon type="mail_outline" />
          Navigation One
```

## 内嵌菜单

垂直菜单，子菜单内嵌在菜单区域。

- Navigation OneItem 1Option 1Option 2Item 2Option 3Option 4
- Navigation Two
- Navigation Three

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Menu, Icon } from 'choerodon-ui';

const SubMenu = Menu.SubMenu;
const MenuItemGroup = Menu.ItemGroup;

class Sider extends React.Component {
  handleClick = e => {
    console.log('click ', e);
  };

  render() {
    return (
      <Menu
        onClick={this.handleClick}
        style={{ width: 256 }}
        defaultSelectedKeys={['1']}
        defaultOpenKeys={['sub1']}
        mode="inline"
      >
        <SubMenu
          key="sub1"
          title={
            <span>
              <Icon type="mail_outline" />
              <span>Navigation One</span>
            </span>
          }
        >
          <MenuItemGroup key="g1" title="Item 1">
            <Menu.Item key="1">Option 1</Menu.Item>
            <Menu.Item key="2">Option 2</Menu.Item>
          </MenuItemGroup>
          <MenuItemGroup key="g2" title="Item 2">
            <Menu.Item key="3">Option 3</Menu.Item>
            <Menu.Item key="4">Option 4</Menu.Item>
          </MenuItemGroup>
        </SubMenu>
        <SubMenu
          key="sub2"
          title={
            <span>
              <Icon type="apps" />
```

## 缩起内嵌菜单

内嵌菜单可以被缩起/展开。

你可以在Layout里查看侧边布局结合的完整示例。

- Option 1
- Option 2
- Option 3
- Navigation OneOption 5Option 6Option 7Option 8
- Navigation Two

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Menu, Icon, Button } from 'choerodon-ui';

const SubMenu = Menu.SubMenu;

class App extends React.Component {
  state = {
    collapsed: false,
  };

  toggleCollapsed = () => {
    this.setState({
      collapsed: !this.state.collapsed,
    });
  };

  render() {
    return (
      <div style={{ width: 256 }}>
        <Button type="primary" onClick={this.toggleCollapsed} style={{ marginBottom: 16 }}>
          <Icon type={this.state.collapsed ? 'folder_open' : 'folder'} />
        </Button>
        <Menu
          defaultSelectedKeys={['1']}
          defaultOpenKeys={['sub1']}
          mode="inline"
          inlineCollapsed={this.state.collapsed}
        >
          <Menu.Item key="1">
            <Icon type="pie_chart_outlined" />
            <span>Option 1</span>
          </Menu.Item>
          <Menu.Item key="2">
            <Icon type="desktop_windows" />
            <span>Option 2</span>
          </Menu.Item>
          <Menu.Item key="3">
            <Icon type="inbox" />
            <span>Option 3</span>
          </Menu.Item>
          <SubMenu
            key="sub1"
            title={
              <span>
                <Icon type="mail_outline" />
```

## 垂直菜单

子菜单是弹出的形式。

- Navigation One
- Navigation Two
- Navigation Three

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Menu, Icon } from 'choerodon-ui';

const SubMenu = Menu.SubMenu;
const MenuItemGroup = Menu.ItemGroup;

function handleClick(e) {
  console.log('click', e);
}

ReactDOM.render(
  <Menu onClick={handleClick} style={{ width: 256 }} mode="vertical">
    <SubMenu
      key="sub1"
      title={
        <span>
          <Icon type="mail_outline" />
          <span>Navigation One</span>
        </span>
      }
    >
      <MenuItemGroup title="Item 1">
        <Menu.Item key="1">Option 1</Menu.Item>
        <Menu.Item key="2">Option 2</Menu.Item>
      </MenuItemGroup>
      <MenuItemGroup title="Iteom 2">
        <Menu.Item key="3">Option 3</Menu.Item>
        <Menu.Item key="4">Option 4</Menu.Item>
      </MenuItemGroup>
    </SubMenu>
    <SubMenu
```

## 主题

内建了两套主题light|dark，默认light。

- Navigation OneOption 1Option 2Option 3Option 4
- Navigtion Two
- Navigation Three

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Menu, Icon, Switch } from 'choerodon-ui';

const SubMenu = Menu.SubMenu;

class Sider extends React.Component {
  state = {
    theme: 'dark',
    current: '1',
  }

  changeTheme = (value) => {
    this.setState({
      theme: value ? 'dark' : 'light',
    });
  }

  handleClick = (e) => {
    console.log('click ', e);
    this.setState({
      current: e.key,
    });
  }

  render() {
    return (
      <div>
        <Switch
          checked={this.state.theme === 'dark'}
          onChange={this.changeTheme}
          checkedChildren="Dark"
          unCheckedChildren="Light"
        />
        <br />
        <br />
        <Menu
          theme={this.state.theme}
          onClick={this.handleClick}
          style={{ width: 256 }}
          defaultOpenKeys={['sub1']}
          selectedKeys={[this.state.current]}
```

## 切换菜单类型

展示动态切换模式。

- Navigation One
- Navigation Two
- Navigation ThreeOption 3Option 4Submenu
- Navigation Four

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Menu, Icon, Switch } from 'choerodon-ui';

const { SubMenu } = Menu;

class Sider extends React.Component {
  state = {
    mode: 'inline',
  };

  changeMode = value => {
    this.setState({
      mode: value ? 'vertical' : 'inline',
    });
  };

  render() {
    return (
      <div>
        <Switch onChange={this.changeMode} /> Change Mode
        <span className="c7n-divider" style={{ margin: '0 1em' }} />
        <br />
        <br />
        <Menu
          style={{ width: 256 }}
          defaultSelectedKeys={['1']}
          defaultOpenKeys={['sub1']}
          mode={this.state.mode}
        >
          <Menu.Item key="1">
            <Icon type="mail_outline" />
            Navigation One
          </Menu.Item>
          <Menu.Item key="2">
            <Icon type="perm_contact_calendar" />
            Navigation Two
          </Menu.Item>
          <SubMenu
            key="sub1"
            title={
              <span>
```

## 只展开当前父级菜单

点击菜单，收起其他展开的所有菜单，保持菜单聚焦简洁。

- Navigation OneOption 1Option 2Option 3Option 4
- Navigation Two
- Navigation Three

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Menu, Icon } from 'choerodon-ui';

const SubMenu = Menu.SubMenu;

class Sider extends React.Component {
  // submenu keys of first level
  rootSubmenuKeys = ['sub1', 'sub2', 'sub4'];

  state = {
    openKeys: ['sub1'],
  };

  onOpenChange = openKeys => {
    const latestOpenKey = openKeys.find(key => this.state.openKeys.indexOf(key) === -1);
    if (this.rootSubmenuKeys.indexOf(latestOpenKey) === -1) {
      this.setState({ openKeys });
    } else {
      this.setState({
        openKeys: latestOpenKey ? [latestOpenKey] : [],
      });
    }
  };

  render() {
    return (
      <Menu
        mode="inline"
        openKeys={this.state.openKeys}
        onOpenChange={this.onOpenChange}
        style={{ width: 256 }}
      >
        <SubMenu
          key="sub1"
          title={
            <span>
              <Icon type="mail_outline" />
              <span>Navigation One</span>
            </span>
```

## API

```html
<Menu>
  <Menu.Item>菜单项</Menu.Item>
  <SubMenu title="子菜单">
    <Menu.Item>子菜单项</Menu.Item>
  </SubMenu>
</Menu>
```

### Menu

| 属性名 | 说明 | 类型/默认值 |
| --- | --- | --- |
| defaultOpenKeys | 初始展开的 SubMenu 菜单项 key 数组 |  |
| defaultSelectedKeys | 初始选中的菜单项 key 数组 | 类型string[] |
| forceSubMenuRender | 在子菜单展示之前就渲染进 DOM | 类型boolean默认值false |
| inlineCollapsed | inline 时菜单是否收起状态 | 类型boolean默认值- |
| inlineIndent | inline 模式的菜单缩进宽度 | 类型number默认值24 |
| mode | 菜单类型，现在支持垂直、水平、和内嵌模式三种 | 类型string:verticalvertical-righthorizontalinline默认值vertical |
| multiple | 是否允许多选 | 类型boolean默认值false |
| openKeys | 当前展开的 SubMenu 菜单项 key 数组 | 类型string[] |
| selectable | 是否允许选中 | 类型boolean默认值true |
| selectedKeys | 当前选中的菜单项 key 数组 | 类型string[] |
| style | 根节点样式 | 类型object |
| subMenuCloseDelay | 用户鼠标离开子菜单后关闭延时，单位：秒 | 类型number默认值0.1 |
| subMenuOpenDelay | 用户鼠标进入子菜单后开启延时，单位：秒 | 类型number默认值0 |
| theme | 主题颜色 | 类型string:lightdark默认值light |
| onClick | 点击 MenuItem 调用此函数 | 类型function({ item, key, keyPath })默认值- |
| onDeselect | 取消选中时调用，仅在 multiple 生效 | 类型function({ item, key, selectedKeys })默认值- |
| onOpenChange | SubMenu 展开/关闭的回调 | 类型function(openKeys: string[])默认值noop |
| onSelect | 被选中时调用 | 类型function({ item, key, selectedKeys })默认值无 |

More options inrc-menu

### Menu.Item

| 属性名 | 说明 | 类型/默认值 |
| --- | --- | --- |
| disabled | 是否禁用 | 类型boolean默认值false |
| key | item 的唯一标志 | 类型string |

### Menu.SubMenu

| 属性名 | 说明 | 类型/默认值 |
| --- | --- | --- |
| children | 子菜单的菜单项 | 类型Array<MenuItem\|SubMenu> |
| disabled | 是否禁用 | 类型boolean默认值false |
| key | 唯一标志 | 类型string |
| title | 子菜单项值 | 类型string\|ReactNode |
| onTitleClick | 点击子菜单标题 | 类型function({ key, domEvent }) |

### Menu.ItemGroup

| 属性名 | 说明 | 类型/默认值 |
| --- | --- | --- |
| children | 分组的菜单项 | 类型MenuItem[] |
| title | 分组标题 | 类型string\|ReactNode |

### Menu.Divider

菜单项分割线，只用在弹出菜单内。



================================================================================
文件: Message.md
路径: doc\Message.md
================================================================================

# Message 全局提示

全局展示操作反馈信息。

## 何时使用

- 可提供成功、警告和错误等反馈信息。
- 默认左下角（leftBottom）显示并自动消失，是一种不打断用户操作的轻量级提示方式。

## 代码演示

## 普通提示

信息提醒反馈。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { message, Button } from 'choerodon-ui';

const info = () => {
  message.info('This is a normal message');
};

ReactDOM.render(
  <Button type="primary" onClick={info}>Display normal message</Button>,
  document.getElementById('container'));
```

## 其他提示类型

包括成功、失败、警告。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { message, Button } from 'choerodon-ui';

message.config({
  top: '24px',
});

const success = () => {
  message.success('This is a message of success');
};

const error = () => {
  message.error('This is a message of error');
};

const warning = () => {
  message.warning('This is message of warning');
};

ReactDOM.render(
  <div>
    <Button onClick={success}>Success</Button>
    <Button onClick={error}>Error</Button>
    <Button onClick={warning}>Warning</Button>
  </div>,
  document.getElementById('container'));
```

## 修改延时

自定义时长10s，默认时长为3s。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { message, Button } from 'choerodon-ui';

const success = () => {
  message.success('This is a prompt message for success, and it will disappear in 10 seconds', 10);
};

ReactDOM.render(
  <Button onClick={success}>Customized display duration</Button>,
  document.getElementById('container'));
```

## 加载中

进行全局 loading，异步自行移除。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { message, Button } from 'choerodon-ui';

const success = () => {
  const hide = message.loading('Action in progress..', 0);
  // Dismiss manually and asynchronously
  setTimeout(hide, 2500);
};

ReactDOM.render(
  <Button onClick={success}>Display a loading indicator</Button>,
  document.getElementById('container'));
```

## 消息位置

定义消息位置。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { message, Button } from 'choerodon-ui';

const handleClick = (placement) => {
  message.destroy();
  message.config({
    top: 100,
    bottom: 100,
    duration: 5,
  });
  message.success(placement, undefined, undefined, placement);
};

ReactDOM.render(
  <div>
    <Button onClick={() => { handleClick('topLeft'); }}>topLeft</Button>
    <Button onClick={() => { handleClick('top'); }}>top</Button>
    <Button onClick={() => { handleClick('topRight'); }}>topRight</Button>
    <Button onClick={() => { handleClick('leftTop'); }}>leftTop</Button>
    <Button onClick={() => { handleClick('left'); }}>left</Button>
    <Button onClick={() => { handleClick('leftBottom'); }}>leftBottom</Button>
    <Button onClick={() => { handleClick('rightTop'); }}>rightTop</Button>
    <Button onClick={() => { handleClick('right'); }}>right</Button>
    <Button onClick={() => { handleClick('rightBottom'); }}>rightBottom</Button>
    <Button onClick={() => { handleClick('bottomLeft'); }}>bottomLeft</Button>
    <Button onClick={() => { handleClick('bottom'); }}>bottom</Button>
    <Button onClick={() => { handleClick('bottomRight'); }}>bottomRight</Button>
  </div>,
  document.getElementById('container'));
```

## Promise 接口

可以通过 then 接口在关闭后运行 callback 。以上用例将在每个 message 将要结束时通过 then 显示新的 message 。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { message, Button } from 'choerodon-ui';

const success = () => {
  message
    .loading('Action in progress..', 2.5)
    .then(() => message.success('Loading finished', 2.5))
    .then(() => message.info('Loading finished is finished', 2.5));
};

ReactDOM.render(
  <div>
    <Button onClick={success}>Display a sequence of message</Button>
  </div>,
  document.getElementById('container'),
);
```

## API

组件提供了一些静态方法，使用方式和参数如下：

- message.success(content, [duration], [onClose], placement)
- message.error(content, [duration], [onClose], placement)
- message.info(content, [duration], [onClose], placement)
- message.warning(content, [duration], [onClose], placement)
- message.warn(content, [duration], [onClose], placement)// alias of warning
- message.loading(content, [duration], [onClose], placement)

| 属性名 | 说明 | 类型/默认值 |
| --- | --- | --- |
| content | 提示内容 | 类型string\|ReactNode默认值- |
| duration | 自动关闭的延时，单位秒 | 类型number默认值3 |
| onClose | 关闭时触发的回调函数 | 类型Function默认值- |
| placement | 消息展示的位置, 可选值：topleftrightbottomtopLefttopRightbottomLeftbottomRightleftTopleftBottomrightToprightBottom | 类型string默认值leftBottom |

还提供了全局配置和全局销毁方法：

- message.config(options)
- message.destroy()

组件同时提供 promise 接口

1.5.1 版本支持

- message[level](content, [duration]).then(afterClose)
- message[level](content, [duration], onClose).then(afterClose)

其中message[level]是组件已经提供的静态方法。then接口返回值是 Promise 。

### message.config

```js
message.config({
  top: 100,
  duration: 2,
});
```

| 属性名 | 说明 | 类型/默认值 |
| --- | --- | --- |
| duration | 默认自动关闭延时，单位秒 | 类型number默认值3 |
| getContainer | 配置渲染节点的输出位置 | 类型() => HTMLElement默认值() document.body |
| top | 消息在顶部出现时距离顶部的位置 | 类型number默认值24 |
| bottom | 消息在底部出现时距离底部的位置 | 类型number默认值24 |
| placement | 消息展示的位置, 可选值：topleftrightbottomtopLefttopRightbottomLeftbottomRightleftTopleftBottomrightToprightBottom | 类型string默认值leftBottom |
| maxCount(1.5.0-beta.0) | 最大显示数, 超过限制时，最早的消息会被自动关闭 | 类型number |



================================================================================
文件: Modal.md
路径: doc\Modal.md
================================================================================

# Modal 模态框

- 支持多种交互，默认 Esc 键关闭弹窗、控制点击蒙层关闭、可调整大小、拖拽位置...
- 个性化，开启个性化配合接口保存位置信息、大小等
- 支持内嵌使用及穿越 iframe

## 何时使用

需要用户处理事务，又不希望跳转页面以致打断工作流程时，可以使用Modal在当前页面正中打开一个浮层，承载相应的操作。

另外当需要一个简洁的确认框询问用户时，可以使用Modal.confirm()等语法糖方法。

请预先在项目页面根节点外包裹ModalProvider，demo 中 APP 节点外包裹即可省略。

## 代码演示

## 基本使用

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { useModal, Button, ModalProvider } from 'choerodon-ui/pro';

const ModalContent = ({ modal }) => {
  modal.handleOk(() => {
    console.log('do OK');
    return false;
  });
  modal.handleCancel(() => {
    console.log('do Cancel');
    modal.close();
  });
  const toggleOkDisabled = React.useCallback(() => {
    modal.update({
      okProps: { disabled: !modal.props.okProps.disabled },
      okText: '保存',
    });
  }, []);
  console.log('modal', modal);

  return (
    <div>
      <p>Some contents...</p>
      <p>Some contents...</p>
      <p>Some contents...</p>
      <Button color="primary" onClick={modal.close}>
        custom button for close modal
```

## 异步关闭

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { useModal, Button, ModalProvider } from 'choerodon-ui/pro';

const App = () => {
  const Modal = useModal();

  const openModal = React.useCallback(() => {
    Modal.open({
      title: 'Synchronize',
      children: (
        <div>
          <p>Some contents...</p>
          <p>Some contents...</p>
          <p>Some contents...</p>
        </div>
      ),
      onOk: () =>
        new Promise((resolve) => {
          setTimeout(() => {
            resolve();
          }, 1000);
        }),
      onCancel: () =>
        new Promise((resolve, reject) => {
          setTimeout(() => {
            reject(new Error('error'));
          }, 1000);
```

## 自定义页脚

自定义页脚。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { useModal, Button, ModalProvider } from 'choerodon-ui/pro';

const App = () => {
  const Modal = useModal();

  const openModal = React.useCallback(() => {
    const modal = Modal.open({
      title: 'Custom Footer',
      children: (
        <div>
          <p>Some contents...</p>
          <p>Some contents...</p>
          <p>Some contents...</p>
        </div>
      ),
      footer: <Button onClick={closeModal}>关闭</Button>,
    });

    function closeModal() {
      modal.close();
    }
  }, [Modal]);

  const openNoFooter = React.useCallback(() => {
    Modal.open({
      title: 'No Footer',
```

## 多层

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { useModal, Button, Modal, ModalProvider } from 'choerodon-ui/pro';

const { confirm } = Modal;

const App = () => {
  const UseModal = useModal();

  const openSubModal = React.useCallback(async () => {
    return (await confirm('确认关闭？')) === 'ok';
  }, [UseModal]);

  const openModal = React.useCallback(() => {
    UseModal.open({
      title: 'Multilayer',
      children: (
        <div>
          <p>Some contents...</p>
          <p>Some contents...</p>
          <p>Some contents...</p>
        </div>
      ),
      onClose: openSubModal,
    });
  }, [UseModal, openSubModal]);

  return <Button onClick={openModal}>Open</Button>;
```

## 自定义坐标

自定义坐标。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { useModal, Button, ModalProvider } from 'choerodon-ui/pro';

const App = () => {
  const Modal = useModal();

  const openModal = React.useCallback(() => {
    Modal.open({
      title: 'No Footer',
      children: (
        <div>
          <p>Some contents...</p>
          <p>Some contents...</p>
          <p>Some contents...</p>
        </div>
      ),
      style: {
        left: 100,
        top: 200,
      },
    });
  }, [Modal]);

  return <Button onClick={openModal}>Open</Button>;
};

ReactDOM.render(
```

## 关闭按钮

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { useModal, Button, ModalProvider } from 'choerodon-ui/pro';

const App = () => {
  const Modal = useModal();

  const openModal = React.useCallback(() => {
    Modal.open({
      title: 'Close button',
      children: (
        <div>
          <p>Some contents...</p>
          <p>Some contents...</p>
          <p>Some contents...</p>
        </div>
      ),
      closable: true,
    });
  }, [Modal]);

  return <Button onClick={openModal}>Open</Button>;
};

ReactDOM.render(
  <ModalProvider>
    <App />
  </ModalProvider>,
```

## 确认框

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Modal, Button, ModalProvider } from 'choerodon-ui/pro';

function doConfirm() {
  Modal.confirm({
    title: 'Confirm',
    children: (
      <div>
        <p>Some contents...</p>
        <p>Some contents...</p>
        <p>Some contents...</p>
      </div>
    ),
  }).then((button) => {
    Modal.info(`Click ${button}`);
  });
}

function info() {
  Modal.info({
    title: 'This is title',
    children: '您的订单已经提交!',
  });
}

function success() {
  Modal.success('订单提交成功!');
```

## 全屏显示

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { useModal, Button, ModalProvider } from 'choerodon-ui/pro';

const App = () => {
  const Modal = useModal();

  const openModal = React.useCallback(() => {
    Modal.open({
      title: 'Full screen',
      children: (
        <div>
          <p>Some contents...</p>
          <p>Some contents...</p>
          <p>Some contents...</p>
        </div>
      ),
      fullScreen: true,
    });
  }, [Modal]);

  return <Button onClick={openModal}>Open</Button>;
};

ReactDOM.render(
  <ModalProvider>
    <App />
  </ModalProvider>,
```

## 多层抽屉

通过设定多个 drawer 类型的弹出框形成多层抽屉，可指定弹出层宽度，弹出动画。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { useModal, Button, ModalProvider } from 'choerodon-ui/pro';

const App = () => {
  const Modal = useModal();

  const openSubModal2 = React.useCallback(() => {
    return new Promise((resolve) => {
      Modal.open({
        title: 'Sub Mode 2',
        size: 'large',
        drawer: true,
        drawerTransitionName: 'slide-left',
        children: (
          <div>
            <p>Open Sub Modal2...</p>
            <p>Open Sub Modal2...</p>
          </div>
        ),
        onOk: resolve,
      });
    });
  }, [Modal]);

  const openSubModal1 = React.useCallback(() => {
    return new Promise((resolve) => {
      Modal.open({
```

## 更新渲染

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { useModal, Button, ModalProvider } from 'choerodon-ui/pro';

const ModalContent = ({ modal }) => {
  modal.handleOk(() => {
    console.log('do OK');
    return false;
  });
  modal.handleCancel(() => {
    console.log('do Cancel');
    modal.close();
  });
  const handleUpdate = React.useCallback(() => {
    modal.update({
      title: 'update',
      children: (
        <div>
          <p>update contents...</p>
        </div>
      ),
      okText: '保存',
      cancelText: '退出',
      onOk: () => modal.close(),
    });
  }, [modal]);

  return (
```

## destroyAll

destroyAll 销毁所有弹出的Modal框。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Modal, Button, ModalProvider } from 'choerodon-ui/pro';

function destroyAll() {
  Modal.destroyAll();
}

function destroyConfirm() {
  for (let i = 0; i < 4; i++) {
    setTimeout(() => {
      Modal.confirm({
        title: 'Confirm',
        children: <Button onClick={destroyAll}>Click to destroy all</Button>,
      });
    }, i * 600);
  }
}

ReactDOM.render(
  <Button onClick={destroyConfirm}>Open</Button>,
  document.getElementById('container'),
);
```

## 自定义遮罩样式

自定义遮罩样式

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { useModal, Button, Modal, ModalProvider } from 'choerodon-ui/pro';

const maskStyle = {
  backgroundColor: 'rgb(0, 193, 255,.3)',
};

const App = () => {
  const modal = useModal();

  const openModal = React.useCallback(
    (mask = true) => {
      (mask ? modal : Modal).open({
        title: mask ? 'Customized mask' : 'No mask',
        children: (
          <div>
            <p>Some contents...</p>
            <p>Some contents...</p>
            <p>Some contents...</p>
            {mask && <ModalProvider />}
            <Button onClick={openNoMask}>No mask</Button>
          </div>
        ),
        okText: '确定',
        maskStyle,
        mask,
        maskClosable: true,
```

## 穿越iframe

穿越 iframe, 跨域时不生效, 不支持 ModalProvider 提供的 modal， 保证顶层引入了 choerodon-ui/pro 的样式。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';

import { ModalProvider, Modal, Button, DatePicker } from 'choerodon-ui/pro';

const App = () => {
  const openModal = React.useCallback(() => {
    Modal.open({
      title: 'Across Iframe',
      children: <DatePicker required />,
      okText: '确定',
    });
  }, []);

  return (
    <>
      <Button onClick={openModal}>Open</Button>
    </>
  );
};

ReactDOM.render(
  <ModalProvider>
    <App />
  </ModalProvider>,
  document.getElementById('container'),
);
```

## 内嵌

可用于指定模态框所在的容器, 用于嵌入式模态框。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { useModal, Button, ModalProvider } from 'choerodon-ui/pro';

const ModalContent = () => {
  return (
    <div>
      <p>Some contents...</p>
      <p>Some contents...</p>
      <p>Some contents...</p>
    </div>
  );
};

const OpenModalButton = ({ children, drawer, autoCenter }) => {
  const Modal = useModal();
  const openModal = React.useCallback(() => {
    Modal.open({
      drawer,
      title: 'Basic',
      children: <ModalContent />,
      closeOnLocationChange: false,
      mask: !drawer,
      size: 'small',
      autoCenter,
    });
  }, [Modal]);

  return (
    <Button onClick={openModal} style={{ verticalAlign: 'top' }}>
      {children}
    </Button>
  );
};

const App = () => {
  const containerRef = React.useRef();
```

## 个性化

个性化，设置后默认将会存储调整大小后的宽高等个性化设置更改到 localStorage，如果要存储到后端, 请重写全局配置中的表格个性化钩子： customizedSave | customizedLoad。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { useModal, Button, ModalProvider } from 'choerodon-ui/pro';

const ModalContent = () => {
  return (
    <div>
      <p>Some contents...</p>
      <p>Some contents...</p>
      <p>Some contents...</p>
    </div>
  );
};

const App = () => {
  const Modal = useModal();

  const openModal = React.useCallback(
    (mode) => {
      Modal.open({
        title: 'Customized',
        children: <ModalContent />,
        drawer: mode === 'Drawer',
        resizable: true,
        customizable: true,
        customizedCode: `customized${mode}Code`,
      });
    },
```

## API

### Modal

| 属性名 | 说明 | 类型/默认值/版本 |
| --- | --- | --- |
| key | 唯一键， 当 destroyOnClose 为 false 时，必须指定 key。为了避免与其他 modal 的 key 重复，可通过 Modal.key()来获取唯一 key。 | 类型string |
| title | 标题 | 类型ReactNode |
| closable | 显示右上角关闭按钮 | 类型boolean默认值false |
| border | 默认 Modal 的头和脚有边框线 | 类型boolean默认值true |
| drawerBorder | 默认 drawer 的头和脚有边框线 | 类型boolean默认值true版本1.3.0 |
| movable | 可移动， drawer 无法移动 | 类型boolean默认值true |
| fullScreen | 全屏显示 | 类型boolean默认值false |
| maskClosable | 点击蒙层是否允许关闭，可选 boolean \| click \| dblclick | 类型boolean string默认值false |
| mask | 是否显示蒙层 | 类型boolean默认值true |
| maskStyle | 蒙层样式 | 类型CSSProperties |
| maskClassName | 蒙层自定义样式名 | 类型string |
| keyboardClosable | 按 esc 键是否允许关闭 | 类型boolean默认值true |
| destroyOnClose | 关闭时是否销毁 | 类型boolean默认值true |
| header | 头部内容 | 类型ReactNode 或(title: ReactNode, closeBtn: okBtn: cancelBtn: ReactNode) => ReactNode |
| footer | 底部内容 | 类型ReactNode (okBtn, cancelBtn, modal) => ReactNode |
| okText | 确认按钮文字 | 类型ReactNode默认值确定 |
| cancelText | 取消按钮文字 | 类型ReactNode默认值取消 |
| onClose | 关闭时回调，返回false \| Promise.resolve(false)或Promise.reject()不会关闭， 其他自动关闭 | 类型() => Promise<boolean> |
| onOk | 点击确定回调，返回false \| Promise.resolve(false)或Promise.reject()不会关闭， 其他自动关闭 | 类型() => Promise<boolean> |
| onCancel | 点击取消回调，返回false \| Promise.resolve(false)或Promise.reject()不会关闭， 其他自动关闭 | 类型() => Promise<boolean> |
| afterClose | 关闭后回调 | 类型() => void |
| drawer | 抽屉模式 | 类型boolean默认值false |
| drawerTransitionName | 抽屉模式使用的动画 | 类型string默认值'slide-right' |
| drawerOffset | 抽屉之间的位移距离 | 类型number默认值150 |
| okButton | 显示 ok 按钮 | 类型boolean默认值true |
| cancelButton | 显示 cancel 按钮 | 类型boolean |
| buttonTrigger | ok 和 cancel 按钮的触发方式 | 类型'click' 'mouseDown'默认值'click'版本1.6.5 |
| okCancel | 同时显示 ok 和 cancel 按钮，false 的时候只显示 ok 按钮 | 类型boolean默认值true |
| okFirst | ok 按钮是否排在第一个 | 类型boolean默认值true |
| okProps | ok 按钮属性 | 类型object |
| cancelProps | cancel 按钮属性 | 类型object |
| autoCenter | 是否居中显示 | 类型boolean默认值false |
| contentStyle | 内容样式 | 类型object版本1.0.0 |
| bodyStyle | 内容体样式 | 类型object版本1.0.0 |
| closeOnLocationChange | 路由变更时自动关闭, 注意必须要有一个设置了 location 的 ModalProvider。由 ModalProvider 提供的 Modal， 即使 closeOnLocationChange 设为 false 也会因其 ModalProvider 的销毁而被强制关闭 | 类型boolean默认值true版本1.3.2 |
| resizable | 是否可调整大小 | 类型boolean默认值false版本1.5.2 |
| customizable | 是否开启个性化 | 类型boolean默认值false版本1.5.2 |
| customizedCode | 个性化编码，设置后默认将会存储调整大小后的宽高等个性化设置更改到 localStorage，如果要存储到后端, 请重写全局配置中的表格个性化钩子： customizedSave \| customizedLoad | 类型string版本1.5.2 |
| transitionAppear | 是否开启 Modal 打开和关闭时的动画 | 类型boolean默认值true版本1.6.0 |
| beforeOpen | 弹框打开前回调 | 类型() => void版本1.6.4 |
| afterOpenChange | 打开和关闭 Modal 时动画结束后的回调 | 类型(open: boolean) => void版本1.6.4 |
| modalOkAndCancelIcon | Modal 确认和取消按钮是否展示icon。true 展示默认icon，false不展示，对象类型可以分别设置确认和取消icon | 类型boolean okIconType?: string boolean, cancelIconType?: boolean }版本1.6.6 |

### ModalProvider > v0.8.50

- 使用 Modal 前，需要在页面根节点外包裹ModalProvider。如果路由切换时要清空所有 Modal，需要在 ModalProvider 传入 location，如下所示。
- 如果 Modal 要获取 React Context，请在对应的 Context.Provider 子节点外包裹ModalProvider，并使用 ModalProvider 提供的 injectModal 或 useModal 来代替 Modal.open。

```jsxharmony
import { ModalProvider } from 'choerodon-ui/pro';
import { withRouter } from 'react-router';

@withRouter
class App extends React.Component {
  render() {
    const { location } = this.props;
    return (
      <ModalProvider location={location}>
        <Main />
      </ModalProvider>
    );
  }
}

render(<App />, mountNode);
```

### ModalContainer <= v0.8.50

- 使用 Modal 前，需要在页面 Root 内插入 ModalContainer。如果路由切换时要清空所有 Modal，需要在 ModalContiner 传入 location，如下所示。
- 如果 Modal 要获取 React Context，请将 ModalContainer 至于 Context.Provider 之下。
- 为了避免多个 ModalContainer 之间 Context 错乱， ModalContainer 务必作为第一个子元素使用。

```jsxharmony
import { ModalContainer } from 'choerodon-ui/pro';
import { withRouter } from 'react-router';

@withRouter
class App extends React.Component {
  render() {
    const { location } = this.props;
    return (
      <div>
        <ModalContainer location={location} />
        <Main />
      </div>
    );
  }
}

render(<App />, mountNode);
```

### Modal.open

Modal.open()返回一个对象，该对象具有如下方法：

| 名称 | 说明 | 属性名 |
| --- | --- | --- |
| close(destroy) | 关闭 | 属性名destroy 是否销毁 |
| open() | 打开 |  |
| update(props) | 更新 |  |

### Modal.preview

Modal.preview(props, modalProps) 图片预览, props参数如下

| 名称 | 说明 | 类型 |
| --- | --- | --- |
| list | 图片地址组 | 类型string[] |
| defaultIndex | list的index | 类型number |

### props.modal

Modal 会向内部组件注入 modal 对象，该对象具有如下属性与方法：

| 名称 | 说明 | 属性名 |
| --- | --- | --- |
| handleOk(callback) | 注册响应 ok 按钮的钩子，返回值为 false 将阻止关闭 | 属性名callback 钩子 |
| handleCancel(callback) | 注册响应 cancel 按钮的钩子，返回值为 false 将阻止关闭 | 属性名callback 钩子 |
| close(destroy) | 关闭 | 属性名destroy 是否销毁 |
| update(props) | 更新 |  |
| props | modal 的 props |  |



================================================================================
文件: ModalProvider.md
路径: doc\ModalProvider.md
================================================================================

# ModalProvider 模态框提供者

模态框提供者。

## 何时使用

配合 useModal 使用, 为弹窗提供上下文。

## 代码演示

## 基本使用

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import {
  ModalProvider,
  Modal,
  Button,
  injectModal,
  useModal,
} from 'choerodon-ui/pro';

const Context = React.createContext('');

const ModalContent = () => {
  const context = React.useContext(Context);
  const modal = useModal();
  return context ? (
    <>
      {`Modal with context<${context}>`}
      <Button onClick={() => openModal(modal, 'Inner level 2', 300)}>
        open new provider
      </Button>
    </>
  ) : (
    'Modal without context'
  );
};

const openModal = (modal, title, width) => {
```

## API

### ModalProvider

| 属性名 | 说明 | 类型 |
| --- | --- | --- |
| location | 路由的 location 对象。当设定了 location，路由变更时会自动清空所有已打开的 Modal | 类型{ pathname: string |
| getContainer(1.5.0) | 指定模态框所在的容器, 用于嵌入式模态框, 当为false时取当前ModalProvider的父节点元素。 参考： demo -modal#内嵌 | 类型false () => HTMLElement |



================================================================================
文件: Notification.md
路径: doc\Notification.md
================================================================================

# Notification 通知提醒框

全局展示通知提醒信息。

## 何时使用

在系统四个角显示通知提醒信息。经常用于以下情况：

- 较为复杂的通知内容。
- 带有交互的通知，给出用户下一步的行动点。
- 系统主动推送。

## 代码演示

## 基本

最简单的用法，4.5 秒后自动关闭。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Button, notification } from 'choerodon-ui';

const openNotification = () => {
  notification.open({
    message: 'Notification Title',
    description: 'This is the content of the notification. This is the content of the notification. This is the content of the notification.',
  });
};

ReactDOM.render(
  <Button type="primary" onClick={openNotification}>Open the notification box</Button>,
  document.getElementById('container'));
```

## 自动关闭的延时

自定义通知框自动关闭的延时，默认4.5s，取消自动关闭只要将该值设为0即可。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Button, notification } from 'choerodon-ui';

const openNotification = () => {
  const args = {
    message: 'Notification Title',
    description: 'I will never close automatically. I will be close automatically. I will never close automatically.',
    duration: 0,
  };
  notification.open(args);
};

ReactDOM.render(
  <Button type="primary" onClick={openNotification}>Open the notification box</Button>,
  document.getElementById('container'));
```

## 带有图标的通知提醒框

通知提醒框左侧有图标。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Button, notification } from 'choerodon-ui';

const openNotificationWithIcon = (type) => {
  notification[type]({
    message: 'Notification Title',
    description: 'This is the content of the notification. This is the content of the notification. This is the content of the notification.',
  });
};

ReactDOM.render(
  <div>
    <Button onClick={() => openNotificationWithIcon('success')}>Success</Button>
    <Button onClick={() => openNotificationWithIcon('info')}>Info</Button>
    <Button onClick={() => openNotificationWithIcon('warning')}>Warning</Button>
    <Button onClick={() => openNotificationWithIcon('error')}>Error</Button>
  </div>,
  document.getElementById('container'));
```

## 自定义按钮

自定义关闭按钮的样式和文字。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Button, notification } from 'choerodon-ui';

const close = () => {
  console.log('Notification was closed. Either the close button was clicked or duration time elapsed.');
};

const openNotification = () => {
  const key = `open${Date.now()}`;
  const btn = (
    <Button type="primary" size="small" onClick={() => notification.close(key)}>
      Confirm
    </Button>
  );
  notification.open({
    message: 'Notification Title',
    description: 'A function will be be called after the notification is closed (automatically after the "duration" time of manually).',
    btn,
    key,
    onClose: close,
  });
};

ReactDOM.render(
  <Button type="primary" onClick={openNotification}>
    Open the notification box
  </Button>,
```

## 自定义图标

图标可以被自定义。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Button, notification, Icon } from 'choerodon-ui';

const openNotification = () => {
  notification.open({
    message: 'Notification Title',
    description:
      'This is the content of the notification. This is the content of the notification. This is the content of the notification.',
    icon: <Icon type="insert_emoticon" style={{ color: '#108ee9' }} />,
  });
};

ReactDOM.render(
  <Button type="primary" onClick={openNotification}>
    Open the notification box
  </Button>,
  document.getElementById('container'),
);
```

## 位置

可以设置通知从右上角、右下角、左下角、左上角弹出。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Button, Select, notification } from 'choerodon-ui';

const { Option } = Select;
const options = ['topLeft', 'topRight', 'bottomLeft', 'bottomRight'];
const openNotification = () => {
  notification.open({
    message: 'Notification Title',
    description: 'This is the content of the notification. This is the content of the notification. This is the content of the notification.',
  });
};

ReactDOM.render(
  <div>
    <Select
      defaultValue="topRight"
      style={{ width: 120, marginRight: 10 }}
      onChange={(val) => {
        notification.config({
          placement: val,
        });
      }}
    >
      {options.map(val => <Option key={val} value={val}>{val}</Option>)}
    </Select>
    <Button
      type="primary"
```

## 自定义样式

使用 style 和 className 来定义样式。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Button, notification } from 'choerodon-ui';

const openNotification = () => {
  notification.open({
    message: 'Notification Title',
    description: 'This is the content of the notification. This is the content of the notification. This is the content of the notification.',
    style: {
      width: 600,
      marginLeft: 335 - 600,
    },
  });
};

ReactDOM.render(
  <Button type="primary" onClick={openNotification}>Open the notification box</Button>,
  document.getElementById('container'));
```

## 折叠显示

通过全局配置 foldCount 实现。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Button, notification } from 'choerodon-ui';

const openNotification = () => {
  notification.config({
    foldCount: 3,
  });
  notification.open({
    message: 'Notification Title',
    description:
      'This is the content of the notification. This is the content of the notification. This is the content of the notification.',
    duration: null,
    style: {
      width: 500,
    },
  });
};

ReactDOM.render(
  <Button type="primary" onClick={openNotification}>
    Open the notification box
  </Button>,
  document.getElementById('container'),
);
```

## API

- notification.success(config)
- notification.error(config)
- notification.info(config)
- notification.warning(config)
- notification.warn(config)
- notification.close(key: String)
- notification.destroy()

config 参数如下：

| 属性名 | 说明 | 类型/默认值 |
| --- | --- | --- |
| btn | 自定义关闭按钮 | 类型ReactNode默认值- |
| className | 自定义 CSS class | 类型string默认值- |
| description | 通知提醒内容，必选 | 类型string\|ReactNode默认值- |
| duration | 默认 4.5 秒后自动关闭，配置为 null 则不自动关闭 | 类型number默认值4.5 |
| icon | 自定义图标 | 类型ReactNode默认值- |
| key | 当前通知唯一标志 | 类型string默认值- |
| message | 通知提醒标题，必选 | 类型string\|ReactNode默认值- |
| placement | 弹出位置，可选topLefttopRightbottomLeftbottomRight | 类型string默认值topRight |
| style | 自定义内联样式 | 类型React.CSSProperties默认值- |
| onClose | 点击默认关闭按钮时触发的回调函数 | 类型Function默认值- |

还提供了一个全局配置方法，在调用前提前配置，全局一次生效。

- notification.config(options)

```js
notification.config({
  placement: 'bottomRight',
  bottom: 50,
  duration: 3,
});
```

| 属性名 | 说明 | 类型/默认值 |
| --- | --- | --- |
| bottom | 消息从底部弹出时，距离底部的位置，单位像素。 | 类型number默认值24 |
| duration | 默认自动关闭延时，单位秒 | 类型number默认值4.5 |
| getContainer | 配置渲染节点的输出位置 | 类型() => HTMLNode默认值() document.body |
| placement | 弹出位置，可选topLefttopRightbottomLeftbottomRight | 类型string默认值topRight |
| top | 消息从顶部弹出时，距离顶部的位置，单位像素。 | 类型number默认值24 |
| maxCount(1.5.0-beta.0) | 最大显示数, 超过限制时，最早的消息会被自动关闭 | 类型number |
| foldCount(1.5.1) | 超过指定数量折叠显示 | 类型number |
| icons(1.5.6) | 各类型通知 icon 配置 | 类型object默认值{ success: 'check', info: 'info',error: 'error',warning: 'warning',loading: 'loading' |



================================================================================
文件: NumberField.md
路径: doc\NumberField.md
================================================================================

# NumberField 数字输入框

通过鼠标或键盘，输入范围内的数值。

## 何时使用

当需要获取标准数值时。

如果要输入保留两位小数格式的金额，请使用Currency组件。

## 代码演示

## 基本使用

#### 限制输入整数，步距为 1

#### 步距为 2

#### 精确两位小数

#### 小数步距，且限制最大、最小值

#### 小数步距，且限制最小值

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { NumberField, Row, Col } from 'choerodon-ui/pro';

function log(value) {
  console.log(value);
}

ReactDOM.render(
  <div>
    <Row style={{ marginBottom: 10 }} gutter={10}>
      <Col span={12}>
        <h4>限制输入整数，步距为 1</h4>
        <NumberField
          placeholder="请输入整数"
          precision={0}
          step={1}
          onChange={log}
        />
      </Col>
    </Row>
    <Row style={{ marginBottom: 10 }} gutter={10}>
      <Col span={12}>
        <h4>步距为 2</h4>
        <NumberField
          placeholder="请输入整数"
          precision={0}
          step={2}
          onChange={log}
        />
      </Col>
      <Col span={12}>
        <h4>精确两位小数</h4>
        <NumberField placeholder="精确两位小数" precision={2} min={0} />
      </Col>
    </Row>
```

## 受控数字输入框

受控数字输入框

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { NumberField } from 'choerodon-ui/pro';

class App extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      value: 'default',
    };
  }

  handleChange = (value, oldValue) => {
    console.log('[newValue]', value, '[oldValue]', oldValue);
    this.setState({
      value,
    });
  }

  handleInput = (e) => {
    console.log('[input]', e.target.value);
  }

  render() {
    return <NumberField value={this.state.value} onChange={this.handleChange} onInput={this.handleInput} />;
  }
}
```

## 数据源

绑定数据源。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, NumberField } from 'choerodon-ui/pro';

function handleDataSetChange({ record, name, value, oldValue }) {
  console.log('[dataset newValue]', value, '[oldValue]', oldValue, `[record.get('${name}')]`, record.get(name));
}

class App extends React.Component {
  ds = new DataSet({
    autoCreate: true,
    fields: [
      { name: 'age', type: 'number', defaultValue: 100000000000000, required: true },
    ],
    events: {
      update: handleDataSetChange,
    },
  });

  render() {
    return <NumberField dataSet={this.ds} name="age" />;
  }
}

ReactDOM.render(
  <App />,
  document.getElementById('container')
);
```

## 最大最小值

指定最大最小值。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, NumberField, Row, Col } from 'choerodon-ui/pro';
import moment from 'moment';

function filterDate(currentDate) {
  const dayInWeek = currentDate.get('d');
  return dayInWeek !== 0 && dayInWeek !== 1;
}

class App extends React.Component {
  ds = new DataSet({
    autoCreate: true,
    fields: [
      { name: 'start', type: 'number', max: 'end', step: 1 },
      { name: 'end', type: 'number', min: 'start', step: 1 },
    ],
  });

  render() {
    return (
      <Row gutter={10}>
        <Col span={6}>
          <NumberField dataSet={this.ds} name="start" placeholder="start" />
        </Col>
        <Col span={6}>
          <NumberField dataSet={this.ds} name="end" placeholder="end" />
        </Col>
```

## 范围


```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, NumberField, Row, Col } from 'choerodon-ui/pro';

function handleDataSetChange({ value, oldValue }) {
  console.log('[range dataset newValue]', value, '[oldValue]', oldValue);
}

function handleChange(value, oldValue) {
  console.log('[range newValue]', value, '[oldValue]', oldValue);
}

function rangeValidator(value, name) {
  console.log(`[validation ${name} value]`, value);
  return true;
}

class App extends React.Component {
  ds = new DataSet({
    autoCreate: true,
    fields: [
      {
        name: 'number1',
        type: 'number',
        range: ['start', 'end'],
        defaultValue: { start: 0, end: 4 },
        required: true,
        min: 1,
        max: 10,
        step: 1,
        validator: rangeValidator,
      },
      {
        name: 'number2',
        type: 'number',
        range: true,
        defaultValue: [0, 4],
```

## 多值

通过属性multiple设置为多值。



```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, NumberField, Row, Col } from 'choerodon-ui/pro';

function handleChange(value, oldValue) {
  console.log('[multiple]', value, '[oldValue]', oldValue);
}

function handleDataSetChange({ record, name, value, oldValue }) {
  console.log('[dataset multiple]', value, '[oldValue]', oldValue, `[record.get('${name}')]`, record.get(name));
}

const data = [{
  user: [31],
}];

class App extends React.Component {
  ds = new DataSet({
    data,
    fields: [
      { name: 'size', type: 'number', label: '尺码', multiple: true, step: 1, max: 10, min: 5, required: true },
    ],
    events: {
      update: handleDataSetChange,
    },
  });

  render() {
```

## 大数字

支持大数字。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, NumberField, Form } from 'choerodon-ui/pro';
import BigNumber from 'bignumber.js';

function handleDataSetChange({ record, name, value, oldValue }) {
  console.log(
    '[dataset newValue]',
    value,
    '[oldValue]',
    oldValue,
    `[record.get('${name}')]`,
    record.get(name),
  );
}

function handleChange(value, oldValue) {
  console.log('[range newValue]', value, '[oldValue]', oldValue);
}

class App extends React.Component {
  ds = new DataSet({
    autoCreate: true,
    fields: [
      {
        name: 'age',
        type: 'number',
        required: true,
        max: '12345678901234567890123456',
        min: '-12345678901234567890123456',
        defaultValue: '123456789012345678.213123',
        formatterOptions: {
```

## 数值补零显示

开启全局配置，数值在输入和显示时根据precision补零显示，真实值不受影响。（当前页面设置了 precision 属性的组件都会受全局配置影响，数值都会补零显示）


```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, NumberField, Row, Col } from 'choerodon-ui/pro';
import { configure, Divider } from 'choerodon-ui';

configure({
  // 开启补零显示，不影响真实值
  useZeroFilledDecimal: true,
});

function handleDataSetChange({ record, name, value, oldValue }) {
  console.log(
    '[dataset newValue]',
    value,
    '[oldValue]',
    oldValue,
    `[record.get('${name}')]`,
    record.get(name),
  );
}

class App extends React.Component {
  ds = new DataSet({
    autoCreate: true,
    fields: [
      { name: 'age', type: 'number', precision: 3 },
      { name: 'ageRange', type: 'number', precision: 2, range: true },
      { name: 'ageMultiple', type: 'number', precision: 2, multiple: true },
    ],
    events: {
      update: handleDataSetChange,
    },
  });

  render() {
    return (
      <Row gutter={10}>
```

## API

### NumberField

| 属性名 | 说明 | 类型/默认值/版本 |
| --- | --- | --- |
| min | 最小值 | 类型BigNumber.Value默认值Infinity |
| max | 最大值 | 类型BigNumber.Value默认值-Infinity |
| step | 步距 | 类型BigNumber.Value |
| nonStrictStep | 非严格步距，在非严格步距下，允许输入值不为步距的倍数加上最小值，也允许在设置整数步距的情况下输入小数 | 类型boolean默认值false |
| longPressPlus | 长按累加开关 | 类型boolean默认值true |
| formatter | 格式器,默认值为static的format。设置 stringMode 时，默认值为static的bigNumberFormat | 类型FormatNumberFunc: (value: string, lang: options: Intl.NumberFormatOptions) => string |
| formatterOptions | 格式器参数,可以与全局值以及默认值进行合并,默认值参考 | 类型FormatNumberFuncOptions: lang?: string, options?: Intl.NumberFormatOptions |
| precision | 转换小数点位数 | 类型number版本1.3.0 |
| numberGrouping | 千分位分组显示 | 类型boolean默认值true版本1.3.0 |
| keyboard | 是否启用UP DOWN键盘事件 | 类型boolean默认值true版本1.5.0 |

更多属性请参考TextField。

### Static method

| 名称 | 说明 | 属性名 |
| --- | --- | --- |
| format(value, lang, options) | 数字格式化 | 属性名value- number BigNumberlang- 语言代码options- 详见Intl.NumberFormatOptions |

组件库使用外部库bignumber.js实现大数字，具体使用参见文档大数字支持。



================================================================================
文件: Output.md
路径: doc\Output.md
================================================================================

# Output 文本展示

## 何时使用

单纯用于展示文本，常用在表单中。

## 代码演示

## 基本使用

基本使用，单纯用于展示文本。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Output } from 'choerodon-ui/pro';

ReactDOM.render(
  <Output value="hello" />,
  document.getElementById('container')
);
```

## 覆盖渲染

使用renderer属性覆盖默认渲染行为。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Output } from 'choerodon-ui/pro';

function rendererOne(param) {
  const { text } = param;
  return <span style={{ color: 'red' }}>{text}</span>;
}

ReactDOM.render(
  <Output value="hello" renderer={rendererOne} />,
  document.getElementById('container')
);
```

## 绑定数据源。

绑定数据源 DS，关联数据展示。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, Output, Row, Col } from 'choerodon-ui/pro';

class App extends React.Component {
  ds = new DataSet({
    autoCreate: true,
    fields: [
      {
        name: 'first-name',
        type: 'string',
        defaultValue: 'Zhangsan',
        required: true,
      },
      {
        name: 'number',
        type: 'number',
        defaultValue: 18888.11,
        required: true,
        precision: 4,
        formatterOptions: { options: { useGrouping: false } },
      },
    ],
  });

  render() {
    return (
      <Row>
```

## 在表单中使用

表单绑定数据源，与其他字段混合使用。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import {
  DataSet,
  Form,
  Output,
  EmailField,
  NumberField,
  IntlField,
} from 'choerodon-ui/pro';

class App extends React.Component {
  ds = new DataSet({
    autoCreate: true,
    tlsUrl: '/dataset/user/languages',
    fields: [
      {
        name: 'first-name',
        type: 'intl',
        defaultValue: 'Zhangsan',
        required: true,
        label: '姓名',
      },
      {
        name: 'last-name',
        type: 'intl',
        defaultValue:
          '描述描述描述描述描述描述描述描述描述描述描述描述描述描述描述描述描述描述描述描述描述描述描述描述',
        required: true,
        label: '名称',
      },
      {
        name: 'phone',
        defaultValue: '15888888888',
        type: 'string',
        label: '手机号',
        required: true,
      },
      { name: 'age', defaultValue: 18, type: 'number', label: '年龄' },
      {
        name: 'sex',
        defaultValue: 'F',
        type: 'string',
        label: '性别',
        lookupCode: 'HR.EMPLOYEE_GENDER',
      },
```

## 多值

通过属性multiple设置为多值。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, Output, Row, Col } from 'choerodon-ui/pro';

class App extends React.Component {
  ds = new DataSet({
    autoCreate: true,
    fields: [
      {
        name: 'user',
        type: 'string',
        label: '用户',
        defaultValue: 'Jack,Rose,Hugh',
        required: true,
        multiple: ',',
      },
    ],
  });

  render() {
    return (
      <Row gutter={10}>
        <Col span={12}>
          <span>绑定数据源：</span>
          <Output dataSet={this.ds} name="user" />
        </Col>
        <Col span={12}>
          <span>直接使用：</span>
```

## 范围值

通过属性range设置为范围值。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, Output, Row, Col } from 'choerodon-ui/pro';

class App extends React.Component {
  ds = new DataSet({
    autoCreate: true,
    fields: [
      {
        name: 'user',
        type: 'string',
        label: '用户',
        defaultValue: [1, 10],
        required: true,
        range: true,
      },
    ],
  });

  render() {
    return (
      <Row gutter={10}>
        <Col span={12}>
          <span>绑定数据源：</span>
          <Output dataSet={this.ds} name="user" />
        </Col>
        <Col span={12}>
          <span>直接使用：</span>
          <Output range value={[20, 30]} />
        </Col>
        <Col span={24}>
```

## API

### Output

更多属性请参考FormField。



================================================================================
文件: Pagination.md
路径: doc\Pagination.md
================================================================================

# Pagination 分页

采用分页的形式分隔长列表，每次只加载一个页面。

## 何时使用

- 当加载/渲染所有数据将花费很多时间时；
- 可切换页码浏览数据。

## 代码演示

## 基本使用

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import {
  Form,
  Switch,
  DataSet,
  Pagination,
  NumberField,
} from 'choerodon-ui/pro';
import { observer } from 'mobx-react';

function handleChange(page, pageSize) {
  console.log('[pagination]', page, pageSize);
}

@observer
class App extends React.Component {
  ds = new DataSet({
    autoCreate: true,
    fields: [
      {
        name: 'showSizeChanger',
        type: 'boolean',
        label: 'showSizeChanger',
        defaultValue: true,
      },
      {
        name: 'showTotal',
        type: 'boolean',
        label: 'showTotal',
        defaultValue: true,
      },
      {
```

## 总数

通过设置 showTotal 展示总共有多少数据

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Form, Switch, DataSet, Pagination, NumberField, Button } from 'choerodon-ui/pro';
import { observer } from 'mobx-react';

function handleChange(page, pageSize) {
  console.log('[pagination]', page, pageSize);
}

class App extends React.Component {

  render() {
    return (
      <div>
        <Pagination
          showTotal={(total, range) => `${range[0]}-${range[1]} of ${total} 页`}
          total={90}
          onChange={handleChange}
        />
        <br />
        <Pagination
          total={95}
          showTotal={(total, range) => `${range[0]}-${range[1]} of ${total} items`}
        />
      </div>
    );
  }
}

ReactDOM.render(<App />, document.getElementById('container'));
```

## 受控

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Pagination } from 'choerodon-ui/pro';

class App extends React.Component {
  state = {
    page: 2,
    pageSize: 20,
    total: 100,
  };

  handleChange = (page, pageSize) => {
    const { total } = this.state;
    if (page * pageSize > total) {
      page = 1;
    }
    console.log('[page]', page, '[pageSize]', pageSize);
    this.setState({
      page,
      pageSize,
    });
  };

  render() {
    const { page, pageSize, total } = this.state;
    return (
      <Pagination
        total={total}
```

## 跳转

快速跳转到某一页。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, Pagination, Form, Switch } from 'choerodon-ui/pro';
import { observer } from 'mobx-react-lite';

function handleChange(page, pageSize) {
  console.log('[pagination]', page, pageSize);
}

const App = observer(() => {
  const ds = React.useMemo(
    () =>
      new DataSet({
        autoCreate: true,
        fields: [
          {
            name: 'goButton',
            type: 'boolean',
            label: 'goButton',
            defaultValue: false,
          },
        ],
      }),
    [],
  );
  return (
    <div>
      <Form columns={4} dataSet={ds} labelWidth={150}>
```

## 数据源

绑定数据源。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, Pagination } from 'choerodon-ui/pro';

class App extends React.Component {
  ds = new DataSet({
    autoQuery: true,
    name: 'user',
    pageSize: 20,
  });

  render() {
    return <Pagination dataSet={this.ds} />;
  }
}

ReactDOM.render(
  <App />,
  document.getElementById('container')
);
```

## Hzero定制

Hzero 定制。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Form, Switch, DataSet, Pagination, Icon } from 'choerodon-ui/pro';

function pagerRenderer(page, type) {
  switch (type) {
    case 'first':
      return <Icon type="fast_rewind" />;
    case 'last':
      return <Icon type="fast_forward" />;
    case 'prev':
      return <Icon type="navigate_before" />;
    case 'next':
      return <Icon type="navigate_next" />;
    case 'jump-prev':
    case 'jump-next':
      return '•••';
    default:
      return page;
  }
}

function sizeChangerRenderer({ text }) {
  return `${text} 条/页`;
}

ReactDOM.render(
  <Pagination
```

## API

### Pagination

| 属性名 | 说明 | 类型/默认值/版本 |
| --- | --- | --- |
| total | 总数 | 类型number |
| page | 当前页 | 类型number |
| pageSize | 分页数 | 类型number |
| maxPageSize | 最大可输入分页数 | 类型number默认值100版本1.3.1 |
| pageSizeEditable | 可输入分页数 | 类型boolean默认值false版本1.3.1 |
| onChange | 页码改变的回调，参数是改变后的页码及每页条数 | 类型(page, pageSize) => void |
| pageSizeOptions | 指定每页可以显示多少条 | 类型string[]默认值['10', '20', '50', '100'] |
| showQuickJumper | 是否显示快速跳转至某页 | 类型boolean goButton: ReactNode }默认值false |
| quickJumperPosition | 快速跳转至某页的位置，可选值: left \| right | 类型string默认值right版本1.4.5 |
| hideOnSinglePage | 只有一页时是否隐藏分页器 | 类型boolean默认值false |
| showSizeChanger | 是否显示分页大小选择器 | 类型boolean默认值true |
| showSizeChangerLabel | 是否显示分页大小选择器的标签 | 类型boolean默认值true |
| showTotal | 显示总数，当传入 function 时可自定义显示数据总量和当前数据顺序 | 类型boolean Function(total, range, counting, page, pageSize)默认值true |
| showPager | 显示数字按钮。设置为 input 时，显示为输入框 | 类型boolean 'input'默认值false |
| itemRender | 按钮渲染。type - 按钮类型，可选值：first \| last \| prev \| next \| jump-prev \| jump-next | 类型(page, type) => ReactNode |
| sizeChangerPosition | 分页大小选择器的位置，可选值: left \| right | 类型string默认值left |
| sizeChangerOptionRenderer | 分页大小选择器的选项渲染器 | 类型({ dataSet, record, text, value}) => ReactNode默认值({ text }) |

更多属性请参考ViewComponent。



================================================================================
文件: Password.md
路径: doc\Password.md
================================================================================

# Password 密码输入框

密码输入框表单控件。

## 何时使用

当用户需要输入密码时。

## 代码演示

## 基本使用

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Password, Row, Col } from 'choerodon-ui/pro';

function log(value) {
  console.log(value);
}

ReactDOM.render(
  <Row gutter={10}>
    <Col span={12}>
      <Password placeholder="请输入密码" onChange={log} />
    </Col>
    <Col span={12}>
      <Password placeholder="无揭示按钮" reveal={false} />
    </Col>
  </Row>,
  document.getElementById('container')
);
```

## 受控输入框

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Password } from 'choerodon-ui/pro';

class App extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      value: 'default',
    };
  }

  handleChange = (value, oldValue) => {
    console.log('[newValue]', value, '[oldValue]', oldValue);
    this.setState({
      value,
    });
  };

  handleInput = e => {
    console.log('[input]', e.target.value);
  };

  render() {
    return (
      <Password value={this.state.value} onChange={this.handleChange} onInput={this.handleInput} />
    );
  }
```

## 数据源

绑定数据源。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, Password } from 'choerodon-ui/pro';

function handleDataSetChange({ record, name, value, oldValue }) {
  console.log(
    '[dataset newValue]',
    value,
    '[oldValue]',
    oldValue,
    `[record.get('${name}')]`,
    record.get(name),
  );
}

class App extends React.Component {
  ds = new DataSet({
    autoCreate: true,
    fields: [
      {
        name: 'first-name',
        type: 'string',
        defaultValue: 'choerodon-pro',
        required: true,
      },
    ],
    events: {
      update: handleDataSetChange,
```

## API

| 属性名 | 说明 | 类型/默认值 |
| --- | --- | --- |
| reveal | 是否可揭示 | 类型boolean默认值true |

更多属性请参考TextField。



================================================================================
文件: PerformanceTable.md
路径: doc\PerformanceTable.md
================================================================================

# PerformanceTable 大数据表格

展示行列数据。

## 何时使用

- 当有大数据需要高性能展现时；
- 千级数据量，简单需求，高流畅要求；
- 与数据源DS结合使用。单页数据量大于300条可开启虚拟滚动。 单页数据量大于5000条建议不使用DS。(暂无在线编辑demo)。详细代码查看：https://gitee.com/choerodon-ui/hzero-sample/tree/master/packages/hzero-sample-demo1/src/pages/performanceEditTable

## 代码演示

## 基本

最简单的用法。

```javascript
import React, { useEffect, useState } from 'react';
import ReactDOM from 'react-dom';
import { PerformanceTable, Button } from 'choerodon-ui/pro';

const Table = () => {
  const tableRef = React.createRef();
  const [fakeLargeData, setFakeLargeData] = useState([]);
  const columns = [
    {
      title: 'Id',
      dataIndex: 'id',
      key: 'id',
      width: 70,
      fixed: true,
    },
    {
      title: '姓',
      dataIndex: 'lastName',
      key: 'lastName',
      width: 150,
    },
    {
      title: '名',
      dataIndex: 'firstName',
      key: 'firstName',
      width: 150,
    },
    {
      title: '城市',
      dataIndex: 'city',
      key: 'city',
      width: 300,
    },
    {
      title: '街道',
      dataIndex: 'street',
      key: 'street',
      width: 300,
    },
    {
      title: '公司',
      dataIndex: 'companyName',
      key: 'companyName',
      width: 300,
    },
  ];

  useEffect(() => {
    fetch('../data/fakeLargeData.json')
      .then((response) => response.json())
```

## 大数据表格调整列宽

把鼠标移动到列分割线的时候，会显示出一个蓝色的移动手柄，点击不松开并左右拖动就可以调整列的宽度。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { PerformanceTable } from 'choerodon-ui/pro';

class ResizableColumnTable extends React.Component {
  constructor(props) {
    super(props);
    const data = fakeData.filter((v, i) => i < 8);
    this.state = {
      data,
    };
  }

  render() {
    const { data } = this.state;
    const columns = [
      {
        title: 'Id',
        dataIndex: 'id',
        key: 'id',
        width: 50,
        resizable: true,
        fixed: true,
      },
      {
        title: '姓名',
        dataIndex: 'firstName',
        key: 'firstName',
        width: 100,
        resizable: true,
        onResize: (columnWidth, dataKey) => {
          console.log(columnWidth, dataKey);
        },
      },
      {
        title: '城市',
        dataIndex: 'city',
        key: 'city',
        width: 400,
        resizable: true,
      },
      {
        title: '街道',
        dataIndex: 'street',
        key: 'street',
        width: 400,
        resizable: true,
      },
      {
        title: '公司',
```

## 流体列宽

如果需要把某列设置为自动宽度，需要配置 flexGrow 属性。 flexGrow 是 number 类型。会按照所有 flexGrow 总和比例撑满剩下的宽度。

注意: 设置 flexGrow 以后，就不能设置 width 和 resizable 属性。 可以通过 minWidth 设置一个最小宽度。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { PerformanceTable } from 'choerodon-ui/pro';

class FluidColumnTable extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      data: fakeData,
    };
  }

  render() {
    const { data } = this.state;
    const columns = [
      {
        title: 'Id',
        dataIndex: 'id',
        key: 'id',
        width: 70,
        fixed: true,
      },
      {
        title: '姓',
        dataIndex: 'lastName',
        key: 'lastName',
        width: 100,
        fixed: true,
      },
      {
        title: '名',
        dataIndex: 'firstName',
        key: 'firstName',
        width: 130,
        resizable: true,
        sortable: true,
      },
      {
        title: (
          <span>
            城市 <code>flexGrow: 1 </code>
          </span>
        ),
        dataIndex: 'city',
        key: 'city',
        flexGrow: 1,
        sortable: true,
      },
      {
        title: (
```

## 锁定列

Fixed 锁定列。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { PerformanceTable } from 'choerodon-ui/pro';

class FixedColumnTable extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      data: fakeData,
    };
  }
  render() {
    const columns = [
      {
        title: 'Id',
        dataIndex: 'id',
        key: 'id',
        width: 70,
        fixed: true,
      },
      {
        title: '姓',
        dataIndex: 'lastName',
        key: 'lastName',
        width: 130,
        fixed: true,
      },
      {
        title: '名',
        dataIndex: 'firstName',
        key: 'firstName',
        width: 130,
      },
      {
        title: '城市',
        dataIndex: 'city',
        key: 'city',
        width: 200,
      },
      {
        title: '街道',
        dataIndex: 'street',
        key: 'street',
        width: 200,
      },
      {
        title: '公司',
        dataIndex: 'companyName',
        key: 'companyName',
        width: 300,
```

## 自动换行

如果想让单元格自动换行，需要设置 wordWrap。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { PerformanceTable } from 'choerodon-ui/pro';

class WordWrapTable extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      data: fakeData,
    };
  }
  render() {
    const columns = [
      {
        title: 'Id',
        dataIndex: 'id',
        key: 'id',
        width: 70,
        fixed: true,
      },
      {
        title: '姓名',
        dataIndex: 'firstName',
        key: 'firstName',
        width: 150,
      },
      {
        title: '城市',
        dataIndex: 'city',
        key: 'city',
        width: 200,
      },
      {
        title: '街道',
        dataIndex: 'street',
        key: 'street',
        width: 300,
      },
      {
        title: '公司',
        dataIndex: 'companyName',
        key: 'companyName',
        width: 300,
      },
      {
        title: '邮箱',
        dataIndex: 'email',
        key: 'email',
        width: 300,
      },
```

## 自定义单元格

根据不同的业务场景，单元格中可以自己定义显示的内容。如果有相关单元格需要key唯一，获取rowIndex处理。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Popover } from 'choerodon-ui';
import { PerformanceTable } from 'choerodon-ui/pro';

const NameCell = ({ rowData, dataIndex }) => {
  return (
    <Popover
      title="Description"
      content={
        <>
          <p>
            <b>Name:</b> {`${rowData.firstName} ${rowData.lastName}`}{' '}
          </p>
          <p>
            <b>Email:</b> {rowData.email}{' '}
          </p>
          <p>
            <b>Company:</b> {rowData.companyName}{' '}
          </p>
          <p>
            <b>Sentence:</b> {rowData.sentence}{' '}
          </p>
        </>
      }
    >
      {rowData[dataIndex].toLocaleString()}
    </Popover>
  );
};

const ActionCell = ({ rowData, dataIndex }) => {
  function handleAction() {
    alert(`id:${rowData[dataIndex]}`);
    console.log(rowData, dataIndex);
  }

  return (
    <span>
      <a onClick={handleAction}> Edit </a>|
      <a onClick={handleAction}> Remove </a>
    </span>
  );
};

class CustomColumnTable extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      data: fakeData,
```

## 排序

设置 sortable，同时在 performanceTable 定义一个 onSortColumn 回调函数，点击列头排序图标的时候，会触发该方法，并返回 sortColumn 和 sortType。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { PerformanceTable } from 'choerodon-ui/pro';

class SortTable extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      sortColumn: 'id',
      data: fakeData,
    };
    this.handleSortColumn = this.handleSortColumn.bind(this);
  }

  getData() {
    const { data, sortColumn, sortType } = this.state;

    if (sortColumn && sortType) {
      return data.sort((a, b) => {
        let x = a[sortColumn];
        let y = b[sortColumn];
        if (typeof x === 'string') {
          x = x.charCodeAt();
        }
        if (typeof y === 'string') {
          y = y.charCodeAt();
        }
        if (sortType === 'asc') {
          return x - y;
        } else {
          return y - x;
        }
      });
    }
    return data;
  }

  handleSortColumn(sortColumn, sortType) {
    this.setState({
      loading: true,
    });

    setTimeout(() => {
```

## 树形

树形表格，主要为了展示有结构关系的数据，需要在 Table 组件上设置一个 isTree 属性，同时 data 中的数据需要通过 children 来定义关系结构。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { PerformanceTable, Icon } from 'choerodon-ui/pro';

class TreeTable extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      data: fakeTreeData,
    };
  }

  render() {
    const { data } = this.state;
    const columns = [
      {
        title: 'Key',
        dataIndex: 'key',
        width: 100,
      },
      {
        title: 'Label (Tree Col)',
        dataIndex: 'labelName',
        flexGrow: 1,
        treeCol: true,
      },
      {
        title: 'Status',
        width: 100,
        dataIndex: 'status',
      },
      {
        title: 'Count',
        width: 100,
        dataIndex: 'count',
      },
    ];
    return (
      <div>
        <PerformanceTable
          isTree
          virtualized
          minHeight={260}
          height={400}
          data={data}
          columns={columns}
          defaultExpandedRowKeys={[0]}
          onExpandChange={(expanded, rowData) => {
            console.log(expanded, rowData);
          }}
```

## 可展开

实现一个可以展开的 Table ,需要以下几个属性的组合完成。

第一步：给 Table 设置属性 renderRowExpanded(rowData) => React.Node 用来返回需要在展开面板中渲染的内容rowExpandedHeight 设置可展开区域的高度， 默认是 100expandedRowKeys（受控） 和 defaultExpandedRowKeys 用来配置需要展开的行。

需要注意的是这两个属性接收的参数是一个的数组，数组中是 rowKey。rowKey 给每一行数据对一个唯一 key , 对应 data 中的一个唯一值的 key。

第二步：自定义 Cell自定义一个 Cell， 在内部放一个可以操作按钮，用于操作 expandedRowKeys 中的。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { PerformanceTable, Button } from 'choerodon-ui/pro';

const rowKey = 'id';
const ExpandCell = ({ rowData, dataIndex, expandedRowKeys, onChange }) => (
  <Button
    onClick={() => {
      onChange(rowData);
    }}
    funcType="flat"
    size="small"
  >
    {expandedRowKeys.some((key) => key === rowData[rowKey]) ? '-' : '+'}
  </Button>
);

class ExpandedTable extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      data: fakeData,
      expandedRowKeys: [0],
    };
    this.handleExpanded = this.handleExpanded.bind(this);
  }
  handleExpanded(rowData, dataKey) {
    const { expandedRowKeys } = this.state;

    let open = false;
    const nextExpandedRowKeys = [];

    expandedRowKeys.forEach((key) => {
      if (key === rowData[rowKey]) {
        open = true;
      } else {
        nextExpandedRowKeys.push(key);
      }
    });

    if (!open) {
      nextExpandedRowKeys.push(rowData[rowKey]);
    }
    this.setState({
      expandedRowKeys: nextExpandedRowKeys,
    });
  }
  render() {
    const { expandedRowKeys, data } = this.state;
    const columns = [
```

## 可编辑

可编辑的表格。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { PerformanceTable } from 'choerodon-ui/pro';

export const EditCell = ({ rowData, dataIndex, onChange }) => {
  return rowData.status === 'EDIT' ? (
    <input
      className="input"
      style={{ height: 26 }}
      defaultValue={rowData[dataIndex]}
      onChange={(event) => {
        onChange && onChange(rowData.id, dataIndex, event.target.value);
      }}
    />
  ) : (
    rowData[dataIndex]
  );
};

const ActionCell = ({ rowData, onClick }) => {
  return (
    <a
      onClick={() => {
        onClick && onClick(rowData.id);
      }}
    >
      {rowData.status === 'EDIT' ? 'Save' : 'Edit'}
    </a>
  );
};

class EditTable extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      data: fakeData.filter((item, index) => index < 20),
    };
    this.handleChange = this.handleChange.bind(this);
    this.handleEditState = this.handleEditState.bind(this);
  }
  handleChange(id, key, value) {
    const { data } = this.state;
    // 可使用 _.clone
    const nextData = [...data];
    nextData.find((item) => item.id === id)[key] = value;
    this.setState({
      data: nextData,
    });
  }
  handleEditState(id) {
```

## 组合列

在某些情况下，需要合并列来组织数据之间的关系，设置 colSpan 属性，同时通过 children 设置表头分组。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { PerformanceTable } from 'choerodon-ui/pro';

class FixedColumnTable extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      data: fakeDataForColSpan,
    };
  }

  render() {
    const columns = [
      {
        title: 'Id',
        dataIndex: 'id',
        key: 'id',
        width: 70,
        verticalAlign: 'middle',
        fixed: true,
      },
      {
        header: '基本信息',
        type: 'ColumnGroup',
        align: 'center',
        verticalAlign: 'middle',
        fixed: true,
        children: [
          {
            title: '姓',
            dataIndex: 'lastName',
            key: 'lastName',
            width: 150,
            resizable: true,
          },
          {
            title: '名',
            dataIndex: 'firstName',
            key: 'firstName',
            width: 150,
            resizable: true,
          },
          {
            title: '邮箱',
            dataIndex: 'email',
            key: 'email',
            width: 200,
            resizable: true,
          },
```

## 自动高度

自适应高度。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { PerformanceTable } from 'choerodon-ui/pro';

class AutoHeightTable extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      data: fakeData,
    };
  }

  render() {
    const columns = [
      {
        title: 'Id',
        dataIndex: 'id',
        key: 'id',
        width: 70,
        fixed: true,
      },
      {
        title: '姓名',
        dataIndex: 'firstName',
        key: 'firstName',
        width: 130,
        resizable: true,
        onResize: (columnWidth, dataKey) => {
          console.log(columnWidth, dataKey);
        },
      },
      {
        title: '城市',
        dataIndex: 'city',
        key: 'city',
        width: 200,
      },
      {
        title: '街道',
        dataIndex: 'street',
        key: 'street',
        width: 300,
      },
      {
        title: '公司',
        dataIndex: 'companyName',
        key: 'companyName',
        width: 300,
      },
      {
```

## 虚拟滚动

虚拟滚动，大数据表格。

```javascript
import React, { useEffect, useState } from 'react';
import ReactDOM from 'react-dom';
import { PerformanceTable, Button } from 'choerodon-ui/pro';

const LargeListsTable = () => {
  const tableRef = React.createRef();
  const [fakeLargeData, setFakeLargeData] = useState([]);
  const columns = [
    {
      title: 'Id',
      dataIndex: 'id',
      key: 'id',
      width: 70,
      fixed: true,
    },
    {
      title: '姓',
      dataIndex: 'lastName',
      key: 'lastName',
      width: 150,
    },
    {
      title: '名',
      dataIndex: 'firstName',
      key: 'firstName',
      width: 150,
    },
    {
      title: '城市',
      dataIndex: 'city',
      key: 'city',
      width: 300,
    },
    {
      title: '街道',
      dataIndex: 'street',
      key: 'street',
      width: 300,
    },
    {
      title: '公司',
      dataIndex: 'companyName',
      key: 'companyName',
      width: 300,
    },
  ];

  useEffect(() => {
    fetch('../data/fakeLargeData.json')
      .then((response) => response.json())
```

## 固定横向滚动条页面底部

固定横向滚动条页面底部。

⬇️ Scroll down the page ⬇️

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { PerformanceTable } from 'choerodon-ui/pro';

class AffixHorizontalScrollbarTable extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      data: fakeData,
    };
  }

  render() {
    const columns = [
      {
        title: 'Id',
        dataIndex: 'id',
        key: 'id',
        width: 70,
        fixed: true,
      },
      {
        title: '姓名',
        dataIndex: 'firstName',
        key: 'firstName',
        width: 130,
        resizable: true,
        onResize: (columnWidth, dataKey) => {
          console.log(columnWidth, dataKey);
        },
      },
      {
        title: '城市',
        dataIndex: 'city',
        key: 'city',
        width: 200,
      },
      {
        title: '街道',
        dataIndex: 'street',
        key: 'street',
        width: 300,
      },
      {
        title: '公司',
        dataIndex: 'companyName',
        key: 'companyName',
        width: 300,
      },
      {
```

## 合并单元格

合并单元格。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { PerformanceTable } from 'choerodon-ui/pro';

const transformData = (data) => {
  const rowCombineArr = [];
  let currentName = null;
  let repeatNum = 0;
  let repeatStart = 0;
  for (let i = 0; i < data.length; i++) {
    const record = data[i];
    // 根据name进行合并
    const { companyName } = record;
    if (currentName === null) {
      currentName = companyName;
      repeatNum = 1;
      repeatStart = i;
      rowCombineArr[repeatStart] = 1;
    } else if (currentName === companyName) {
      rowCombineArr[i] = 0;
      repeatNum += 1;
    } else {
      currentName = null;
      rowCombineArr[repeatStart] = repeatNum;
      repeatNum = 0;
      i -= 1;
    }
    if (i === data.length - 1) {
      rowCombineArr[repeatStart] = repeatNum;
    }
  }
  return rowCombineArr;
};
const rowCombineArr = transformData(fakeDataForColSpan);

class FixedColumnTable extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      data: fakeDataForColSpan,
    };
  }

  render() {
    const columns = [
      {
        title: 'Id',
        dataIndex: 'id',
        key: 'id',
        width: 70,
```

## 拖拽

```javascript
import { PerformanceTable, Icon } from 'choerodon-ui/pro';
import React from 'react';
import ReactDOM from 'react-dom';
import { useDrag, useDrop, DndProvider } from 'react-dnd';
// import { HTML5Backend } from 'react-dnd-html5-backend';

const { Column, Cell, HeaderCell } = PerformanceTable;

const style = {
  border: '1px dashed gray',
  cursor: 'move',
  padding: '0 0.1rem',
};

const ItemTypes = {
  COLUMN: 'column',
  ROW: 'row',
};

function DraggableHeaderCell({ children, onDrag, id, ...rest }) {
  const ref = React.useRef(null);

  const [{ canDrop, isOver }, drop] = useDrop({
    accept: ItemTypes.COLUMN,
    collect: (monitor) => ({
      isOver: monitor.isOver(),
      canDrop: monitor.canDrop(),
    }),
    drop(item, _monitor) {
      onDrag(item.id, id);
    },
  });

  const [{ isDragging }, drag] = useDrag({
    item: { id, type: ItemTypes.COLUMN },
    collect: (monitor) => ({
      isDragging: monitor.isDragging(),
    }),
  });
  const opacity = isDragging ? 0 : 1;
  const isActive = canDrop && isOver;

  drag(drop(ref));

  const styles = {
    ...style,
    opacity,
    background: isActive ? '#ddd' : null,
  };
```

## 动态筛选条

queryBar type 设为 filterBar，查询条件为无边框可动态配置筛选条，结合后端标准接口可实现筛选列表保存。

```javascript
import React, { useEffect, useMemo, useState } from 'react';
import ReactDOM from 'react-dom';
import { PerformanceTable, Button, DataSet } from 'choerodon-ui/pro';

const optionData = [
  { text: '男', value: 'M' },
  { text: '女', value: 'F' },
];

const Table = () => {
  const tableRef = React.createRef();
  const [fakeLargeData, setFakeLargeData] = useState([]);
  const optionDs = useMemo(
    () =>
      new DataSet({
        data: optionData,
        selection: 'single',
      }),
    [],
  );

  const ds = useMemo(
    () =>
      new DataSet({
        queryFields: [
          { name: 'name', type: 'string', label: '姓名' },
          { name: 'enable', type: 'boolean', label: '是否开启' },
          { name: 'age', type: 'number', label: '年龄' },
          {
            name: 'sex.text',
            type: 'string',
            label: '性别',
            textField: 'text',
            valueField: 'value',
            options: optionDs, // 下拉框组件的菜单数据集
            defaultValue: 'F',
          },
          { name: 'date.startDate', type: 'date', label: '开始日期' },
          {
            name: 'sexMultiple',
            type: 'string',
            label: '性别（多值）',
            lookupCode: 'HR.EMPLOYEE_GENDER',
            multiple: true,
          },
        ],
      }),
    [],
  );

  const handleQuery = (props) => {
    console.log('handleQuery', props);
```

## 用户个性化

支持对列的各项属性进行配置并个性化存储。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { PerformanceTable, Button } from 'choerodon-ui/pro';

class App extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      sortColumn: 'id',
      data: fakeData,
      hid: true,
      checkValues: [],
    };
    this.handleSortColumn = this.handleSortColumn.bind(this);
  }

  getData() {
    const { data, sortColumn, sortType } = this.state;

    if (sortColumn && sortType) {
      return data.sort((a, b) => {
        let x = a[sortColumn];
        let y = b[sortColumn];
        if (typeof x === 'string') {
          x = x.charCodeAt();
        }
        if (typeof y === 'string') {
          y = y.charCodeAt();
        }
        if (sortType === 'asc') {
          return x - y;
        } else {
          return y - x;
        }
      });
    }
    return data;
  }

  handleSortColumn(sortColumn, sortType) {
    this.setState({
      loading: true,
    });

    setTimeout(() => {
      console.log(sortColumn);
      this.setState({
        sortColumn,
```

## API

### PerformanceTable

| 属性名称 | 类型 | 描述/版本 |
| --- | --- | --- |
| columns | Column[] | 描述表格列的配置描述，具体项见下表 |
| affixHeader | boolean,number | 描述将表头固定到页面上的指定位置 |
| affixHorizontalScrollbar | boolean,number | 描述将横向滚动条固定在页面底部的指定位置 |
| autoHeight | boolean | 描述自动高度 |
| bodyRef | React.Ref | 描述表格主体部分上的 ref |
| bordered | boolean(true) | 描述表格边框 |
| data * | Array<Object> | 描述表格数据 |
| defaultExpandAllRows | boolean | 描述默认展开所有节点 |
| defaultExpandedRowKeys | string[] | 描述通过 rowKey 指定默认展开的行 |
| defaultSortType | enum: 'desc', 'asc' | 描述排序类型 |
| expandedRowKeys | string[] | 描述通过 rowKey 指定展开的行 (受控) |
| headerHeight | number(33) | 描述表头高度 |
| height | number(200) | 描述高度 |
| hover | boolean(true) | 描述表格的行设置鼠标悬停效果 |
| isTree | boolean | 描述是否展示为树表格 |
| loading | boolean | 描述显示 loading 状态 |
| locale | object | 描述本地化语言配置 |
| minHeight | number(0) | 描述最小高度 |
| onDataUpdated | (nextData: object[], scrollTo: (coord: { x: number; y: number }) => void) => void | 描述数据更新后的回调函数 |
| onExpandChange | (expanded:boolean, rowData:object) => void | 描述树形表格，在展开节点的回调函数 |
| onRowClick | (rowData:object) => void | 描述行点击后的回调函数， 返回rowData |
| onScroll | (scrollX:object, scrollY:object) => void | 描述滚动条滚动时候的回调函数 |
| onSortColumn | (dataKey:string, sortType:string) => void | 描述点击排序列的回调函数，返回sortColumn,sortType这两个值 |
| renderEmpty | (info: React.Node) => React.Node | 描述自定义渲染数据为空的状态 |
| renderLoading | (loading: React.Node) => React.Node | 描述自定义渲染数据加载中的状态 |
| renderRowExpanded | (rowData?: Object) => React.Node | 描述自定义可以展开区域的内容 |
| renderTreeToggle | (icon:node, rowData:object, expanded:boolean) => node | 描述树形表格，在展开节点的回调函数 |
| rowClassName | string , (rowData:object) => string | 描述为行自定义 className |
| rowExpandedHeight | number(100) | 描述设置可展开区域的高度 |
| rowHeight | (rowData:object) => number, number(33) | 描述行高 |
| rowKey | string('key') | 描述每一个行对应的data中的唯一key |
| shouldUpdateScroll | boolean(true) | 描述数据更新后更新滚动条位置 |
| showHeader | boolean(true) | 描述显示表头 |
| showScrollArrow | boolean(false) | 描述显示滚动条箭头 |
| sortColumn | string | 描述排序列名称 |
| sortType | enum: 'desc', 'asc' | 描述排序类型（受控） |
| clickScrollLength | object({horizontal?: 100;vertical?: 33;}) | 描述滚动条箭头点击滚动距离 |
| virtualized | boolean | 描述呈现大表格数据 |
| width | number | 描述宽度 |
| wordWrap | boolean | 描述单元格自动换行 |
| highLightRow | boolean(true) | 描述点击行显示高亮行, 开启虚拟滚动时需指定 rowKey版本1.4.1 |
| queryBar | queryBarProps | 描述查询条版本1.4.2 |
| toolbar | toolbarProps | 描述工具栏版本1.4.2 |
| toolBarRender | (props: object) => React.ReactNode[] | 描述工具栏渲染 |
| columnHideable | boolean(true) | 描述可调整列显示, customizable true 才起作用 |
| columnTitleEditable | boolean | 描述可编辑列标题, customizable true 才起作用版本1.4.3 |
| columnDraggable | boolean(false) | 描述列拖拽, customizable true 才起作用版本1.4.3 |
| customizable | boolean | 描述是否显示个性化设置入口按钮 |
| customizedCode | string | 描述个性化编码，设置后默认将会存储列拖拽等个性化设置更改到 localStorage，如果要存储到后端, 请重写全局配置中的表格个性化钩子： customizedSave customizedLoad版本1.4.3 |
| rowSelection(1.4.4) | object | 描述表格行是否可选择，配置项 |
| rowDraggable(1.4.4) | boolean(false) | 描述行拖拽，实现行的拖拽 |
| onDragEnd(1.4.4) | (resultDrag: DropResult, provided: ResponderProvided, data) => void | 描述完成拖拽后的触发事件 |
| onDragEndBefore(1.4.4) | (resultDrag: DropResult, provided: ResponderProvided) => void | 描述完成拖拽前的触发事件 |
| onDragStart(1.5.0-beta.0) | (initial: DragStart, provided: ResponderProvided) => void | 描述拖拽前触发事件 |
| components | TableComponents | 描述覆盖默认的 table 元素 |

### Form methods

- scrollTop

垂直滚动条滚动到指定位置

```ts
scrollTop: (top: number) => void;
```

- scrollLeft

横向滚动条滚动到指定位置

```ts
scrollLeft: (left: number) => void;
```

### Column

| 属性名称 | 类型 | 描述 |
| --- | --- | --- |
| align | enum: 'left','center','right' | 描述对齐方式 |
| colSpan | number | 描述合并列单元格，当被合并列的 dataKey 对应的值为 null 或者 undefined时，才会合并。 |
| fixed | boolean, 'left', 'right' | 描述固定列 |
| flexGrow | number | 描述设置列宽自动调节，当设置了 flexGrow 就不能设置 resizable width 属性 |
| minWidth | number(200) | 描述当使用了 flexGrow 以后，可以通过 minWidth 设置一个最小宽度 |
| onResize | (columnWidth?: number, dataKey?: string) => void | 描述列宽改变后的回调 |
| resizable | boolean | 描述可自定义调整列宽 |
| sortable | boolean | 描述可排序 |
| treeCol | boolean | 描述指定列显示为 Tree |
| verticalAlign | enum: 'top', 'middle', 'bottom' | 描述垂直对齐方式 |
| width | number | 描述列宽 |
| hidden | boolean | 描述隐藏 |
| hideable | boolean(true) | 描述是否可隐藏 |
| titleEditable | boolean(true) | 描述个性化是否可编辑列头 |
| onCell(1.4.4) | ({ rowData, dataIndex, rowIndex }) => object | 描述设置单元格属性 |
| render | ({ rowData, dataIndex, rowIndex }) => ReactNode | 描述覆盖渲染单元格内容 |

sortable是用来定义该列是否可排序，但是根据什么key排序需要 在Cell设置一个dataKey这里的排序是服务端排序，所以需要在<Table>的onSortColumn回调函数中处理逻辑，回调函数会返回sortColumn,sortType这两个值。

### ColumnGroup

| 属性名称 | 类型 | 描述 |
| --- | --- | --- |
| align | enum: 'left','center','right' | 描述对齐方式 |
| fixed | boolean, 'left', 'right' | 描述固定列组 |
| verticalAlign | enum: 'top', 'middle', 'bottom' | 描述垂直对齐方式 |
| header | React.ReactNode | 描述分组表头 |

### Cell

| 属性名称 | 类型 | 描述 |
| --- | --- | --- |
| dataKey | string | 描述数据绑定的 key ，同时也是排序的 |
| rowData | object | 描述行数据 |
| rowIndex | number | 描述行号 |
| rowSpan(1.4.4) | number | 描述行合并,设置为 时，不渲染 |

分页请结合 Pagination 组件。

### toolBarProps

| 属性名称 | 类型 | 描述 |
| --- | --- | --- |
| header | React.ReactNode | 描述表格标题 |
| hideToolbar | boolean | 描述是否显示工具栏 |
| buttons | React.ReactNode[] | 描述工具栏右侧操作区 |
| settings | (ReactNode \| Setting)[] | 描述工作栏右侧设置区 |

### queryBarProps

| 属性名称 | 类型 | 描述 |
| --- | --- | --- |
| type | TableQueryBarType: filter, professionalBar | 描述查询条类型 |
| renderer | (props: TableQueryBarHookProps) => React.ReactNode | 描述渲染覆盖 |
| dataSet | DataSet | 描述数据源 |
| queryFormProps | FormProps | 描述查询条表单属性 |
| defaultExpanded | Boolean | 描述是否默认展开 |
| queryDataSet | DataSet | 描述查询数据源 |
| queryFields | React.ReactElement[] | 描述自定义查询字段组件或默认组件属性 |
| queryFieldsLimit | ReactElement | 描述显示的查询字段的数量 |
| onQuery | (props: object) => void | 描述查询回调 |
| onReset | () => void | 描述重置回调 |

### rowSelection

选择功能的配置，使用请指明 rowKey。

| 属性名 | 说明 | 类型/默认值 |
| --- | --- | --- |
| columnWidth | 自定义列表选择框宽度 | 类型string\|number默认值60px |
| columnTitle | 自定义列表选择框标题 | 类型string\|React.ReactNode |
| columnIndex | 自定义列表选择框列顺序 | 类型number |
| fixed | 把选择框列固定在左边 | 类型boolean默认值left |
| getCheckboxProps | 选择框的默认属性配置 | 类型Function(record) |
| hideDefaultSelections | 自定义选择项时去掉『全选』『反选』两个默认选项 | 类型boolean默认值false |
| selectedRowKeys | 指定选中项的 key 数组，需要和 onChange 进行配合 | 类型string[]\|number[]默认值[] |
| selections | 自定义选择项配置项, 设为true时使用默认选择项 | 类型object[]\|boolean默认值true |
| type | 多选/单选，checkboxorradio | 类型string默认值checkbox |
| onChange | 选中项发生变化时的回调 | 类型Function(selectedRowKeys, selectedRows) |
| onSelect | 用户手动选择/取消选择某行的回调 | 类型Function(record, selected, selectedRows, nativeEvent) |
| onSelectAll | 用户手动选择/取消选择所有行的回调 | 类型Function(selected, selectedRows, changeRows) |
| onSelectInvert | 用户手动选择反选的回调 | 类型Function(selectedRows) |

使用请指明 rowKey。

### selection

| 属性名 | 说明 | 类型 |
| --- | --- | --- |
| key | React 需要的 key，建议设置 | 类型string |
| text | 选择项显示的文字 | 类型string\|React.ReactNode |
| onSelect | 选择项点击回调 | 类型Function(changeableRowKeys) |

### tablecomponents

| 属性名称 | 类型 | 描述 |
| --- | --- | --- |
| table | ReactNode | 描述覆盖表格组件 |
| header | { wrapper: ReactNode; row: ReactNode; cell: ReactNode; } | 描述覆盖表格 header 组件 |
| body | { wrapper: ReactNode; row: ReactNode; cell: ReactNode; } | 描述覆盖表格 body 组件 |



================================================================================
文件: Picture.md
路径: doc\Picture.md
================================================================================

# Picture 图片

## 何时使用

当用户需要图片展示时。

1.4.4 版本新增组件。

## 代码演示

## 基本使用

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Picture, Row, Col, SelectBox } from 'choerodon-ui/pro';

const { Option } = SelectBox;
const App = () => {
  const [objectFit, setObjectFit] = React.useState('fill');
  const [objectPosition, setObjectPosition] = React.useState('center');
  return (
    <Row>
      <Col span={24}>
        <div style={{ marginBottom: 20 }}>
          <SelectBox
            label="objectFit"
            value={objectFit}
            onChange={setObjectFit}
            labelLayout="float"
          >
            <Option value="fill">fill</Option>
            <Option value="contain">contain</Option>
            <Option value="cover">cover</Option>
            <Option value="none">none</Option>
            <Option value="scale-down">scale-down</Option>
          </SelectBox>
        </div>
      </Col>
      <Col span={24}>
        <SelectBox
          label="objectPosition"
          value={objectPosition}
          onChange={setObjectPosition}
          labelLayout="float"
        >
          <Option value="center">center</Option>
          <Option value="top">top</Option>
          <Option value="bottom">bottom</Option>
          <Option value="left">left</Option>
          <Option value="right">right</Option>
        </SelectBox>
      </Col>
      <Col span={12}>
        <Picture
          border
          src="https://zos.alipayobjects.com/rmsportal/jkjgkEfvpUPVyRjUImniVslZfWPnJuuZ.png"
          width={200}
          height={100}
```

## 图片组

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Picture } from 'choerodon-ui/pro';

const App = () => {
  return (
    <Picture.Provider>
      <Picture
        src="https://zos.alipayobjects.com/rmsportal/jkjgkEfvpUPVyRjUImniVslZfWPnJuuZ.png"
        width={100}
        height={100}
        objectFit="contain"
        block={false}
        index={0}
        lazy
      />
      <Picture
        style={{ backgroundColor: '#000' }}
        src="https://choerodon.io/img/nav/logo.png"
        width={100}
        height={100}
        objectFit="contain"
        block={false}
        index={1}
        lazy
      />
    </Picture.Provider>
  );
};

ReactDOM.render(<App />, document.getElementById('container'));
```

## 懒加载

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Picture } from 'choerodon-ui/pro';

const App = () => {
  return (
    <div style={{ height: 200, width: 200, overflow: 'auto' }}>
      <Picture
        style={{ marginTop: 300 }}
        src="https://zos.alipayobjects.com/rmsportal/jkjgkEfvpUPVyRjUImniVslZfWPnJuuZ.png"
        width={100}
        height={100}
        lazy
      />
    </div>
  );
};

ReactDOM.render(<App />, document.getElementById('container'));
```

## 状态

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Picture } from 'choerodon-ui/pro';

const App = () => {
  return (
    <>
      <Picture border block={false} width={100} height={100} />
      <Picture src="unkown" border block={false} width={100} height={100} />
      <Picture status="empty" border block={false} width={100} height={100} />
      <Picture status="error" border block={false} width={100} height={100} />
      <Picture status="loading" border block={false} width={100} height={100} />
    </>
  );
};

ReactDOM.render(<App />, document.getElementById('container'));
```

## API

| 属性 | 说明 | 类型/默认值/版本 |
| --- | --- | --- |
| width | 宽度 | 类型number |
| height | 高度 | 类型number |
| src | 路径 | 类型string |
| border | 边框 | 类型boolean |
| block | 块级图片 | 类型boolean默认值true |
| lazy | 懒加载 | 类型boolean |
| modalProps | 图片预览弹窗属性，详情见ModalProps | 类型ModalProps版本1.6.2 |
| preview | 可预览 | 类型boolean默认值true |
| previewUrl | 预览时的路径， 默认为src | 类型string |
| downloadUrl | 预览时的下载路径 | 类型string Function版本1.5.1 |
| previewTarget | 预览方式，若设置则通过 a 标签来预览， 默认是弹窗预览 | 类型string |
| index | 序号, 配合Picture.Provider进行组预览 | 类型number |
| status | 状态 | 类型'empty' 'loaded' 'error' 'loading' |
| objectFit | 填充方式,ObjectFit | 类型ObjectFit默认值'fill' |
| objectPosition | 指定图片在容器中的位置。 | 类型'top' 'right' 'bottom' 'left' 'center' string默认值'center' |
| sources | 根据媒体查询显示不同的图片，IE 不支持，Source | 类型Source[] |
| children | 代替图片渲染 | 类型ReactNode |

### Picture.Provider

图片组预览提供者

| 属性 | 说明 | 类型/默认值/版本 |
| --- | --- | --- |
| modalProps | 图片预览弹窗属性，详情见ModalProps | 类型ModalProps版本1.6.2 |

### Picture.Context

图片组预览上下文

| 属性 | 说明 | 类型/默认值 |
| --- | --- | --- |
| preview(index) | 打开预览 | 类型Function |

### ObjectFit

| 属性 | 说明 |
| --- | --- |
| fill | 不保证保持原有的比例，内容拉伸填充整个内容容器。 |
| contain | 保持原有尺寸比例。内容被缩放。 |
| cover | 保持原有尺寸比例。但部分内容可能被剪切。 |
| none | 保留原有元素内容的长度和宽度，也就是说内容不会被重置。 |
| scale-down | 保持原有尺寸比例。内容的尺寸与 none contain 中的一个相同，取决于它们两个之间谁得到的对象尺寸会更小一些。 |

### Source

| 属性 | 说明 | 类型/默认值 |
| --- | --- | --- |
| media | 媒体查询， 如(min-width: 800) | 类型string |
| srcset | 图片路径， 当媒体查询匹配时显示 | 类型string |



================================================================================
文件: Popconfirm.md
路径: doc\Popconfirm.md
================================================================================

# Popconfirm 气泡确认框

点击元素，弹出气泡式的确认框。

## 何时使用

目标元素的操作需要用户进一步的确认时，在目标元素附近弹出浮层提示，询问用户。

和confirm弹出的全屏居中模态对话框相比，交互形式更轻量。

## 代码演示

## 基本

最简单的用法。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Popconfirm, message } from 'choerodon-ui';

function confirm(e) {
  console.log(e);
  message.success('Click on Yes');
}

function cancel(e) {
  console.log(e);
  message.error('Click on No');
}

ReactDOM.render(
  <Popconfirm title="Are you sure delete this task?" onConfirm={confirm} onCancel={cancel} okText="Yes" cancelText="No">
    <a href="#">Delete</a>
  </Popconfirm>,
  document.getElementById('container'));
```

## 国际化

使用okText和cancelText自定义按钮文字。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Popconfirm } from 'choerodon-ui';

ReactDOM.render(
  <Popconfirm title="Are you sure？" okText="Yes" cancelText="No">
    <a href="#">Delete</a>
  </Popconfirm>,
  document.getElementById('container'));
```

## 位置

位置有十二个方向。如需箭头指向目标元素中心，可以设置arrowPointAtCenter。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Popconfirm, message, Button } from 'choerodon-ui';

const text = 'Are you sure delete this task?';

function confirm() {
  message.info('Click on Yes.');
}

ReactDOM.render(
  <div className="demo">
    <div style={{ marginLeft: 70, whiteSpace: 'nowrap' }}>
      <Popconfirm placement="topLeft" title={text} onConfirm={confirm} okText="Yes" cancelText="No">
        <Button>TL</Button>
      </Popconfirm>
      <Popconfirm placement="top" title={text} onConfirm={confirm} okText="Yes" cancelText="No">
        <Button>Top</Button>
      </Popconfirm>
      <Popconfirm placement="topRight" title={text} onConfirm={confirm} okText="Yes" cancelText="No">
        <Button>TR</Button>
      </Popconfirm>
    </div>
    <div style={{ width: 70, float: 'left' }}>
      <Popconfirm placement="leftTop" title={text} onConfirm={confirm} okText="Yes" cancelText="No">
        <Button>LT</Button>
      </Popconfirm>
      <Popconfirm placement="left" title={text} onConfirm={confirm} okText="Yes" cancelText="No">
        <Button>Left</Button>
      </Popconfirm>
      <Popconfirm placement="leftBottom" title={text} onConfirm={confirm} okText="Yes" cancelText="No">
        <Button>LB</Button>
      </Popconfirm>
    </div>
    <div style={{ width: 70, marginLeft: 304 }}>
      <Popconfirm placement="rightTop" title={text} onConfirm={confirm} okText="Yes" cancelText="No">
```

## 条件触发

可以判断是否需要弹出。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Popconfirm, message } from 'choerodon-ui';
import { Switch } from 'choerodon-ui/pro';

class App extends React.Component {
  state = {
    visible: false,
    condition: true, // Whether meet the condition, if not show popconfirm.
  };

  changeCondition = (value) => {
    this.setState({ condition: value });
  };

  confirm = () => {
    this.setState({ visible: false });
    message.success('Next step.');
  };

  cancel = () => {
    this.setState({ visible: false });
    message.error('Click on cancel.');
  };

  handleVisibleChange = (visible) => {
    if (!visible) {
      this.setState({ visible });
      return;
```

## API

| 属性名 | 说明 | 类型/默认值 |
| --- | --- | --- |
| cancelText | 取消按钮文字 | 类型string默认值取消 |
| okText | 确认按钮文字 | 类型string默认值确定 |
| okType | 确认按钮类型 | 类型string默认值primary |
| title | 确认框的描述 | 类型ReactNode () => ReactNode |
| onCancel | 点击取消的回调 | 类型function(e) |
| onConfirm | 点击确认的回调 | 类型function(e) |

更多属性请参考Popover 共同的API。

## 注意

请确保Popconfirm的子元素能接受onMouseEnter、onMouseLeave、onFocus、onClick事件。



================================================================================
文件: Popover.md
路径: doc\Popover.md
================================================================================

# Popover 气泡卡片

点击/鼠标移入元素，弹出气泡式的卡片浮层。

## 何时使用

当目标元素有进一步的描述和相关操作时，可以收纳到卡片中，根据用户的操作行为进行展现。

和Tooltip的区别是，用户可以对浮层上的元素进行操作，因此它可以承载更复杂的内容，比如链接或按钮等。

## 代码演示

## 基本

最简单的用法，浮层的大小由内容区域决定。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Popover, Button } from 'choerodon-ui';

const content = (
  <div>
    <p>Content</p>
    <p>Content</p>
  </div>
);

ReactDOM.render(
  <Popover content={content} title="Title">
    <Button type="primary">Hover me</Button>
  </Popover>,
  document.getElementById('container'));
```

## 四种触发方式

鼠标移入、聚集、点击。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Popover, Button } from 'choerodon-ui';

const content = (
  <div>
    <p>Content</p>
    <p>Content</p>
  </div>
);

ReactDOM.render(
  <div>
    <Popover content={content} title="Title" trigger="hover">
      <Button>Hover me</Button>
    </Popover>
    <Popover content={content} title="Title" trigger="focus">
      <Button>Focus me</Button>
    </Popover>
    <Popover content={content} title="Title" trigger="click">
      <Button>Click me</Button>
    </Popover>
    <Popover content={content} title="Title" trigger="contextMenu">
      <Button>Right mouse click</Button>
    </Popover>
  </div>,
  document.getElementById('container'),
);
```

## 位置

位置有十二个方向。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Popover, Button } from 'choerodon-ui';

const text = <span>Title</span>;
const content = (
  <div>
    <p>Content</p>
    <p>Content</p>
  </div>
);

const buttonWidth = 70;

ReactDOM.render(
  <div className="demo">
    <div style={{ marginLeft: buttonWidth, whiteSpace: 'nowrap' }}>
      <Popover placement="topLeft" title={text} content={content} trigger="click">
        <Button>TL</Button>
      </Popover>
      <Popover placement="top" title={text} content={content} trigger="click">
        <Button>Top</Button>
      </Popover>
      <Popover placement="topRight" title={text} content={content} trigger="click">
        <Button>TR</Button>
      </Popover>
    </div>
    <div style={{ width: buttonWidth, float: 'left' }}>
      <Popover placement="leftTop" title={text} content={content} trigger="click">
        <Button>LT</Button>
      </Popover>
      <Popover placement="left" title={text} content={content} trigger="click">
        <Button>Left</Button>
      </Popover>
      <Popover placement="leftBottom" title={text} content={content} trigger="click">
        <Button>LB</Button>
```

## 从浮层内关闭

使用visible属性控制浮层显示。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Popover, Button } from 'choerodon-ui';

class App extends React.Component {
  state = {
    visible: false,
  }

  hide = () => {
    this.setState({
      visible: false,
    });
  }

  handleVisibleChange = (visible) => {
    this.setState({ visible });
  }

  render() {
    return (
      <Popover
        content={<a onClick={this.hide}>Close</a>}
        title="Title"
        trigger="click"
        visible={this.state.visible}
        onVisibleChange={this.handleVisibleChange}
      >
        <Button type="primary">Click me</Button>
```

## 箭头指向

设置了arrowPointAtCenter后，箭头将指向目标元素的中心。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Popover, Button } from 'choerodon-ui';

const text = <span>Title</span>;
const content = (
  <div>
    <p>Content</p>
    <p>Content</p>
  </div>
);

ReactDOM.render(
  <div>
    <Popover placement="topLeft" title={text} content={content}>
      <Button>Align edge / 边缘对齐</Button>
    </Popover>
    <Popover placement="topLeft" title={text} content={content} arrowPointAtCenter>
      <Button>Arrow points to center / 箭头指向中心</Button>
    </Popover>
  </div>,
  document.getElementById('container'));
```

## API

| 属性名 | 说明 | 类型/默认值 |
| --- | --- | --- |
| content | 卡片内容 | 类型ReactNode () => ReactNode |
| title | 卡片标题 | 类型ReactNode () => ReactNode |

## 共同的API

以下 API 为 Tooltip、Popconfirm、Popover 共享的 API。

| 属性名 | 说明 | 类型/默认值 |
| --- | --- | --- |
| arrowPointAtCenter | 箭头是否指向目标元素中心 | 类型boolean默认值false |
| autoAdjustOverflow | 气泡被遮挡时自动调整位置 | 类型boolean默认值true |
| defaultVisible | 默认是否显隐 | 类型boolean默认值false |
| getPopupContainer | 浮层渲染父节点，默认渲染到 body 上。2.5.2之前请使用getTooltipContainer | 类型Function(triggerNode)默认值() => document.body |
| mouseEnterDelay | 鼠标移入后延时多少才显示 Tooltip，单位：秒 | 类型number默认值0 |
| mouseLeaveDelay | 鼠标移出后延时多少才隐藏 Tooltip，单位：秒 | 类型number默认值0.1 |
| overlayClassName | 卡片类名 | 类型string默认值无 |
| overlayStyle | 卡片样式 | 类型object默认值无 |
| placement | 气泡框位置，可选topleftrightbottomtopLefttopRightbottomLeftbottomRightleftTopleftBottomrightToprightBottom | 类型string默认值top |
| trigger | 触发行为，可选hover/focus/click/contextMenu | 类型string默认值hover |
| visible | 用于手动控制浮层显隐 | 类型boolean默认值false |
| onVisibleChange | 显示隐藏的回调 | 类型(visible) => void默认值无 |

## 注意

请确保Popover的子元素能接受onMouseEnter、onMouseLeave、onFocus、onClick事件。



================================================================================
文件: Progress.md
路径: doc\Progress.md
================================================================================

# Progress 进度条

展示操作的当前进度。

## 何时使用

在操作需要较长时间才能完成时，为用户显示该操作的当前进度和状态。

- 当一个操作会打断当前界面，或者需要在后台运行，且耗时可能超过 2 秒时；
- 当需要显示一个操作完成的百分比时。

## 代码演示

## 进度条

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Progress } from 'choerodon-ui/pro';

ReactDOM.render(
  <div>
    <Progress value={40} />
    <Progress value={50} status="active" />
    <Progress value={70} status="exception" />
    <Progress value={50} status="success" />
    <Progress value={40} showInfo={false} />
  </div>,
  document.getElementById('container')
);
```

## 受控

```javascript
import React from 'react';
import ReactDOM from 'react-dom';

import { Progress } from 'choerodon-ui/pro';

class App extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      completed: 0,
      status: 'active',
    };
  }

  componentDidMount() {
    this.timer = setTimeout(() => this.progress(5), 1000);
  }

  componentWillUnmount() {
    clearTimeout(this.timer);
  }

  progress(completed) {
    if (completed > 100) {
      this.setState({
        completed: 100,
        status: 'success',
      });
    } else {
      this.setState({
        completed,
      });
```

## 数据源

绑定数据源。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, Progress } from 'choerodon-ui/pro';

class App extends React.Component {
  ds = new DataSet({
    autoCreate: true,
    fields: [
      { name: 'percent', type: 'number', defaultValue: 20 },
    ],
  });

  render() {
    return <Progress dataSet={this.ds} name="percent" />;
  }
}

ReactDOM.render(
  <App />,
  document.getElementById('container')
);
```

## 自定义文字格式

自定义文字格式。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Progress } from 'choerodon-ui/pro';

function format() {
  return 'Done';
}

ReactDOM.render(
  <Progress value={100} format={format} status="success" />,
  document.getElementById('container')
);
```

## 圆形进度条

圆形进度条。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Progress } from 'choerodon-ui/pro';

function format() {
  return 'Done';
}

ReactDOM.render(
  <div>
    <Progress
      style={{ marginRight: 10 }}
      value={75}
      type="circle"
      size="small"
    />
    <Progress
      style={{ marginRight: 10 }}
      value={100}
      type="circle"
      format={format}
      status="success"
    />
    <Progress value={35} type="circle" status="exception" size="large" />
  </div>,
  document.getElementById('container'),
);
```

## 仪表盘进度条

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Progress } from 'choerodon-ui/pro';

ReactDOM.render(
  <div>
    <Progress style={{ marginRight: 10 }} value={75} type="dashboard" />
    <Progress
      style={{ marginRight: 10 }}
      value={100}
      type="dashboard"
      status="success"
    />
    <Progress value={25} type="dashboard" status="exception" />
  </div>,
  document.getElementById('container'),
);
```

## 加载

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Progress } from 'choerodon-ui/pro';

ReactDOM.render(
  <div>
    <Progress style={{ marginRight: 10 }} type="loading" size="small" />
    <Progress style={{ marginRight: 10 }} type="loading" status="success" />
    <Progress type="loading" size="large" status="exception" />
  </div>,
  document.getElementById('container'),
);
```

## 进度圈动态展示

会动的进度条才是好进度条。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Form, Progress, NumberField } from 'choerodon-ui/pro';

class App extends React.Component {
  state = {
    percent: 0,
  };

  render() {
    const { percent } = this.state;
    return (
      <div style={{ display: 'flex' }}>
        <Progress type="circle" percent={percent} />
        <Form style={{ width: 200, paddingTop: 30 }}>
          <NumberField
            label="进度"
            addonAfter="%"
            value={percent}
            onChange={(value) => this.setState({ percent: value })}
            step={1}
            min={0}
            max={100}
          />
        </Form>
      </div>
    );
  }
}

ReactDOM.render(<App />, document.getElementById('container'));
```

## 分段进度条

标准的进度条。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Tooltip, Progress } from 'choerodon-ui/pro';

ReactDOM.render(
  <Tooltip title="3 done / 3 in progress / 4 to do">
    <Progress percent={60} successPercent={30} />
  </Tooltip>,
  document.getElementById('container'),
);
```

## API

Progress 的属性说明如下：

| 属性名 | 说明 | 类型/默认值 |
| --- | --- | --- |
| value | 当前百分比值，同 percent,受控。 | 类型number |
| dataSet | 数据源 | 类型DataSet |
| name | 字段名 | 类型string |
| format | 内容的模板函数 | 类型function(percent)默认值percent => percent '%' |
| gapDegree(type=circle) | 圆形进度条缺口角度，可选值0~360 | 类型number默认值0 |
| gapPosition(type=circle) | 圆形进度条缺口位置 | 类型Enum('top', 'bottom', 'left', 'right')默认值top |
| percent | 百分比 | 类型number默认值0 |
| showInfo | 是否显示进度数值或状态图标 | 类型boolean默认值true |
| showPointer(type=dashboard) | 是否显示指针 | 类型boolean默认值false |
| status | 状态，可选:successexceptionactive | 类型string |
| strokeWidth(type=line) | 进度条的宽度，单位 px | 类型number默认值10 |
| strokeWidth(type=circle) | 圆形进度条线的宽度，单位是进度条画布宽度的百分比 | 类型number默认值6 |
| type | 类型, 可选linecircledashboardloading | 类型string默认值line |
| width(type=circle) | 圆形进度条画布的宽度, 单位 px | 类型number默认值132 |
| successPercent | 已完成的分段百分比,type=line时有效 | 类型number默认值0 |
| strokeColor | 进度条的色彩 | 类型string |



================================================================================
文件: Radio.md
路径: doc\Radio.md
================================================================================

# Radio 单选框

单选框表单控件。

## 何时使用

- 用于在多个备选项中选中单个状态。
- 和 Select 的区别是，Radio 所有选项默认可见，方便用户在比较中选择，因此选项不宜过多。

## 代码演示

## 基本使用

请确保Radio具有相同的name属性以实现单选功能。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Radio } from 'choerodon-ui/pro';

function handleChange(value) {
  console.log('[basic]', value);
  document.addEventListener(
    'click',
    {
      handleEvent(e) {
        console.log(e);
      },
    },
    { capture: false, once: true },
  );
}

ReactDOM.render(
  <form>
    <Radio name="base" value="A" onChange={handleChange} defaultChecked>
      A
    </Radio>
    <Radio name="base" value="B" onChange={handleChange}>
      B
    </Radio>
    <Radio name="base" value="C" onChange={handleChange}>
      C
    </Radio>
```

## 受控单选框

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Radio } from 'choerodon-ui/pro';

class App extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      value: 'A',
    };
  }

  handleChange = (value) => {
    console.log('[controlled]', value, '[oldValue]', this.state.value);
    this.setState({
      value,
    });
  };

  render() {
    const { value } = this.state;
    return (
      <form>
        <Radio
          name="controlled"
          value="A"
          checked={value === 'A'}
          onChange={this.handleChange}
```

## 绑定数据源

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, Radio } from 'choerodon-ui/pro';

function handleDataSetChange({ value, oldValue }) {
  console.log('[dataset newValue]', value, '[oldValue]', oldValue);
}

const data = [{ bind: 'A' }];

class App extends React.Component {
  ds = new DataSet({
    data,
    fields: [{ name: 'bind' }],
    events: {
      update: handleDataSetChange,
    },
  });

  render() {
    return (
      <form>
        <Radio dataSet={this.ds} name="bind" value="A">
          A
        </Radio>
        <Radio dataSet={this.ds} name="bind" value="B">
          B
        </Radio>
```

## 只读

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Radio, DataSet } from 'choerodon-ui/pro';

const data = [{ rd: 'C' }];

class App extends React.Component {
  ds = new DataSet({
    data,
    fields: [{ name: 'rd', readOnly: true }],
  });

  render() {
    return (
      <form>
        <Radio dataSet={this.ds} name="rd" disabled>
          A
        </Radio>
        <Radio dataSet={this.ds} name="rd" readOnly>
          B
        </Radio>
        <Radio dataSet={this.ds} name="rd" value="C">
          C
        </Radio>
      </form>
    );
  }
}
```

## 按钮显示效果

显示成按钮。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Radio } from 'choerodon-ui/pro';

function handleChange(value, oldValue) {
  console.log('[button]', value, '[oldValue]', oldValue);
}

ReactDOM.render(
  <form>
    <Radio
      mode="button"
      name="base"
      value="A"
      onChange={handleChange}
      defaultChecked
    >
      A
    </Radio>
    <Radio mode="button" name="base" value="B" onChange={handleChange}>
      B
    </Radio>
    <Radio mode="button" name="base" value="C" onChange={handleChange}>
      C
    </Radio>
  </form>,
  document.getElementById('container'),
);
```

## API

| 属性名 | 说明 | 类型/默认值 |
| --- | --- | --- |
| checked | <受控>是否选中 | 类型boolean |
| defaultChecked | 初始是否选中 | 类型boolean默认值false |
| mode | 显示模式，可选值：box \| button | 类型string默认值box |

更多属性请参考Field。



================================================================================
文件: Range.md
路径: doc\Range.md
================================================================================

# Range 滑块

滑动型输入器，展示当前值和可选范围。

## 何时使用

当用户需要在数值区间/自定义区间内进行选择时，可为连续或离散值。

## 代码演示

## 基本使用

带有 range 控件的数字字段。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';

import { Range } from 'choerodon-ui/pro';

ReactDOM.render(
  <div style={{ height: '.4rem' }}>
    <Range min={0} max={1} step={0.01} />
    <Range
      style={{ margin: '0.2rem 0 0 0' }}
      value={20}
      min={0}
      max={100}
      step={5}
      disabled
    />
  </div>,
  document.getElementById('container'),
);
```

## 受控

```javascript
import React from 'react';
import ReactDOM from 'react-dom';

import { Range, TextField, Row, Col } from 'choerodon-ui/pro';

class App extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      value: 30,
    };
  }

  handleChange = (value) => {
    this.setState({
      value,
    });
  };

  render() {
    return (
      <Row>
        <Col span={4}>
          <TextField value={this.state.value} />
        </Col>
        <Col span={20}>
          <Range
            onChange={this.handleChange}
            value={this.state.value}
            name="range"
```

## 绑定数据源

绑定数据源。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';

import { DataSet, Range } from 'choerodon-ui/pro';

function handleDataSetChange({ value, oldValue }) {
  console.log('[dataset]', value, '[oldValue]', oldValue);
}

class App extends React.Component {
  ds = new DataSet({
    autoCreate: true,
    fields: [
      { name: 'range', defaultValue: 20, min: 10, max: 100, step: 1 },
    ],
    events: {
      update: handleDataSetChange,
    },
  });

  render() {
    return <Range dataSet={this.ds} name="range" />;
  }
}

ReactDOM.render(
  <App />,
```

## 垂直

垂直方向的 Range，需配置滑块组件或包裹容器自身高度样式。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Range, Row, Col } from 'choerodon-ui/pro';

ReactDOM.render(
  <>
    <Row>
      <Col span={1}>
        <div style={{ height: 200 }}>
          <Range vertical min={0} max={100} step={5} defaultValue={30} />
        </div>
      </Col>
      <Col span={1}>
        <Range
          vertical
          style={{ height: 200 }}
          min={0}
          max={100}
          step={5}
          defaultValue={60}
        />
      </Col>
    </Row>
  </>,
  document.getElementById('container'),
);
```

## 设置标签

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, Range } from 'choerodon-ui/pro';

function handleDataSetChange({ value, oldValue }) {
  console.log('[dataset]', value, '[oldValue]', oldValue);
}

class App extends React.Component {
  ds = new DataSet({
    autoCreate: true,
    fields: [{ name: 'range', defaultValue: 20, min: 10, max: 100, step: 1 }],
    events: {
      update: handleDataSetChange,
    },
  });

  render() {
    return (
      <div style={{ display: 'flex', flexDirection: 'column' }}>
        <div style={{ width: '90%' }}>
          <Range
            dataSet={this.ds}
            name="range"
            tipFormatter={(value) => `${value}%`}
            marks={{
              25: '当前进度 25%',
              50: '当前进度 50%',
              100: '当前进度 100%',
              60: '当前进度 60%',
              65: '当前进度 65%',
            }}
          />
        </div>
        <div style={{ height: 200, margin: '100px 0 0 100px' }}>
          <Range
            dataSet={this.ds}
            vertical
            name="range"
            tipFormatter={(value) => `${value}%`}
            marks={{
              25: '温度 25℃',
              40: '温度 40℃',
              100: '温度 100℃',
```

## API

| 属性名 | 说明 | 类型/默认值/版本 |
| --- | --- | --- |
| defaultValue | 设置初始取值。当range为false时，使用number，否则用[number, number] | 类型number\|number[]默认值0 or [0, 0]版本1.5.0-beta.0 |
| disabled | 值为true时，滑块为禁用状态 | 类型boolean默认值false版本1.5.0-beta.0 |
| dots | 是否只能拖拽到刻度上 | 类型boolean默认值false版本1.5.0-beta.0 |
| included | marks不为空对象时有效，值为 true 时表示值为包含关系，false 表示并列 | 类型boolean默认值true版本1.5.0-beta.0 |
| marks | 刻度标记，key 的类型必须为number且取值在闭区间 [min, max] 内，每个标签可以单独设置样式 | 类型object默认值{ number: string\|ReactNode or style: object, label: }版本1.5.0-beta.0 |
| max | 最大值 | 类型number默认值100 |
| min | 最小值 | 类型number默认值0 |
| step | 步长，取值必须大于 0，并且可被 (max - min) 整除 | 类型number默认值1 |
| vertical | 是否垂直 | 类型boolean默认值false |
| range | 双滑块模式 | 类型boolean默认值false版本1.5.0-beta.0 |
| tipFormatter | Slider 会把当前值传给tipFormatter，并在 Tooltip 中显示tipFormatter的返回值，若为 null，则隐藏 Tooltip。 | 类型Function\|null默认值IDENTITY版本1.5.0-beta.0 |
| tooltipVisible | 值为 true 时，Tooltip 将会始终显示；否则始终不显示，哪怕在拖拽及移入时 | 类型boolean默认值true版本1.5.3 |
| value | 设置当前取值。当range为false时，使用number，否则用[number, number] | 类型number\|number[]版本1.5.0-beta.0 |
| onAfterChange | 与onmouseup触发时机一致，把当前值作为参数传入。 | 类型Function(value)版本1.5.0-beta.0 |
| onChange | 当 Slider 的值发生改变时，会触发 onChange 事件，并把改变后的值作为参数传入。 | 类型Function(value)版本1.5.0-beta.0 |

更多属性请参考FormField。



================================================================================
文件: Rate.md
路径: doc\Rate.md
================================================================================

# Rate 评分

## 何时使用

- 对评价进行展示
- 对事物进行快速的评级操作

## 代码演示

## 基本使用

最简单的用法。


```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Rate } from 'choerodon-ui/pro';

ReactDOM.render(<Rate />, document.getElementById('container'));
```

## 绑定数据源

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Rate, Form, DataSet, Button, Radio } from 'choerodon-ui/pro';

class App extends React.Component {
  state = {
    labelLayout: 'horizontal',
  };

  ds = new DataSet({
    autoCreate: true,
    fields: [
      { name: 'rate', label: '评分测试', type: 'number', required: true },
    ],
  });

  changeLayout = (value) => {
    this.setState({ labelLayout: value });
  };

  render() {
    return (
      <>
        <div>
          <Radio
            name="labelLayout"
            value="horizontal"
            onChange={this.changeLayout}
            defaultChecked
          >
            horizontal
          </Radio>
          <Radio
            name="labelLayout"
            value="placeholder"
            onChange={this.changeLayout}
          >
```

## 半星

支持选中半星。


```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Rate } from 'choerodon-ui/pro';

ReactDOM.render(
  <Rate allowHalf defaultValue={2.5} />,
  document.getElementById('container'),
);
```

## 只读

只读，无法进行鼠标交互。


```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Rate } from 'choerodon-ui/pro';

ReactDOM.render(
  <Rate disabled defaultValue={2} />,
  document.getElementById('container'),
);
```

## 清除

支持允许或者禁用清除。



```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Rate } from 'choerodon-ui/pro';

ReactDOM.render(
  <div>
    <Rate defaultValue={3} /> allowClear: true
    <br />
    <Rate allowClear={false} defaultValue={3} /> allowClear: false
  </div>,
  document.getElementById('container'),
);
```

## 其他字符

可以将星星替换为其他字符，比如字母，数字，字体图标甚至中文。


- AA
- AA
- AA
- AA
- AA

- 好好
- 好好
- 好好
- 好好
- 好好

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Rate, Icon } from 'choerodon-ui';

ReactDOM.render(
  <div>
    <Rate character={<Icon type="heart" />} allowHalf />
    <br />
    <Rate character="A" allowHalf style={{ fontSize: 36 }} />
    <br />
    <Rate character="好" allowHalf />
  </div>,
  document.getElementById('container'),
);
```

## API

| 属性 | 说明 | 类型/默认值 |
| --- | --- | --- |
| onChange | 值变化回调 | 类型(value, oldValue, form) => void |
| allowClear | 是否允许再次点击后清除 | 类型boolean默认值true |
| allowHalf | 是否允许半选 | 类型boolean默认值false |
| autoFocus | 自动获取焦点 | 类型boolean默认值false |
| character | 自定义字符 | 类型ReactNode默认值<Icon type="star" /> |
| className | 自定义样式类名 | 类型string默认值- |
| count | star 总数 | 类型number默认值5 |
| defaultValue | 默认值 | 类型number默认值0 |
| disabled | 只读，无法进行交互 | 类型boolean默认值false |
| style | 自定义样式对象 | 类型object默认值- |
| value | 当前数，受控值 | 类型number默认值- |
| onBlur | 失去焦点时的回调 | 类型Function()默认值- |
| onFocus | 获取焦点时的回调 | 类型Function()默认值- |
| onHoverChange | 鼠标经过时数值变化的回调 | 类型Function(value: number)默认值- |
| onKeyDown | 按键回调 | 类型Function(event)默认值- |

## 方法

| 名称 | 描述 |
| --- | --- |
| blur() | 移除焦点 |
| focus() | 获取焦点 |

更多属性请参考FormField。



================================================================================
文件: Responsive.md
路径: doc\Responsive.md
================================================================================

# Responsive 响应式组件

响应式组件。

## 何时使用

根据屏幕大小响应式展示。

## 代码演示

## 基本使用

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Responsive, Button } from 'choerodon-ui';

class App extends React.Component {
  state = { disabled: true };

  handleClick = () => {
    this.setState({ disabled: !this.state.disabled });
  };

  handleChange = (items) => {
    console.log('responsive change', items);
  };

  renderResponsive = ([size, color], disabled) => {
    const style = disabled
      ? { width: 100, height: 100, backgroundColor: 'gray' }
      : {
          width: size,
          height: size,
          backgroundColor: color,
        };
    return <div style={style} />;
  };

  render() {
    const { disabled } = this.state;
    const items = [
      { xs: 100, sm: 150, md: 200, lg: 250, xl: 300, xxl: 350 }, // responsive size
      {
        xs: 'red',
        sm: 'green',
        md: 'blue',
        lg: 'black',
        xl: 'yellow',
        xxl: 'pink',
      }, // responsive color
      new Date(), // static object
      [1, 2, 3], // static array
      [
        { xs: 100, sm: 150, md: 200, lg: 250, xl: 300, xxl: 350 },
        {
          xs: 'red',
```

## API

| 属性 | 说明 | 类型/默认值 |
| --- | --- | --- |
| items | 响应对象队列，与children的renderProps参数及onChange的参数一一对应 | 类型object[]默认值- |
| disabled | 是否禁用响应 | 类型boolean默认值- |
| children | 子元素 | 类型ReactNode (responsiveItems: any[]) => ReactNode默认值- |
| onChange | 响应值变更钩子 | 类型(responsiveItems: any[]) => void默认值- |

## 方法

| 名称 | 描述 |
| --- | --- |
| blur() | 移除焦点 |
| focus() | 获取焦点 |

### BreakPoints

| 键值 | 响应视宽 |
| --- | --- |
| xs | 576px |
| sm | >= 576px |
| md | >= 768px |
| lg | >= 992px |
| xl | >= 1200px |
| xxl | >= 1600px |



================================================================================
文件: Result.md
路径: doc\Result.md
================================================================================

# Result 结果

用于反馈一系列操作任务的处理结果。

## 何时使用

当有重要操作需告知用户处理结果，且反馈内容较为复杂时使用。

## 代码演示

## Success

成功的结果。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Result, Button } from 'choerodon-ui';

ReactDOM.render(
  <Result
    status="success"
    title="Successfully Purchased Cloud Server ECS!"
    subTitle="Order number: 2017182818828182881 Cloud server configuration takes 1-5 minutes, please wait."
    extra={[
      <Button funcType="raised" type="primary" key="console">
        Go Console
      </Button>,
      <Button funcType="raised" key="buy">
        Buy Again
      </Button>,
    ]}
  />,
  document.getElementById('container'),
);
```

## Info

展示处理结果。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Result, Button } from 'choerodon-ui';

ReactDOM.render(
  <Result
    title="Your operation has been executed"
    extra={
      <Button funcType="raised" type="primary" key="console">
        Go Console
      </Button>
    }
  />,
  document.getElementById('container'),
);
```

## Warning

警告类型的结果。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Result, Button } from 'choerodon-ui';

ReactDOM.render(
  <Result
    status="warning"
    title="There are some problems with your operation."
    extra={
      <Button funcType="raised" type="primary" key="console">
        Go Console
      </Button>
    }
  />,
  document.getElementById('container'),
);
```

## 403

你没有此页面的访问权限。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Result, Button } from 'choerodon-ui';

ReactDOM.render(
  <Result
    status="403"
    title="403"
    subTitle="Sorry, you are not authorized to access this page."
    extra={
      <Button funcType="raised" type="primary">
        Back Home
      </Button>
    }
  />,
  document.getElementById('container'),
);
```

## 404

此页面未找到。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Result, Button } from 'choerodon-ui';

ReactDOM.render(
  <Result
    status="404"
    title="404"
    subTitle="Sorry, the page you visited does not exist."
    extra={
      <Button funcType="raised" type="primary">
        Back Home
      </Button>
    }
  />,
  document.getElementById('container'),
);
```

## 500

服务器发生了错误。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Result, Button } from 'choerodon-ui';

ReactDOM.render(
  <Result
    status="500"
    title="500"
    subTitle="Sorry, something went wrong."
    extra={
      <Button funcType="raised" type="primary">
        Back Home
      </Button>
    }
  />,
  document.getElementById('container'),
);
```

## 自定义 icon

自定义 icon。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Result, Button, Icon } from 'choerodon-ui';

ReactDOM.render(
  <Result
    icon={<Icon type="wb_incandescent-o" />}
    title="Great, we have done all the operations!"
    extra={
      <Button funcType="raised" type="primary">
        Next
      </Button>
    }
  />,
  document.getElementById('container'),
);
```

## 自定义状态渲染

自定义状态渲染内容。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Result, Button } from 'choerodon-ui';

ReactDOM.render(
  <Result
    statusRenderer={{
      '204': (
        <img
          style={{ width: '200px' }}
          alt="example"
          src="https://os.alipayobjects.com/rmsportal/QBnOOoLaAfKPirc.png"
        />
      ),
    }}
    status={204}
    title="204"
    subTitle="客户端发送给客户端的请求得到了成功处理，但在返回的响应报文中不含实体的主体部分"
    extra={
      <Button funcType="raised" type="primary">
        No Content, Go Home Page
      </Button>
    }
  />,
  document.getElementById('container'),
);
```

## API

| 属性名 | 说明 | 类型/默认值 |
| --- | --- | --- |
| title | title 文字 | 类型ReactNode默认值- |
| subTitle | subTitle 文字 | 类型ReactNode默认值- |
| status | 结果的状态,决定图标和颜色 | 类型success\|error\|info\|warning\|404\|403\|500默认值info |
| icon | 自定义 icon | 类型ReactNode默认值- |
| extra | 操作区 | 类型ReactNode默认值- |
| statusRenderer | 自定义状态展示,可以覆盖现有状态展示，也可以增加状态展示，支持全局配置 | 类型object默认值- |



================================================================================
文件: RichText.md
路径: doc\RichText.md
================================================================================

# RichText 富文本编辑器

基于 react-quill 封装的富文本编辑器，在其他系统解析该组件富文本内容，可以使用 quill 组件。

## 何时使用

当用户需要富文本编辑输入时。

## 代码演示

## 基本使用

readOnly

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { RichText, Switch } from 'choerodon-ui/pro';

const style = { height: 200 };

class App extends React.Component {
  state = { readOnly: true };

  handleChange = (value) => {
    this.setState({ readOnly: value });
  };


  render() {
    const { readOnly } = this.state;
    return (
      <>
        <RichText readOnly={readOnly} style={style} defaultValue={[{"insert":"readOnly"}]} />
        <Switch style={{ paddingTop: 10 }} onChange={this.handleChange} checked={readOnly}>readOnly</Switch>
      </>
    );
  }
}

ReactDOM.render(<App />, document.getElementById('container'));
```

## 简单的格式化工具栏

简单的格式化工具栏，数组写法工具栏在 RichText 组件内，外层包裹需考虑工具栏高度。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { RichText, Switch } from 'choerodon-ui/pro';

const style = { height: 200 };

const options = {
  modules: {
    toolbar: [
      ['bold', 'italic', 'underline', 'strike'],        // toggled buttons
      ['blockquote', 'code-block'],

      [{ 'header': 1 }, { 'header': 2 }],               // custom button values
      [{ 'list': 'ordered' }, { 'list': 'bullet' }],
      [{ 'script': 'sub' }, { 'script': 'super' }],      // superscript/subscript
      [{ 'indent': '-1' }, { 'indent': '+1' }],          // outdent/indent
      [{ 'direction': 'rtl' }],                         // text direction

      [{ 'size': ['small', false, 'large', 'huge'] }],  // custom dropdown
      [{ 'header': [1, 2, 3, 4, 5, 6, false] }],

      [{ 'color': [] }, { 'background': [] }],          // dropdown with defaults from theme
      [{ 'font': [] }],
      [{ 'align': [] }],

      ['clean'],                                         // remove formatting button
    ],
    imageDropAndPaste: false,
  },
};

class App extends React.Component {
  state = { mode: 'editor' };

  handlePreviewChange = (value) => {
    console.log(value);
    this.setState({ mode: value ? 'preview' : 'editor' });
  };
```

## 受控

Controlled Value

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { RichText } from 'choerodon-ui/pro';

const style = { height: 200 };


class App extends React.Component {
  state = {
    value: [{insert: "Controlled Value"}],
    // string 类型值会被转为 Delta 对象
    // value: "Controlled Value",
  };

  handleChange = (value, oldValue) => {
    console.log('handleChange', value, oldValue)
    this.setState({ value });
  };

  render() {
    return <RichText value={this.state.value} style={style} onChange={this.handleChange} />;
  }
}

ReactDOM.render(<App />, document.getElementById('container'));
```

## 绑定数据源

defaultValue

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { RichText, DataSet, Button } from 'choerodon-ui/pro';

const style = { height: 200 };

const defaultValue = [{ 'insert': 'defaultValue' }];

class App extends React.Component {
  ds = new DataSet({
    autoCreate: true,
    fields: [
      { name: 'content', type: 'object', defaultValue, required: true },
    ],
  });

  toData = () => {
    console.log('toData', this.ds.toData());
  };

  toJSONData = () => {
    console.log('toJSONData', this.ds.toJSONData());
  };

  getRecord = () => {
    console.log('getRecord toData', this.ds.current.get('content'));
  };

  setRecord = () => {
    this.ds.current.set('content', [{ 'insert': 'set value' }]);
    // set string 类型值会被转为 Delta 对象，并出现 type 类型转换 warning
    // this.ds.current.set('content',"set string value");
  };

  handleChange = (value, oldValue) => {
    console.log('handleChange', value, oldValue);
  };

  render() {
```

## 自定义工具栏

自定义工具栏。

defaultValue

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { RichText, DataSet, Modal } from 'choerodon-ui/pro';
import { Icon } from 'choerodon-ui';
import { observer } from 'mobx-react';

const defaultValue = [{ insert: 'defaultValue' }];

const style = { height: 200 };

const modalKey = Modal.key();

const { RichTextViewer } = RichText;

@observer
class App extends React.Component {
  ds = new DataSet({
    autoCreate: true,
    fields: [{ name: 'content', type: 'object', defaultValue, required: true }],
  });

  handleFullScreenClick = () => {
    console.log('handleFullScreenClick');
    Modal.open({
      key: modalKey,
      title: 'Full screen',
      children: (
        <RichText
          toolbar={this.renderCustomToolbar}
          dataSet={this.ds}
          name="content"
          style={{ height: 600 }}
        />
      ),
      fullScreen: true,
    });
  };

  renderCustomToolbar = ({ id, dataSet }) => {
    console.log('id', id, 'dataSet', dataSet);
    return (
      <div id={id}>
        <button type="button" className="ql-bold" />
        <button type="button" className="ql-italic" />
        <button type="button" className="ql-underline" />
        <button type="button" className="ql-strike" />
        <button type="button" className="ql-blockquote" />
        <button type="button" className="ql-list" value="ordered" />
        <button type="button" className="ql-list" value="bullet" />
        <button type="button" className="ql-image" />
        <button type="button" className="ql-link" />
```

## 设置字体大小

设置字体大小。

内容标签中设置的字体大小：30px

内容标签中设置的字体大小：0.4rem

内容标签中设置的字体大小（未注册不生效）：0.5rem

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { RichText } from 'choerodon-ui/pro';

const Size = RichText.Quill.import('attributors/style/size');
Size.whitelist = ['30px', '0.4rem'];
RichText.Quill.register(Size, true);

const defaultValue = `
  <p><span style="font-size:30px;">内容标签中设置的字体大小：30px</span></p>
  <p><span style="font-size:0.4rem;">内容标签中设置的字体大小：0.4rem</span></p>
  <p><span style="font-size:0.5rem;">内容标签中设置的字体大小（未注册不生效）：0.5rem</span></p>
`;

const App = () => {
  return (
    <>
      <RichText defaultValue={defaultValue} />
    </>
  );
};

ReactDOM.render(<App />, document.getElementById('container'));
```

## API

### RichText

| 属性 | 说明 | 类型/默认值 |
| --- | --- | --- |
| options | 编辑器配置，详见Quill Options | 类型object |
| mode | 编辑器模式，可选值 editor preview | 类型string默认值editor |
| toolbar | 工具栏，可选值为钩子或者内置类型：normal none | 类型string默认值({ dataSet, id }) => ReactNode |

更多属性请参考FormField。

### RichText 静态属性

| 属性 | 说明 | 类型/默认值/版本 |
| --- | --- | --- |
| Quill | 组件内部 Quill, 可用于注册配置 | 类型Quill默认值1.6.6 |

项目中直接使用 Quill 注册配置对 RichText 不生效时，可以使用 RichText.Quill。

### RichText.RichTextViewer

| 属性名 | 说明 | 类型 |
| --- | --- | --- |
| deltaOps | 编辑器渲染值 | 类型Delta.ops |

### toolbar

自定义工具栏文档Custom Toolbar



================================================================================
文件: Screening.md
路径: doc\Screening.md
================================================================================

# Screening 筛选控件

筛选表单控件。

## 何时使用

用于商城或者大型分类的进行想要的组件的筛选和配置，能够实现快捷的分类信息满足对于品类筛选的需求。

## 代码演示

## 数据源

绑定数据源。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Screening, DataSet } from 'choerodon-ui/pro';

const { ScreeningItem } = Screening;

function handleDataSetChange({ record, name, value, oldValue }) {
  console.log(
    '[dataset newValue]',
    value,
    '[oldValue]',
    oldValue,
    `[record.get('${name}')]`,
    record.toData(),
  );
}

class App extends React.Component {
  ds = new DataSet({
    autoCreate: true,
    data: [{ wear5: ['kidsOverSize', 'thermalUnderWear'] }],
    fields: [
      { name: 'wear0', type: 'object', lookupCode: 'WEAR', label: '衣服分类0' },
      { name: 'wear1', type: 'string', lookupCode: 'WEAR', label: '衣服分类1' },
      { name: 'wear2', type: 'string', lookupCode: 'WEAR', label: '衣服分类2' },
      { name: 'wear3', type: 'string', lookupCode: 'WEAR', label: '衣服分类3' },
      { name: 'wear4', type: 'string', lookupCode: 'WEAR', label: '衣服分类4' },
      { name: 'wear5', type: 'string', lookupCode: 'WEAR', label: '衣服分类5' },
    ],
    events: {
      update: handleDataSetChange,
    },
  });

  render() {
    return (
      <Screening dataSet={this.ds}>
        <ScreeningItem name="wear0" />
        <ScreeningItem
          optionRenderer={({ text, _value, _record }) => `${text}-精品`}
          colProps={{ span: 8 }}
          name="wear1"
        />
        <ScreeningItem name="wear2" />
        <ScreeningItem colProps={{ span: 12 }} name="wear3" />
        <ScreeningItem name="wear4" />
        <ScreeningItem name="wear5" />
      </Screening>
    );
```

## API

### Screening

| 属性名 | 说明 | 类型 |
| --- | --- | --- |
| tagRender | 顶部的 tag 位置的渲染可以自定义已选值的展示 | 类型({ labelTitle, TagsProps }) => ReactElement |
| onChange | 当值改变触发的回调方法 | 类型(value: any, oldValue: any) => void |

### ScreeningItem

| 属性名 | 说明 | 类型/默认值 |
| --- | --- | --- |
| multiple | 初始打开多选 | 类型string |
| name | 绑定指定 field（必填） | 类型string |
| primitiveValue | 原始值效果和使用 filed object 类似 | 类型boolean默认值false |
| onChange | 修改值触发的回调 | 类型string |
| renderer | 整个选择框的渲染 | 类型(props: RenderProps) => ReactNode |
| colProps | 栅格布局配置 | 类型ColProps |
| rowProps | 栅格布局配置 | 类型RowProps |
| optionRenderer | 自定义控制选项的展示 | 类型({text, value, record}) => ReactElement; |

### PropsTab

| 属性名 | 说明 | 类型 |
| --- | --- | --- |
| text | 每个小 tag 展示的内容文本 | 类型string |
| label | tag 的小标题 | 类型string |
| handleClose | 点击关闭按钮需要触发的方法来删除值 | 类型(key) => void |
| key | 当前字段的标记配合 handleClose 以及定义为唯一值 | 类型string |

更多属性请参考DataSetComponent。



================================================================================
文件: SecretField.md
路径: doc\SecretField.md
================================================================================

# SecretField 脱敏组件

信息二次认证。

## 何时使用

需要对敏感信息进行查看或修改时，需要二次认证才可查看或修改。
使用脱敏组件前需要在全局配置中配置参考Demo， 开发者无需配置。

1.5.0 版本新增组件。

## 代码演示

## 在表单中显示

在表单中显示。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { configure } from 'choerodon-ui';
import { Axios, DataSet, Form, SecretField } from 'choerodon-ui/pro';

// 使用脱敏组件前需要在全局配置中配置如下， 开发者无需配置
configure({
  secretFieldFetchVerifyCode() {
    return Promise.resolve({
      captcha: null,
      captchaKey: 'ff62f4b0bcbc440d981fb1145beb9089',
      lastCheckKey: null,
      message: '短信验证码已发送至手机:185*****331，请在5分钟内完成验证',
      code: 'captcha.send.phone',
      interval: 60,
      errorTimes: 0,
      surplusTimes: 0,
      messageParams: null,
      success: true,
    });
  },
  secretFieldTypes() {
    return [
      { type: 'phone', name: '电话', value: '110' },
      { type: 'email', name: '邮箱', value: '100@gmail.com' },
    ];
  },
  secretFieldEnable() {
    return true;
  },
  secretFieldQueryData(params) {
    return Axios.get(`/secretField/queryField`).then((res) => {
```

## 在表格中显示

在表格中显示。

| 脱敏组件查看 | 脱敏组件编辑 |
| --- | --- |
|  | t***1 |
|  | t***2 |

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Table, DataSet, SecretField } from 'choerodon-ui/pro';

const App = () => {
  const ds = React.useMemo(
    () =>
      new DataSet({
        autoCreate: true,
        fields: [
          {
            name: 'secretField',
            type: 'secret',
            label: '脱敏组件查看',
            readOnly: true,
          },
          {
            name: 'secretField1',
            type: 'secret',
            label: '脱敏组件编辑',
            readOnly: false,
          },
        ],
        data: [
          {
            secretField: 't***1',
            secretField1: 't***1',
            _token: '111',
          },
          {
            secretField: 't***2',
            secretField1: 't***2',
            _token: '222',
```

## API

| 属性 | 说明 | 类型/默认值 |
| --- | --- | --- |
| modalProps | 该属性可以覆盖脱敏组件弹窗的部分属性 | 类型属性详情请参考ModalProps |

### SecretField

属性说明如下：

更多属性请参考TextField。



================================================================================
文件: Segmented.md
路径: doc\Segmented.md
================================================================================

# Segmented 分段控制器

分段控制器。

## 何时使用

- 用于展示多个选项并允许用户选择其中单个选项；
- 当切换选中选项时，关联区域的内容会发生变化。

## 代码演示

## 基本使用

```javascript
import React, { PureComponent } from 'react';
import ReactDOM from 'react-dom';
import { Segmented } from 'choerodon-ui/pro';

const { Option } = Segmented;

function handleChange(value, oldValue) {
  console.log('[basic new]', value, '[basic old]', oldValue);
}

class App extends PureComponent {
  render() {
    return (
      <div>
        <Segmented onChange={handleChange}>
          <Option value="react">React</Option>
          <Option value="angular">Augular</Option>
          <Option value="vue">Vue</Option>
        </Segmented>
        <br />
        <Segmented onChange={handleChange} vertical>
          <Option value="react">React</Option>
          <Option value="angular">Augular</Option>
          <Option value="vue">Vue</Option>
        </Segmented>
      </div>
    );
  }
}

ReactDOM.render(<App />, document.getElementById('container'));
```

## 受控模式

这是 react 框架

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Segmented } from 'choerodon-ui/pro';

const { Option } = Segmented;

class App extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      value: 'wu',
    };
  }

  handleChange = (value, oldValue) => {
    console.log('[constrolled]', 'newValue', value, '[oldValue]', oldValue);
    this.setState({
      value,
    });
  };

  render() {
    const { value } = this.state;
    return (
      <div>
        <Segmented value={value} onChange={this.handleChange}>
          <Option value="react">React</Option>
          <Option value="angular">Augular</Option>
          <Option value="vue">Vue</Option>
        </Segmented>
        <p
          style={{
```

## 绑定数据源

绑定数据源。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, Segmented } from 'choerodon-ui/pro';

function handleDataSetChange({ record, name, value, oldValue }) {
  console.log(
    '[dataset newValue]',
    value,
    '[oldValue]',
    oldValue,
    '[record.get(name)]',
    record.get(name),
  );
  console.log(record.toJSONData());
}

const optionData = [
  { text: 'Jack', value: 'jack' },
  { text: 'Huazhen', value: 'huazhen' },
  { text: 'Lucy', value: 'lucy' },
  { text: 'Niu', value: 'jiaqin' },
  { text: 'Shao', value: 'shao' },
];

const data = [
  {
    'first-name': 'lucy',
```

## 过滤

通过属性 optionsFilter 过滤选项。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Segmented } from 'choerodon-ui/pro';

const { Option } = Segmented;

function handleChange(value, oldValue) {
  console.log('[filter new]', value, '[filter old]', oldValue);
}

class App extends React.Component {
  optionsFilter = (record) => {
    return record.get('value') !== 'angular';
  };

  render() {
    return (
      <Segmented onChange={handleChange} optionsFilter={this.optionsFilter}>
        <Option value="react">React</Option>
        <Option value="angular">Augular</Option>
        <Option value="vue">Vue</Option>
      </Segmented>
    );
  }
}

ReactDOM.render(<App />, document.getElementById('container'));
```

## optionRenderer 输入属性

使用 optionRenderer 属性。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Segmented, Tooltip, Icon } from 'choerodon-ui/pro';

const { Option } = Segmented;

function handleChange(value, oldValue) {
  console.log('[optionRenderer new]', value, '[optionRenderer old]', oldValue);
}

class App extends React.Component {
  renderer = ({ text }) => {
    return (
      <div
        style={{
          width: '100%',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
        }}
      >
        {text && <Icon type="flag-o" />} {text}
      </div>
    );
  };

  optionRenderer = ({ text }) => {
    return (
      <Tooltip title={text} placement="top">
        {this.renderer({ text })}
      </Tooltip>
    );
```

## 适应父级宽度

适应父级宽度。

```javascript
import React, { PureComponent } from 'react';
import ReactDOM from 'react-dom';
import { Segmented } from 'choerodon-ui/pro';

const { Option } = Segmented;

function handleChange(value, oldValue) {
  console.log('[fullWidth new]', value, '[fullWidth old]', oldValue);
}

class App extends PureComponent {
  render() {
    return (
      <div>
        <Segmented onChange={handleChange} fullWidth>
          <Option value="react">React</Option>
          <Option value="angular">Augular</Option>
          <Option value="vue">Vue</Option>
        </Segmented>
        <br />
        <Segmented onChange={handleChange} vertical fullWidth>
          <Option value="react">React</Option>
          <Option value="angular">Augular</Option>
          <Option value="vue">Vue</Option>
        </Segmented>
      </div>
    );
  }
}

ReactDOM.render(<App />, document.getElementById('container'));
```

## 大小

具有 small default large 三种大小。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Segmented, Icon } from 'choerodon-ui/pro';

const { Option } = Segmented;

function handleChange(value, oldValue) {
  console.log('[optionRenderer new]', value, '[optionRenderer old]', oldValue);
}

class App extends React.Component {
  optionRenderer = ({ text }) => {
    return (
      <div
        style={{
          width: '100%',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
        }}
      >
        {text && <Icon type="flag-o" />} {text}
      </div>
    );
  };

  render() {
    return (
      <div>
        <Segmented
          onChange={handleChange}
```

## API

### Segmented

| 属性名 | 说明 | 类型/默认值 |
| --- | --- | --- |
| fullWidth | 将宽度调整为父元素宽度的选项 | 类型boolean |
| vertical | 是否垂直显示 | 类型boolean默认值false |

更多属性请参考SelectBox。

### Segmented.OptGroup

该属性未实装。

### Segmented.Option

该属性请参考SelectBox.Option。



================================================================================
文件: Select.md
路径: doc\Select.md
================================================================================

# Select 下拉选择框

下拉选择器表单控件。

## 何时使用

- 弹出一个下拉菜单给用户选择操作，用于代替原生的选择器，或者需要一个更优雅的多选器时。
- 当选项少时（少于 5 项），建议直接将选项平铺，使用SelectBox是更好的选择。

数据源使用相关教程：Select

## 代码演示

## 基本使用

下拉选择器。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Select, Button, Row, Col } from 'choerodon-ui/pro';

function handleChange(value, oldValue) {
  console.log('[basic new]', value, '[basic old]', oldValue);
}

const { Option } = Select;

class App extends React.Component {
  state = {
    visible: true,
  };

  handleClick = () => this.setState({ visible: !this.state.visible });

  render() {
    const { visible } = this.state;
    return (
      <Row gutter={10}>
        <Col span={8}>
          <Select
            defaultActiveFirstOption={false}
            placeholder="请选择"
            onChange={handleChange}
            optionTooltip={visible ? 'overflow' : 'always'}
          >
            <Option value="jack">Jack</Option>
```

## 受控下拉选择器

受控下拉选择器。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Select } from 'choerodon-ui/pro';

const { Option } = Select;

class App extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      value: 'wu',
    };
  }

  handleChange = (value, oldValue) => {
    console.log('[constrolled]', 'value', value, 'oldValue', oldValue);
    this.setState({
      value,
    });
  }

  render() {
    return (
      <Select name="last-name" placeholder="请选择" value={this.state.value} onChange={this.handleChange}>
        <Option value="jack">Jack</Option>
        <Option value="lucy">Lucy</Option>
        <Option value="wu">Wu</Option>
      </Select>
    );
```

## 值列表代码

值列表代码。

绑定数据源，字段配置 lookupCode：

多选 tag 相关配置，支持更多展示:

- 青浦...
- 徐汇...
- +1...

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, Select, Output, Button, Row, Col } from 'choerodon-ui/pro';
import { Divider } from 'choerodon-ui';

function handleDataSetChange({ record, name, value, oldValue }) {
  console.log(
    '[dataset newValue]',
    value,
    '[oldValue]',
    oldValue,
    `[record.get('${name}')]`,
    record.get(name),
  );
}

function handleOption({ record }) {
  return {
    disabled: record.index === 0,
  };
}

class App extends React.Component {
  flag = false;

  ds = new DataSet({
    autoCreate: true,
    fields: [
      { name: 'sex', type: 'string', lookupCode: 'HR.EMPLOYEE_GENDER' },
      {
        name: 'lov2',
        type: 'string',
```

## 绑定数据源

下拉选择器。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, Select } from 'choerodon-ui/pro';

function handleDataSetChange({ record, name, value, oldValue }) {
  console.log('[dataset newValue]', value, '[oldValue]', oldValue, `[record.get('${name}')]`, record.get(name));
}

const { Option } = Select;

const data = [{
  user: 'wu',
}];

class App extends React.Component {
  ds = new DataSet({
    data,
    fields: [
      { name: 'user', type: 'string', textField: 'text', label: '用户' },
    ],
    events: {
      update: handleDataSetChange,
    },
  });

  render() {
    return (
      <Select dataSet={this.ds} name="user">
        <Option value="jack">Jack</Option>
```

## 数据源选项

数据源选项。当有分页时，请使用 object 类型字段，并且通过接口查询出显示值绑定到该字段上， 因为选项只会加载第一页数据，导致没有匹配的显示值。

- 戴刚


```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, Select, Row, Col, Button } from 'choerodon-ui/pro';

function handleDataSetChange({ record, name, value, oldValue }) {
  console.log(
    '[dataset newValue]',
    value,
    '[oldValue]',
    oldValue,
    `[record.get('${name}')]`,
    record.get(name),
  );
}

class App extends React.Component {
  optionDs = new DataSet({
    selection: 'single',
    transport: {
      read({ params: { page, pagesize } }) {
        return {
          url: `/dataset/user/page/${pagesize}/${page}`,
        };
      },
    },
    autoQuery: true,
  });

  ds = new DataSet({
    data: [{ userid: '15', name: '戴刚' }],
```

## 分组

有两种方式进行选项分组：

- 用OptGroup进行选项分组。
- 为OptionDs的Field添加group属性，属性值为从1开始的序数，用来指定分组的优先级。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, Select, Row, Col } from 'choerodon-ui/pro';

const { Option, OptGroup } = Select;

const App = () => {
  const optionDs = React.useMemo(
    () =>
      new DataSet({
        queryUrl: '/common/lov/dataset/LOV_CODE',
        fields: [{ name: 'enabledFlag', type: 'string', group: true }],
        autoQuery: true,
      }),
  );
  const ds = React.useMemo(
    () =>
      new DataSet({
        fields: [
          {
            name: 'code',
            type: 'string',
            textField: 'description',
            valueField: 'code',
            label: '用户',
            options: optionDs,
          },
        ],
      }),
```

## 过滤

通过属性optionsFilter过滤选项。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, Select, Button } from 'choerodon-ui/pro';

const { Option } = Select;

const data = [
  {
    'last-name': 'zhangsan',
  },
];

class App extends React.Component {
  state = {
    key: 'a',
  };

  ds = new DataSet({
    data,
    fields: [{ name: 'last-name', type: 'string', label: '姓' }],
  });

  handleClick = () => {
    this.setState({ key: this.state.key === 'a' ? 'c' : 'a' });
  };

  optionsFilter = (record) => {
    return record.get('meaning').toLowerCase().indexOf(this.state.key) !== -1;
  };
```

## 可搜索

配置可搜索，searchMatcher 当为字符串时，作为 lookup 的参数名来重新请求值列表。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, Select, Row, Col } from 'choerodon-ui/pro';
import { Divider } from 'choerodon-ui';

function handleDataSetChange({ record, name, value, oldValue }) {
  console.log(
    '[searchable]',
    value,
    '[oldValue]',
    oldValue,
    `[record.get('${name}')]`,
    record.get(name),
  );
}

const { Option } = Select;

const data = [
  {
    'last-name': 'jack',
  },
];

function searchMatcher({ record, text }) {
  return record.get('value').indexOf(text) !== -1;
}

class App extends React.Component {
  ds = new DataSet({
    data,
    fields: [
      { name: 'last-name', type: 'string' },
      { name: 'first-name', type: 'string' },
      { name: 'sex', type: 'string', lookupCode: 'HR.EMPLOYEE_GENDER' },
    ],
    events: {
      update: handleDataSetChange,
```

## 只读

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, Select, Row, Col } from 'choerodon-ui/pro';

const { Option } = Select;

const data = [
  {
    'first-name': 'zhangsan',
  },
];

class App extends React.Component {
  ds = new DataSet({
    data,
    fields: [{ name: 'first-name', readOnly: true }],
  });

  render() {
    return (
      <Row gutter={10}>
        <Col span={12}>
          <Select
            name="last-name"
            placeholder="请选择"
            readOnly
            defaultValue="jack"
          >
            <Option value="jack">Jack</Option>
```

## 复合下拉框

复合下拉框，支持输入新增选项。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, Select, Row, Col } from 'choerodon-ui/pro';

function handleChange(value) {
  console.log('[combo]', value);
}

const { Option } = Select;

class App extends React.Component {
  state = {
    value: 'fox',
  }
  ds = new DataSet({
    autoCreate: true,
    fields: [
      { name: 'name', defaultValue: 'fox2' },
    ],
  });
  handleChange = (value) => {
    console.log('[combo]', value);
    this.setState({
      value,
    });
    this.ds.current.set('name', value);
  }
```

## 多值

通过属性multiple设置为多值。

- Wu

- Jack
- Wu
- Lucy




- Jack
- Wu


```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, Select, Row, Col } from 'choerodon-ui/pro';
import { Divider } from 'choerodon-ui';

function handleChange(value, oldValue) {
  console.log('[multiple]', value, '[oldValue]', oldValue);
}

function handleDataSetChange({ record, name, value, oldValue }) {
  console.log(
    '[dataset multiple]',
    value,
    '[oldValue]',
    oldValue,
    `[record.get('${name}')]`,
    record.get(name),
  );
}

const { Option } = Select;

const data = [
  {
    user: ['wu'],
  },
];

class App extends React.Component {
  ds = new DataSet({
    data,
    fields: [
      {
        name: 'user',
        type: 'string',
        textField: 'text',
        label: '用户',
        multiple: true,
      },
    ],
    events: {
      update: handleDataSetChange,
```

## 选项级联

选项级联，详见级联。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, Select, Row, Col } from 'choerodon-ui/pro';

function handleDataSetChange({ record, value, oldValue }) {
  console.log('[dataset]', value, '[oldValue]', oldValue, '[record.toJSONData()]', record.toJSONData());
}

class App extends React.Component {
  ds = new DataSet({
    autoCreate: true,
    fields: [
      {
        name: 'sheng',
        label: '省',
        lookupCode: 'SHENG',
        valueField: 'codeValueId',
        defaultValue: '10206',
      },
      {
        name: 'shi',
        type: 'number',
        valueField: 'codeValueId',
        label: '市',
        lookupCode: 'SHI',
        cascadeMap: { parentCodeValueId: 'sheng' },
      },
    ],
    events: {
```

## 非原始值

是否为原始值，建议以绑定的数据源 Field 的 type 来决定值类型。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Select } from 'choerodon-ui/pro';

function handleChange(value, oldValue) {
  console.log('[primitive new]', value, '[basic old]', oldValue);
}

const { Option } = Select;

ReactDOM.render(
  <Select placeholder="请选择" primitiveValue={false} onChange={handleChange}>
    <Option value="jack">Jack</Option>
    <Option value="lucy">Lucy</Option>
    <Option value="wu">Wu</Option>
  </Select>,
  document.getElementById('container')
);
```

## 自定义渲染选项

使用optionRenderer属性，自定义渲染 Option。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, Select, Row, Col, Tooltip, Icon } from 'choerodon-ui/pro';
import { Divider } from 'choerodon-ui';

const App = () => {
  const optionDs = new DataSet({
    selection: 'single',
    queryUrl: '/dataset/user/queries',
    autoQuery: true,
    paging: false,
  });

  const ds = new DataSet({
    fields: [
      {
        name: 'user',
        type: 'string',
        textField: 'name',
        valueField: 'userid',
        label: '用户',
        options: optionDs,
      },
    ],
  });

  const renderer = ({ text }) => (
    <div style={{ width: '100%' }}>
      {text && <Icon type="people" />} {text}
```

## 常用项

设置常用项。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, Select } from 'choerodon-ui/pro';

function handleDataSetChange({ record, name, value, oldValue }) {
  console.log('[dataset newValue]', value, '[oldValue]', oldValue, `[record.get('${name}')]`, record.get(name));
}

const { Option } = Select;

const data = [{
  user: 'wu',
}];

class App extends React.Component {
  ds = new DataSet({
    data,
    fields: [
      { name: 'user', type: 'string', textField: 'text', label: '用户' },
    ],
    events: {
      update: handleDataSetChange,
    },
  });

  render() {
    return (
      <Select maxCommonTagTextLength={5} style={{ width: 300 }} dataSet={this.ds} name="user" commonItem={['jack', 'wu', 'jack22222aaa']}>
        <Option value="jack">Jack</Option>
        <Option value="lucy">Lucy</Option>
        <Option value="jack22222aaa">Kack22222aaasss</Option>
        <Option value="wu">Wu</Option>
```

## 扩展菜单

自定义下拉扩展菜单内容。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Select, Button, TextField, Form, DataSet } from 'choerodon-ui/pro';
import { observer } from 'mobx-react-lite';

const SelectContent = ({
  children,
  dataSet,
  textField,
  valueField,
  setPopup,
}) => {
  const [value, setValue] = React.useState('');
  const handleAdd = React.useCallback(() => {
    if (value && !dataSet.find((record) => record.get(valueField) === value)) {
      dataSet.create({ [textField]: value, [valueField]: value });
    }
  }, [dataSet, textField, valueField, value]);
  const handleClose = React.useCallback(() => {
    setPopup(false);
  }, [setPopup]);
  return (
    <>
      {children}
      <div style={{ display: 'flex' }}>
        <TextField
          value={value}
          onChange={setValue}
          style={{ flex: 1 }}
          tabIndex={1}
        />
        <div>
          <Button
            onClick={handleAdd}
            tabIndex={3}
```

## API

### Select

| 属性名 | 说明 | 类型/默认值/版本 |
| --- | --- | --- |
| combo | 复合输入值 | 类型boolean默认值false |
| searchable | 是否可搜索 | 类型boolean默认值false |
| reverse | 是否显示反选按钮 | 类型boolean默认值true版本1.0.0 |
| searchMatcher | 搜索器。当为字符串时，作为 lookup 的参数名来重新请求值列表。 | 类型string ({ record, text, textField, valueField }) => boolean默认值({ textField record.get(textField).indexOf(text) !== -1 |
| optionsFilter | 选项过滤 | 类型(record) => boolean |
| paramMatcher | 参数匹配器。当为字符串时，进行参数拼接 | 类型string默认值({ record, text, textField, valueField }) => string |
| defaultActiveFirstOption | 是否默认高亮第一个选项。 | 类型boolean默认值true版本1.5.0-beta.0 |
| checkValueOnOptionsChange | 当选项改变时，检查并清除不在选项中的值 | 类型boolean默认值true |
| dropdownMatchSelectWidth | 下拉框匹配输入框宽度 | 类型boolean默认值true |
| dropdownMenuStyle | 下拉框菜单样式名 | 类型object |
| options | 下拉框选项数据源（使用后需要自行处理参数等） | 类型DataSet |
| primitiveValue | 是否为原始值（建议以绑定的数据源 Field 的 type 来决定值类型，如 type 设为 object 相当于 primitiveValue 设为 false）true - 选项中 valueField 对应的值 false - 选项值对象 | 类型boolean |
| optionRenderer | 渲染 Option 文本的钩子 | 类型({ record, text, value }) => ReactNode |
| groupRenderer | 渲染 Group 文本的钩子 | 类型({ record, text, value }) => ReactNode版本1.6.4 |
| optionTooltip | 用tooltip显示选项内容 | 类型string默认值none always overflow版本1.4.0 |
| notFoundContent | 当下拉列表为空时显示的内容 | 类型ReactNode |
| pagingOptionContent | 渲染分页 option | 类型ReactNode |
| onOption | 设置选项属性，如 disabled |  |
| commonItem | 设置常用项 | 类型Array<string> |
| maxCommonTagPlaceholder | 设置常用项标签超出最大数量时的占位描述 | 类型ReactNode (restValues) => ReactNode |
| maxCommonTagCount | 设置常用项标签最大数量 | 类型number |
| maxCommonTagTextLength | 设置常用项标签文案最大长度 | 类型number |
| noCache | 下拉时自动重新查询，不缓存下拉数据源 | 类型boolean |
| selectAllButton | 多选模式下，是否显示全选按钮， 支持自定义按钮 | 类型boolean (ButtonProps[]) => ButtonProps[]默认值true版本1.0.0 |
| popupContent | 下拉框的自定义内容, 注意函数参数 dataSet 为下拉列表的 options | 类型ReactNode ({ dataSet, field, record, textField, valueField, content, setValue(value), setPopup(popup) }) => ReactNode版本1.4.1 |
| searchFieldInPopup | 搜索框显示在下拉框中 | 类型boolean版本1.4.4 |
| searchFieldProps | 搜索框显示在下拉框中时，可以设置输入框的属性 | 类型TextFieldProps版本1.4.4 |
| reserveParam | 多选模式下，搜索选中后是否保留参数显示 | 类型boolean默认值globalConfig.selectReserveParam版本1.5.7 |

更多属性请参考TriggerField。

### Select.OptGroup

| 属性名 | 说明 | 类型 |
| --- | --- | --- |
| label | 选项组标题 | 类型ReactNode |

### Select.Option

| 属性名 | 说明 | 类型 |
| --- | --- | --- |
| value | 选项值 | 类型any |
| disabled | 禁用 | 类型boolean |

### 多选时输入框显示过长

参考Select maxTagCount说明。



================================================================================
文件: SelectBox.md
路径: doc\SelectBox.md
================================================================================

# SelectBox 平铺选择框

平铺选项表单控件。

## 何时使用

平铺选项便于用户选择操作，作用同Select。

当在按钮视图下设置了 disabled 且 option 中的子元素为一个 flex 元素时，在选中的情况下会导致该 option 无法显示,可以给 option 中的子元素设置 z-index 提高层叠等级解决。

## 代码演示

## 基本使用

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { SelectBox, Button, Row, Col } from 'choerodon-ui/pro';

function handleChange(value, oldValue) {
  console.log('[basic new]', value, '[basic old]', oldValue);
}

const { Option } = SelectBox;

class App extends React.Component {
  state = {
    visible: true,
  };

  handleClick = () => this.setState({ visible: !this.state.visible });

  render() {
    return (
      <Row gutter={10}>
        <Col span={8}>
          <SelectBox onChange={handleChange}>
            <Option value="jack">Jack</Option>
            <Option value="lucy">Lucy</Option>
            {this.state.visible && (
              <Option value="wu" disabled>
                Wu
              </Option>
            )}
```

## 受控按钮选择框

受控按钮选择框。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { SelectBox } from 'choerodon-ui/pro';

const { Option } = SelectBox;

class App extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      value: 'wu',
    };
  }

  handleChange = (value, oldValue) => {
    console.log('[constrolled]', 'newValue', value, '[oldValue]', oldValue);
    this.setState({
      value,
    });
  }

  render() {
    return (
      <SelectBox value={this.state.value} onChange={this.handleChange}>
        <Option value="jack">Jack</Option>
        <Option value="lucy">Lucy</Option>
        <Option value="wu">Wu</Option>
      </SelectBox>
    );
  }
}
```

## 绑定数据源

绑定数据源。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, SelectBox, Row, Col, Form } from 'choerodon-ui/pro';

function handleDataSetChange({ record, name, value, oldValue }) {
  console.log(
    '[dataset newValue]',
    value,
    '[oldValue]',
    oldValue,
    '[record.get(name)]',
    record.get(name),
  );
  console.log(record.toJSONData());
}

const { Option } = SelectBox;

const optionData = [
  { text: 'Jack', value: 'jack' },
  { text: 'Zhangsan', value: 'zhangsan' },
  { text: 'Lucy', value: 'lucy' },
  { text: 'Niu', value: 'jiaqin' },
  { text: 'Shao', value: 'shao' },
];

const data = [
  {
    'first-name': 'zhangsan',
    'last-name': 'wu',
  },
```

## 值列表代码

值列表代码。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, SelectBox, Button, Row, Col } from 'choerodon-ui/pro';

function handleDataSetChange({ record, name, value, oldValue }) {
  console.log(
    '[dataset newValue]',
    value,
    '[oldValue]',
    oldValue,
    `[record.get('${name}')]`,
    record.get(name),
  );
}

function handleOption({ record }) {
  return {
    disabled: record.index === 0,
  };
}

class App extends React.Component {
  flag = false;

  ds = new DataSet({
    autoCreate: true,
    fields: [
      {
        name: 'sex',
        type: 'string',
        lookupCode: 'HR.EMPLOYEE_GENDER',
        defaultValue: 'F',
      },
      {
```

## 多选

通过属性multiple设置多选。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, SelectBox, Row, Col } from 'choerodon-ui/pro';

function handleChange(value, oldValue) {
  console.log('[multiple]', value, '[oldValue]', oldValue);
}

function handleDataSetChange({ record, name, value, oldValue }) {
  console.log('[dataset multiple]', value, '[oldValue]', oldValue, `[record.get('${name}')]`, record.get(name));
}

const { Option } = SelectBox;

const data = [{
  user: ['wu'],
}];

class App extends React.Component {
  ds = new DataSet({
    data,
    fields: [
      { name: 'user', type: 'string', textField: 'text', label: '用户', multiple: true },
    ],
    events: {
      update: handleDataSetChange,
    },
  });
```

## 按钮视图

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { SelectBox, Row, Col } from 'choerodon-ui/pro';

function handleChange(value, oldValue) {
  console.log('[button new]', value, '[button old]', oldValue);
}

const { Option } = SelectBox;

ReactDOM.render(
  <Row gutter={10}>
    <Col span={12}>
      <SelectBox mode="button" onChange={handleChange}>
        <Option value="jack">Jack</Option>
        <Option value="lucy">Lucy</Option>
        <Option value="wu">Wu</Option>
      </SelectBox>
    </Col>
    <Col span={12}>
      <SelectBox mode="button" multiple onChange={handleChange}>
        <Option value="jack">Jack</Option>
        <Option value="lucy">Lucy</Option>
        <Option value="wu">Wu</Option>
      </SelectBox>
    </Col>
  </Row>,
  document.getElementById('container'),
);
```

## 垂直排列

### single

### multiple

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { SelectBox, Row, Col } from 'choerodon-ui/pro';

function handleChange(value, oldValue) {
  console.log('[button new]', value, '[button old]', oldValue);
}

const { Option } = SelectBox;

ReactDOM.render(
  <Row gutter={10}>
    <Col span={2}>
      <h3>single</h3>
    </Col>
    <Col span={2}>
      <SelectBox vertical mode="button" onChange={handleChange}>
        <Option value="jack">Jack</Option>
        <Option value="lucy">Lucy</Option>
        <Option value="wu">Wu</Option>
      </SelectBox>
    </Col>
    <Col span={2}>
      <h3>multiple</h3>
    </Col>
    <Col span={2}>
      <SelectBox vertical mode="button" multiple onChange={handleChange}>
        <Option value="jack">Jack</Option>
        <Option value="lucy">Lucy</Option>
        <Option value="wu">Wu</Option>
      </SelectBox>
    </Col>
  </Row>,
```

## 只读

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, SelectBox, Row, Col } from 'choerodon-ui/pro';

const { Option } = SelectBox;

const optionData = [
  { text: 'Jack', value: 'jack' },
  { text: 'Zhangsan', value: 'zhangsan' },
  { text: 'Lucy', value: 'lucy' },
  { text: 'Niu', value: 'jiaqin' },
  { text: 'Shao', value: 'shao' },
];

const data = [
  {
    name: 'zhangsan',
  },
];

class App extends React.Component {
  optionDs = new DataSet({
    data: optionData,
    selection: 'single',
  });

  ds = new DataSet({
    data,
    fields: [
      {
```

## 过滤

通过属性 optionsFilter 过滤选项。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, SelectBox, Button } from 'choerodon-ui/pro';

const { Option } = SelectBox;

const data = [
  {
    'last-name': 'zhangsan',
  },
];

class App extends React.Component {
  state = {
    key: 'a',
  };

  ds = new DataSet({
    data,
    fields: [{ name: 'last-name', type: 'string', label: '姓' }],
  });

  handleClick = () => {
    this.setState({ key: this.state.key === 'a' ? 'c' : 'a' });
  };

  optionsFilter = (record) => {
    const { key } = this.state;
    return record.get('meaning').toLowerCase().indexOf(key) !== -1;
  };

  render() {
    return (
```

## 自定义渲染选项

通过属性 optionRenderer 自定义选项。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, SelectBox, Tooltip, Icon } from 'choerodon-ui/pro';

const App = () => {
  const optionDs = new DataSet({
    selection: 'single',
    queryUrl: '/dataset/user/queries',
    autoQuery: true,
  });
  const ds = new DataSet({
    fields: [
      {
        name: 'user',
        type: 'string',
        textField: 'name',
        valueField: 'userid',
        label: '用户',
        options: optionDs,
      },
    ],
  });
  const optionRenderer = ({ text }) => (
    <Tooltip title={text} placement="left">
      <span style={{ display: 'inline-block' }}>
        {text && <Icon type="people" />} {text}
      </span>
    </Tooltip>
  );

  return <SelectBox dataSet={ds} name="user" optionRenderer={optionRenderer} />;
};
```

## 可搜索

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, SelectBox, Form, Row, Col } from 'choerodon-ui/pro';

function handleDataSetChange({ record, name, value, oldValue }) {
  console.log(
    '[searchable]',
    value,
    '[oldValue]',
    oldValue,
    `[record.get('${name}')]`,
    record.get(name),
  );
}

const { Option } = SelectBox;
const data = [
  {
    'last-name': 'zhangsan',
  },
];

function searchMatcher({ record, text }) {
  return record.get('value').indexOf(text) !== -1;
}

class App extends React.Component {
  ds = new DataSet({
    data,
    fields: [
      { name: 'last-name', type: 'string' },
      { name: 'first-name', type: 'string' },
      { name: 'sex', type: 'string', lookupCode: 'HR.EMPLOYEE_GENDER' },
    ],
    events: {
      update: handleDataSetChange,
    },
  });
```

## API

### SelectBox

| 属性名 | 说明 | 类型/默认值 |
| --- | --- | --- |
| mode | 选择器的展现形式，可选值 box \| button | 类型string |
| vertical | 是否垂直显示 | 类型boolean默认值false |
| checkValueOnOptionsChange | 当选项改变时，检查并清除不在选项中的值 | 类型boolean默认值false |

更多属性请参考Select。

### SelectBox.Option

该属性请参考Select.Option。



================================================================================
文件: Skeleton.md
路径: doc\Skeleton.md
================================================================================

# Skeleton 骨架屏

在需要等待加载内容的位置提供一个占位图形组合。

## 何时使用

- 网络较慢，需要长时间等待加载处理的情况下。
- 图文信息内容较多的列表/卡片中。
- 只在第一次加载数据的时候使用。
- 可以被 Spin 完全代替，但是在可用的场景下可以比 Spin 提供更好的视觉效果和用户体验。

## 代码演示

## 基本使用

最简单的占位效果。


```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Skeleton } from 'choerodon-ui/pro';

ReactDOM.render(<Skeleton />, document.getElementById('container'));
```

## 复杂的组合

更复杂的组合。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { TextArea, Button, DataSet, Skeleton } from 'choerodon-ui/pro';
import { Avatar } from 'choerodon-ui';

function handleDataSetChange({ record, name, value, oldValue }) {
  console.log(
    '[dataset newValue]',
    value,
    '[oldValue]',
    oldValue,
    `[record.get('${name}')]`,
    record.get(name),
  );
}


class App extends React.Component {
  ds = new DataSet({
    autoQuery: true,
    queryUrl: '/tree.mock',
    fields: [
      {
        name: 'text',
        type: 'string',
        defaultValue: 'textarea',
      },
    ],
    events: {
      update: handleDataSetChange,
    },

  });
```

## 动画效果

显示动画效果。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, Tree, Skeleton, Button } from 'choerodon-ui/pro';

function nodeRenderer({ record }) {
  return record.get('text');
}

class App extends React.Component {
  ds = new DataSet({
    primaryKey: 'id',
    queryUrl: '/tree.mock',
    autoQuery: true,
    parentField: 'parentId',
    expandField: 'expand',
    idField: 'id',
    fields: [
      { name: 'id', type: 'number' },
      { name: 'expand', type: 'boolean' },
      { name: 'parentId', type: 'number' },
    ],
    events: {
      select: ({ record, dataSet }) => console.log('select', record, dataSet),
      unSelect: ({ record, dataSet }) =>
        console.log('unSelect', record, dataSet),
    },
  });

  render() {
    return (
      <>
        <Skeleton
          height={200}
          paragraph={{
            rows: 10,
            style: { width: '5rem' },
          }}
          active
          dataSet={this.ds}
          skeletonTitle={false}
        >
          <Tree dataSet={this.ds} checkable renderer={nodeRenderer} />
        </Skeleton>
```

## 骨架按钮、头像和输入框

骨架按钮、头像和输入框。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Skeleton, SelectBox, Form, Switch } from 'choerodon-ui/pro';

const { Option } = SelectBox;

class App extends React.Component {
  state = {
    active: false,
    size: 'default',
    buttonShape: 'default',
    avatarShape: 'square',
  };

  sizeList = ['default', 'small', 'large'];

  buttonShapeList = ['default', 'circle', 'round'];

  avatarShapeList = ['circle', 'square'];

  handleChangeActive = (active) => {
    this.setState({ active });
  };

  handleChangeSize = (size) => {
    this.setState({ size });
  };

  handleChangeBtnShape = (buttonShape) => {
    this.setState({ buttonShape });
  };

  handleChangeAvatarShape = (avatarShape) => {
    this.setState({ avatarShape });
  };

  render() {
    const { active, size, buttonShape, avatarShape } = this.state;
    return (
      <>
        <Form>
          <Switch
            label="active"
            checked={active}
            onChange={this.handleChangeActive}
          />
          <SelectBox
            mode="button"
```

## 包含子组件

加载占位图包含子组件。

#### Choerodon UI of React

Following the Ant Design specification, we developed a React UI library Choerodon UI that contains a set of high quality components and demos for building rich, interactive user interfaces.

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Button, Skeleton } from 'choerodon-ui/pro';

class App extends React.Component {
  state = {
    loading: false,
  };

  showSkeleton = () => {
    this.setState({ loading: true });
    setTimeout(() => {
      this.setState({ loading: false });
    }, 3000);
  };

  render() {
    const { loading } = this.state;
    return (
      <>
        <Skeleton loading={loading}>
          <div>
            <h4>Choerodon UI of React</h4>
            <p>
              Following the Ant Design specification, we developed a React UI
              library Choerodon UI that contains a set of high quality
              components and demos for building rich, interactive user
              interfaces.
            </p>
          </div>
        </Skeleton>
        <Button onClick={this.showSkeleton} disabled={loading}>
          Show Skeleton
        </Button>
      </>
    );
  }
```

## 栅格

栅格占位效果。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Skeleton } from 'choerodon-ui/pro';

ReactDOM.render(
  <Skeleton
    grid={{ rows: 4, column: 3, gutter: 16 }}
    paragraph={false}
    active
  />,
  document.getElementById('container'),
);
```

## API

### Skeleton

| 属性 | 说明 | 类型/默认值/版本 |
| --- | --- | --- |
| active | 是否展示动画效果 | 类型boolean默认值false |
| avatar | 是否显示头像占位图 | 类型boolean \|SkeletonAvatarProps默认值false |
| loading | 为true时，显示占位图。反之则直接展示子组件 | 类型boolean |
| paragraph | 是否显示段落占位图 | 类型boolean \|SkeletonParagraphProps默认值true |
| title | 是否显示标题占位图 | 类型boolean \|SkeletonTitleProps默认值true |
| grid | 栅格占位配置 | 类型SkeletonGridProps版本1.4.4 |
| skeletonTitle | 是否显示标题占位图,等同于 title 属性 | 类型boolean默认值true |

### SkeletonAvatarProps

| 属性 | 说明 | 类型/默认值 |
| --- | --- | --- |
| active | 是否展示动画效果，仅在单独使用头像骨架时生效 | 类型boolean默认值false |
| size | 设置头像占位图的大小 | 类型number \|large\|small\|default默认值- |
| shape | 指定头像的形状 | 类型circle\|square默认值- |

### SkeletonTitleProps

| 属性 | 说明 | 类型/默认值 |
| --- | --- | --- |
| width | 设置标题占位图的宽度 | 类型number string默认值- |

### SkeletonParagraphProps

| 属性 | 说明 | 类型/默认值 |
| --- | --- | --- |
| rows | 设置段落占位图的行数 | 类型number默认值- |
| width | 设置段落占位图的宽度，若为数组时则为对应的每行宽度，反之则是最后一行的宽度 | 类型number string Array<number string>默认值- |

### SkeletonButtonProps

| 属性 | 说明 | 类型/默认值 |
| --- | --- | --- |
| active | 是否展示动画效果 | 类型boolean默认值false |
| size | 设置按钮的大小 | 类型large\|small\|default默认值- |
| shape | 指定按钮的形状 | 类型circle\|round\|default默认值- |

### SkeletonInputProps

| 属性 | 说明 | 类型/默认值 |
| --- | --- | --- |
| active | 是否展示动画效果 | 类型boolean默认值false |
| size | 设置按钮的大小 | 类型large\|small\|default默认值- |

### SkeletonGridProps

| 属性名 | 说明 | 类型/默认值 |
| --- | --- | --- |
| rows | 行数 | 类型number默认值- |
| column | 列数 | 类型number默认值- |
| gutter | 栅格间隔 | 类型number默认值0 |
| xs | <576px展示的列数 | 类型number默认值- |
| sm | ≥576px展示的列数 | 类型number默认值- |
| md | ≥768px展示的列数 | 类型number默认值- |
| lg | ≥992px展示的列数 | 类型number默认值- |
| xl | ≥1200px展示的列数 | 类型number默认值- |
| xxl | ≥1600px展示的列数 | 类型number默认值- |



================================================================================
文件: Spin.md
路径: doc\Spin.md
================================================================================

# Spin 加载中

用于页面和区块的加载中状态。

## 何时使用

页面局部处于等待异步数据或正在渲染过程时，合适的加载动效会有效缓解用户的焦虑。Spin 单独使用加载时具有高度，注意布局及样式，避免出现样式问题。

## 代码演示

## 基本用法

一个简单的 loading 状态。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Spin } from 'choerodon-ui/pro';

ReactDOM.render(<Spin />, document.getElementById('container'));
```

## 各种大小

小的用于文本加载，默认用于卡片容器级加载，大的用于页面级加载。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Spin } from 'choerodon-ui/pro';

ReactDOM.render(
  <div>
    <Spin size="small" />
    <Spin />
    <Spin size="large" />
  </div>,
  document.getElementById('container'),
);
```

## 绑定数据源

绑定数据源。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, Form, TextField, NumberField, SelectBox, Switch, Button, Spin } from 'choerodon-ui/pro';

const { Option } = SelectBox;

class App extends React.Component {
 ds = new DataSet({
    primaryKey: 'userid',
    name: 'user',
    autoQuery: true,
    pageSize: 5,
    fields:  [
      {
        name: 'userid',
        type: 'string',
        label: '编号',
        required: true,
      },
      {
        name: 'name',
        type: 'intl',
        label: '姓名',
      },
      {
        name: 'age',
        type: 'number',
        label: '年龄',
        max: 100,
        step: 1,
      },
      {
        name: 'sex',
        type: 'string',
        label: '性别',
        lookupCode: 'HR.EMPLOYEE_GENDER',
        required: true,
      },
      { name: 'enable', type: 'boolean', label: '是否开启' },
    ],
  });
```

## 容器

放入一个容器中，Spin 具有高度，注意布局及样式，避免居中出现问题。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Spin } from 'choerodon-ui/pro';

ReactDOM.render(
  <div className="example">
    <Spin />
  </div>,
  document.getElementById('container'),
);
```

## 卡片加载中

可以直接把内容内嵌到 Spin 中，将现有容器变为加载状态。注意布局及样式，避免居中出现问题。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Spin, Switch } from 'choerodon-ui/pro';
import { Alert } from 'choerodon-ui';

class Card extends React.Component {
  state = { loading: false };

  toggle = (value) => {
    this.setState({ loading: value });
  };

  render() {
    const { loading } = this.state;
    return (
      <div>
        <Spin spinning={loading}>
          <Alert
            message="Alert message title"
            description="Further details about the context of this alert."
            type="info"
          />
        </Spin>
        <div style={{ marginTop: 16 }}>
          Loading state：
          <Switch checked={loading} onChange={this.toggle} />
        </div>
      </div>
    );
  }
}

ReactDOM.render(<Card />, document.getElementById('container'));
```

## 自定义描述文案

自定义描述文案。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Spin } from 'choerodon-ui/pro';
import { Alert } from 'choerodon-ui';

ReactDOM.render(
  <Spin tip="Loading...">
    <Alert
      message="Alert message title"
      description="Further details about the context of this alert."
      type="info"
    />
  </Spin>,
  document.getElementById('container'),
);
```

## 延迟

延迟显示 loading 效果。当 spinning 状态在 delay 时间内结束，则不显示 loading 状态。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Spin, Switch } from 'choerodon-ui/pro';
import { Alert } from 'choerodon-ui';

class Card extends React.Component {
  state = { loading: false };

  toggle = (value) => {
    this.setState({ loading: value });
  };

  render() {
    const { loading } = this.state;
    const container = (
      <Alert
        message="Alert message title"
        description="Further details about the context of this alert."
        type="info"
      />
    );
    return (
      <div>
        <Spin spinning={loading} delay={500}>
          {container}
        </Spin>
        <div style={{ marginTop: 16 }}>
          Loading state：
          <Switch checked={loading} onChange={this.toggle} />
        </div>
      </div>
    );
  }
}
```

## 自定义指示符

使用自定义指示符。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Spin } from 'choerodon-ui/pro';

const c7nIcon = (
  <span className="custom-spin-dot">
    <i />
    <i />
    <i />
    <i />
  </span>
);

ReactDOM.render(
  <div>
    <Spin indicator={c7nIcon} size="small" />
    <Spin indicator={c7nIcon} />
    <Spin indicator={c7nIcon} size="large" />
  </div>,
  document.getElementById('container'),
);
```

## API

### Spin

| 属性名 | 说明 | 类型/默认值 |
| --- | --- | --- |
| delay | 延迟显示加载效果的时间（防止闪烁） | 类型number (毫秒)默认值- |
| indicator | 加载指示符 | 类型ReactElement默认值- |
| size | 组件大小，可选值为smalldefaultlarge | 类型string默认值'default' |
| spinning | 是否旋转 | 类型boolean默认值true |
| tip | 当作为包裹元素时，可以自定义描述文案 | 类型string默认值- |
| wrapperClassName | 包装器的类属性 | 类型string默认值- |



================================================================================
文件: Statistic.md
路径: doc\Statistic.md
================================================================================

# Statistic 数值统计

展示统计数值。

## 何时使用

- 当需要突出某个或某组数字时。
- 当需要展示带描述的统计类数据时使用。

## 代码演示

## 基本

简单的展示。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Statistic, Row, Col, Button } from 'choerodon-ui';

ReactDOM.render(
  <Row gutter={16}>
    <Col span={12}>
      <Statistic title="Active Users" value={112893} />
    </Col>
    <Col span={12}>
      <Statistic title="Account Balance (CNY)" value={112893} precision={2} />
      <Button style={{ marginTop: 16 }} type="primary">
        Recharge
      </Button>
    </Col>
  </Row>,
  document.getElementById('container'),
);
```

## 在卡片中使用

在卡片中展示统计数值。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Statistic, Card, Row, Col, Icon } from 'choerodon-ui';

ReactDOM.render(
  <div style={{ background: '#ececec', padding: '30px' }}>
    <Row gutter={16}>
      <Col span={12}>
        <Card>
          <Statistic
            title="Active"
            value={11.28}
            precision={2}
            valueStyle={{ color: '#3f8600' }}
            prefix={<Icon type="backup-o" />}
            suffix="%"
          />
        </Card>
      </Col>
      <Col span={12}>
        <Card>
          <Statistic
            title="Idle"
            value={9.3}
            precision={2}
            valueStyle={{ color: '#cf1322' }}
            prefix={<Icon type="cloud_download-o" />}
            suffix="%"
          />
        </Card>
      </Col>
    </Row>
  </div>,
  document.getElementById('container'),
```

## 倒计时组件

倒计时组件。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Statistic, Row, Col } from 'choerodon-ui';

const { Countdown } = Statistic;
const deadline = Date.now() + 1000 * 60 * 60 * 24 * 2 + 1000 * 30; // Moment is also OK

function onFinish() {
  console.log('finished!');
}

function countDownFormatter(value) {
  return (
    <>
      <span style={{ fontWeight: 400, fontSize: 14, marginRight: 10 }}>
        COUNTDOWN:
      </span>
      {value}
    </>
  );
}

ReactDOM.render(
  <Row gutter={16}>
    <Col span={12}>
      <Countdown title="Countdown" value={deadline} onFinish={onFinish} />
    </Col>
    <Col span={12}>
      <Countdown
        title="Million Seconds"
        value={deadline}
        format="HH:mm:ss:SSS"
      />
    </Col>
```

## 单位

通过前缀和后缀添加单位。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Statistic, Row, Col, Icon } from 'choerodon-ui';

ReactDOM.render(
  <div>
    <Row gutter={16}>
      <Col span={12}>
        <Statistic
          title="Feedback"
          value={1128}
          prefix={<Icon type="people_outline-o" />}
        />
      </Col>
      <Col span={12}>
        <Statistic title="Unmerged" value={93} suffix="/ 100" />
      </Col>
    </Row>
  </div>,
  document.getElementById('container'),
);
```

## API

#### Statistic

| 属性名 | 说明 | 类型/默认值/版本 |
| --- | --- | --- |
| decimalSeparator | 设置小数点 | 类型string默认值. |
| formatter | 自定义数值展示 | 类型(value) => ReactNode默认值- |
| groupSeparator | 设置千分位标识符 | 类型string默认值, |
| precision | 数值精度 | 类型number默认值- |
| prefix | 设置数值的前缀 | 类型string ReactNode默认值- |
| suffix | 设置数值的后缀 | 类型string ReactNode默认值- |
| title | 数值的标题 | 类型string ReactNode默认值- |
| value | 数值内容 | 类型string number默认值- |
| valueStyle | 设置数值的样式 | 类型CSSProperties默认值- |

#### Statistic.Countdown

| 属性名 | 说明 | 类型/默认值/版本 |
| --- | --- | --- |
| format | 格式化倒计时展示，参考moment | 类型string默认值HH:mm:ss |
| onFinish | 倒计时完成时触发 | 类型() => void默认值- |
| prefix | 设置数值的前缀 | 类型string ReactNode默认值- |
| suffix | 设置数值的后缀 | 类型string ReactNode默认值- |
| title | 数值的标题 | 类型string ReactNode默认值- |
| value | 数值内容 | 类型number moment默认值- |
| valueStyle | 设置数值的样式 | 类型CSSProperties默认值- |
| formatter | 自定义数值展示 | 类型(value) => ReactNode默认值-版本1.5.4 |



================================================================================
文件: Steps.md
路径: doc\Steps.md
================================================================================

# Steps 步骤条

引导用户按照流程完成任务的导航条。

## 何时使用

当任务复杂或者存在先后关系时，将其分解成一系列步骤，从而简化任务。

## 代码演示

## 基本用法

简单的步骤条。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Steps } from 'choerodon-ui';

const Step = Steps.Step;

ReactDOM.render(
  <Steps current={1}>
    <Step title="Finished" description="This is a description." />
    <Step title="In Progress" description="This is a description." />
    <Step title="Waiting" description="This is a description." />
  </Steps>,
  document.getElementById('container'),
);
```

## 迷你版

迷你版的步骤条，通过设置<Steps size="small">启用.

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Steps } from 'choerodon-ui';

const Step = Steps.Step;

ReactDOM.render(
  <Steps size="small" current={1}>
    <Step title="Finished" />
    <Step title="In Progress" />
    <Step title="Waiting" />
  </Steps>,
  document.getElementById('container'),
);
```

## 带图标的步骤条

通过设置Steps.Step的icon属性，可以启用自定义图标。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Steps, Icon } from 'choerodon-ui';

const Step = Steps.Step;

ReactDOM.render(
  <Steps>
    <Step status="finish" title="Login" icon={<Icon type="person_outline" />} />
    <Step status="finish" title="Verification" icon={<Icon type="panorama_vertical" />} />
    <Step status="process" title="Pay" icon={<Icon type="schedule" />} />
    <Step status="wait" title="Done" icon={<Icon type="tag_faces" />} />
  </Steps>,
  document.getElementById('container'),
);
```

## 步骤切换

通常配合内容及按钮使用，表示一个流程的处理进度。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Steps, Button, message } from 'choerodon-ui';

const Step = Steps.Step;

const steps = [
  {
    title: 'First',
    content: 'First-content',
  },
  {
    title: 'Second',
    content: 'Second-content',
  },
  {
    title: 'Last',
    content: 'Last-content',
  },
];

class App extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      current: 0,
    };
  }

  next() {
    const current = this.state.current + 1;
    this.setState({ current });
  }

  prev() {
    const current = this.state.current - 1;
    this.setState({ current });
  }

  render() {
    const { current } = this.state;
```

## 竖直方向的步骤条

简单的竖直方向的步骤条。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Steps } from 'choerodon-ui';

const Step = Steps.Step;

ReactDOM.render(
  <Steps direction="vertical" current={1}>
    <Step title="Finished" description="This is a description." />
    <Step title="In Progress" description="This is a description." />
    <Step title="Waiting" description="This is a description." />
  </Steps>,
  document.getElementById('container'),
);
```

## 竖直方向的小型步骤条

简单的竖直方向的小型步骤条。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Steps } from 'choerodon-ui';

const Step = Steps.Step;

ReactDOM.render(
  <Steps direction="vertical" size="small" current={1}>
    <Step title="Finished" description="This is a description." />
    <Step title="In Progress" description="This is a description." />
    <Step title="Waiting" description="This is a description." />
  </Steps>,
  document.getElementById('container'),
);
```

## 步骤运行错误

使用 Steps 的status属性来指定当前步骤的状态。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Steps } from 'choerodon-ui';

const Step = Steps.Step;

ReactDOM.render(
  <Steps current={1} status="error">
    <Step title="Finished" description="This is a description" />
    <Step title="In Process" description="This is a description" />
    <Step title="Waiting" description="This is a description" />
  </Steps>,
  document.getElementById('container'),
);
```

## 点状步骤条

包含步骤点的进度条。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Steps } from 'choerodon-ui';

const Step = Steps.Step;

ReactDOM.render(
  <Steps progressDot current={1}>
    <Step title="Finished" description="This is a description." />
    <Step title="In Progress" description="This is a description." />
    <Step title="Waiting" description="This is a description." />
  </Steps>,
  document.getElementById('container'),
);
```

## 自定义点状步骤条

为点状步骤条增加自定义展示。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Steps, Popover } from 'choerodon-ui';

const Step = Steps.Step;

const customDot = (dot, { status, index }) => (
  <Popover
    content={
      <span>
        step {index} status: {status}
      </span>
    }
  >
    {dot}
  </Popover>
);

ReactDOM.render(
  <Steps current={1} progressDot={customDot}>
    <Step title="Finished" description="You can hover on the dot." />
    <Step title="In Progress" description="You can hover on the dot." />
    <Step title="Waiting" description="You can hover on the dot." />
    <Step title="Waiting" description="You can hover on the dot." />
  </Steps>,
  document.getElementById('container'),
);
```

## 导航步骤条

导航条样式的步骤条。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Steps, Button, message } from 'choerodon-ui';

const { Step } = Steps;

const stepsList = [];

for (let i = 1; i <= 17; i += 1) {
  stepsList.push({
    title: `导航-${i}`,
    content: `${i}`,
  });
}

class App extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      current: 0,
    };
  }

  onChange = (current) => {
    this.setState({
      current,
    });
  };

  onClickItem = (e) => {
    console.log(e);
  };

  next() {
    const { current } = this.state;
    this.setState({ current: current + 1 });
  }

  prev() {
    const { current } = this.state;
    this.setState({ current: current - 1 });
```

## API

```jsx
<Steps>
  <Step title="第一步" />
  <Step title="第二步" />
  <Step title="第三步" />
</Steps>
```

### Steps

整体步骤条。

| 属性名 | 说明 | 类型/默认值/版本 |
| --- | --- | --- |
| current | 指定当前步骤，从 0 开始记数。在子 Step 元素中，可以通过status属性覆盖状态 | 类型number默认值0 |
| direction | 指定步骤条方向。目前支持水平（horizontal）和竖直（vertical）两种方向 | 类型string默认值horizontal |
| progressDot | 点状步骤条，可以设置为一个 function | 类型Boolean or (iconDot, {index, status, title, description}) => ReactNode默认值false |
| size | 指定大小，目前支持普通（default）和迷你（small） | 类型string默认值default |
| status | 指定当前步骤的状态，可选waitprocessfinisherror | 类型string默认值process |
| headerRender | 头部对应渲染 | 类型headerRender?: () => React.ReactElement<any> |
| headerIcon | 头部对应icon | 类型string |
| headerText | 头部对应描述 | 类型string |
| type | 步骤条类型，有default和navigation两种,navigation类型只在横向时支持 | 类型string默认值default版本1.5.0-beta.0 |
| onChange | 点击切换步骤时触发 | 类型function默认值(current) => void版本1.5.0-beta.0 |

### Steps.Group

### Steps.Step

步骤条内的每一个步骤。

| 属性名 | 说明 | 类型/默认值 |
| --- | --- | --- |
| description | 步骤的详情描述，可选 | 类型string\|ReactNode默认值- |
| icon | 步骤图标的类型，可选 | 类型string\|ReactNode默认值- |
| status | 指定状态。当不配置该属性时，会使用 Steps 的current来自动指定状态。可选：waitprocessfinisherror | 类型string默认值wait |
| title | 标题 | 类型string\|ReactNode默认值- |



================================================================================
文件: Stores.md
路径: doc\Stores.md
================================================================================

# Stores 存储

通过存储可以访问 LovCode 和 lookupCode 的相关信息。

## 使用

```jsx
import { Stores } from 'choerodon-ui/pro';

// 请求Lov配置，优先返回缓存中的数据
const config = await Stores.LovCodeStore.fetchConfig('LOV_CODE');

// 获取Lov配置生成的DataSet，优先返回缓存中的数据
const lovDataSet = await Stores.LovCodeStore.getLovDataSet('LOV_CODE');

// 请求快码值，优先返回缓存中的数据
const lookupData = await Stores.LookupCodeStore.fetchLookupData({
  url: '/common/code/SYS.USER_STATUS/',
  method: 'get',
});

// 清除Lov缓存，不传参数时将清除所有缓存
Stores.LovCodeStore.clearCache(['LOV_CODE']);
```



================================================================================
文件: Switch.md
路径: doc\Switch.md
================================================================================

# Switch 开关

开关选择器。

## 何时使用

- 需要表示开关状态/两种状态之间的切换时；
- 和checkbox的区别是，切换switch会直接触发状态改变，而checkbox一般用于状态标记，需要和提交操作配合。

## 代码演示

## 基本

最简单的用法。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Switch } from 'choerodon-ui/pro';

function onChange(checked) {
  console.log(`switch to ${checked}`);
}

ReactDOM.render(
  <Switch defaultChecked onChange={onChange} />,
  document.getElementById('container')
);
```

## 受控

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Switch } from 'choerodon-ui/pro';

class App extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      values: ['A'],
    };
  }

  handleChange = (value, oldValue) => {
    console.log('[controlled]', value, '[oldValues]', oldValue);
    const { values } = this.state;
    if (value) {
      values.push(value);
    } else {
      values.splice(values.indexOf(value), 1);
    }
    this.setState({
      values,
    });
  }

  render() {
    const { values } = this.state;
    return (
      <div>
        <Switch
```

## 绑定数据源

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, Switch } from 'choerodon-ui/pro';

function handleChange({ name, value, oldValue }) {
  console.log(`[dataset:${name}]`, value, '[oldValue]', oldValue);
}

const data = [{
  bind: 'A',
}];

class App extends React.Component {
  ds = new DataSet({
    fields: [
      { name: 'bind', multiple: true },
      { name: 'bind2', type: 'boolean' },
      { name: 'bind3', type: 'boolean', trueValue: 'Y', falseValue: 'N' },
    ],
    data,
    events: {
      update: handleChange,
    },
  });

  render() {
    return (
      <div>
```

## 文字

带有文字和图标。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Switch, Icon } from 'choerodon-ui/pro';

ReactDOM.render(
  <div>
    <Switch style={{margin:'.1rem'}}  unCheckedChildren="关" defaultChecked>开</Switch>
    <br />
    <Switch style={{margin:'.1rem'}}  unCheckedChildren="0">1</Switch>
    <br />
    <Switch style={{margin:'.1rem'}}  unCheckedChildren={<Icon type="close" />}><Icon type="check" /></Switch>
  </div>,
  document.getElementById('container'));
```

## 只读

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Switch, DataSet } from 'choerodon-ui/pro';

const data = [{ rd: 'C' }];

class App extends React.Component {
  ds = new DataSet({
    fields: [
      { name: 'rd', readOnly: true },
    ],
    data,
  });

  render() {
    return (
      <div>
        <Switch style={{margin:'.1rem'}}  name="rd" disabled />
        <br />
        <Switch style={{margin:'.1rem'}}  name="rd" readOnly />
        <br />
        <Switch style={{margin:'.1rem'}}  dataSet={this.ds} name="rd" value="C" />
      </div>
    );
  }
}

ReactDOM.render(
  <App />,
  document.getElementById('container')
```

## 三种大小

size="large"表示大号开关。size="small"表示小号开关, 默认为defalut。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Switch } from 'choerodon-ui/pro';

ReactDOM.render(
  <div>
    <Switch style={{margin:'.1rem'}}  size="large" defaultChecked />
    <br />
    <Switch style={{margin:'.1rem'}}  size="default" defaultChecked />
    <br />
    <Switch style={{margin:'.1rem'}}  size="small" defaultChecked />
  </div>,
  document.getElementById('container'),
);
```

## 加载中

加载中的开关。

loading：truefalse

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Switch, SelectBox } from 'choerodon-ui/pro';

const { Option } = SelectBox;

function onChange(checked) {
  console.log(`switch to ${checked}`);
}

const App = () => {
  const [loading, setLoading] = React.useState(false);
  return (
    <>
      <p>
        <span>loading：</span>
        <SelectBox
          mode="button"
          value={loading}
          onChange={(v) => setLoading(v)}
        >
          <Option value>true</Option>
          <Option value={false}>false</Option>
        </SelectBox>
      </p>
      <Switch
        style={{ marginRight: 20 }}
        defaultChecked
        onChange={onChange}
        loading={loading}
```

## API

| 属性名 | 说明 | 类型/默认值/版本 |
| --- | --- | --- |
| loading | 加载中的开关 | 类型boolean默认值false版本1.5.4 |

更多属性请参考CheckBox。



================================================================================
文件: Table.md
路径: doc\Table.md
================================================================================

# Table 表格

Pro Table 表格组件，用于展示行列数据，导出和分页配置参见底部。

- 双击列拖拽柄自动调整列宽至合适内容宽度
- 支持实例 methods 控制表格滚动等
- 支持用户个性化
- 集成众多常用功能：拖拽、虚拟滚动、聚合、分组...

## 何时使用

当需要对数据进行排序、搜索、分页、自定义操作等复杂行为时。

相关教程：Table

Pro Table 功能集成多，逻辑复杂，因此需要单页展示大量数据时，在开发技术选型前一定要注意考量。

大数据量场景参考：

参考功能总和 demo，在此复杂度下单页展示 1000 条（2w+ 单元格），加载耗时超过 10s，约 12s 左右。

根据具体场景及需求建议加载耗时 10s 以上参考虚拟滚动 demo处理。

## 代码演示

## 基础

最简单的表格示例。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, Table } from 'choerodon-ui/pro';

class App extends React.Component {
  userDs = new DataSet({
    primaryKey: 'userid',
    name: 'user',
    autoQuery: true,
    pageSize: 5,
    fields: [
      {
        name: 'userid',
        type: 'string',
        label: '编号',
        required: true,
      },
      {
        name: 'name',
        type: 'intl',
        label: '姓名',
      },
      {
        name: 'age',
        type: 'number',
        label: '年龄',
        max: 100,
        step: 1,
      },
      {
        name: 'sex',
        type: 'string',
        label: '性别',
        lookupCode: 'HR.EMPLOYEE_GENDER',
        required: true,
      },
      { name: 'enable', type: 'boolean', label: '是否开启' },
    ],
  });

  get columns() {
    return [
      { name: 'userid' },
      { name: 'name', editor: true },
```

## 级联

头行场景，级联列表。子表格依赖于头表格参数查询。使用 DataSet children 属性关联数据集。

| 编号 | 年龄 | 是否开启 | 姓名 | 代码描述 | 代码描述2 | 代码 | 代码描述 | 编辑Friends |
| --- | --- | --- | --- | --- | --- | --- | --- | --- |
| #1 |  |  |  |  |  |  |  |  |

| 姓名 | 年龄 | 代码描述 | 性别 |
| --- | --- | --- | --- |
| 暂无数据 |  |  |  |

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import {
  DataSet,
  Table,
  TextField,
  Modal,
  ModalProvider,
  injectModal,
  Button,
  Lov,
  Tabs,
} from 'choerodon-ui/pro';

const { Column } = Table;
const { TabPane } = Tabs;

function editorRenderer(record) {
  return record.status === 'add' ? <TextField /> : null;
}

function maleFilter(record) {
  return record.get('sex') === 'M' || !record.get('sex');
}

// 过滤展示数据 结合 table filter
function femaleFilter(record) {
  return record.get('sex') === 'F';
}

@injectModal
class App extends React.Component {
  friendsDs = new DataSet({
    dataToJSON: 'normal',
    queryUrl: '/dataset/user/queries',
    cascadeParams(parent) {
      console.log('cascadeParams', parent.toData());
      // 级联查询参数 (record, primaryKey) => object
      return {
        __parent: parent.toData(),
      };
    },
    fields: [
      { name: 'name', type: 'string', label: '姓名', required: true },
      { name: 'age', type: 'number', label: '年龄', step: 1 },
      {
        name: 'sex',
        type: 'string',
        label: '性别',
        lookupCode: 'HR.EMPLOYEE_GENDER',
        required: true,
      },
    ],
    events: {
      query: ({ params, data }) =>
        console.log('friend query parameter', params, data),
    },
  });

  enemyFriendsDs = new DataSet({
```

## 显示原始值

使用 pristine 属性控制修改后仍显示原始值。

| 编号 | 年龄 | 是否开启 | 姓名 | 操作 |
| --- | --- | --- | --- | --- |
|  | 0 | 63 |  | 彭霞 |
|  | 1 | 84 |  | 孔秀兰 |
|  | 2 | 70 |  | 孟艳 |
|  | 3 | 86 |  | 邱芳 |
|  | 4 | 45 |  | 叶芳 |

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import {
  DataSet,
  Table,
  Form,
  TextField,
  NumberField,
  SelectBox,
  Modal,
  Button,
  CheckBox,
} from 'choerodon-ui/pro';

const { Column } = Table;

class EditButton extends React.Component {
  handleClick = (e) => {
    const { record, onClick } = this.props;
    onClick(record, e);
  };

  render() {
    return (
      <Button
        funcType="flat"
        icon="mode_edit"
        onClick={this.handleClick}
        size="small"
      />
    );
  }
}

class App extends React.Component {
  userDs = new DataSet({
    primaryKey: 'userid',
    name: 'user',
    autoQuery: true,
    pageSize: 5,
    fields: [
      {
        name: 'userid',
        type: 'string',
```

## 行内编辑

editMode 为 inline 的单行编辑模式。

| 编号 | 是否开启 | 年龄 | 姓名 | 代码描述 | 代码 | 性别 | 开始日期 | 是否冻结 | 操作 |
| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |
|  | 0 |  | 63 | 彭霞 | 员工状态 | HR.EMPLOYEE_STATUS | 女 | 2020-09-01 |  |
|  | 1 |  | 84 | 孔秀兰 | 员工状态 | HR.EMPLOYEE_STATUS | 男 |  |  |
|  | 2 |  | 70 | 孟艳 | 员工状态 | HR.EMPLOYEE_STATUS | 男 |  |  |
|  | 3 |  | 86 | 邱芳 | 员工状态 | HR.EMPLOYEE_STATUS | 男 |  |  |
|  | 4 |  | 45 | 叶芳 | 员工状态 | HR.EMPLOYEE_STATUS | 女 |  |  |

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, Table, Button, TextArea } from 'choerodon-ui/pro';

const { Column } = Table;

class App extends React.Component {
  ds = new DataSet({
    primaryKey: 'userid',
    name: 'user',
    autoQuery: true,
    pageSize: 5,
    cacheSelection: true,
    fields: [
      {
        name: 'userid',
        type: 'string',
        label: '编号',
        required: true,
        unique: true,
        help: '主键，区分用户',
      },
      { name: 'name', type: 'intl', label: '姓名' },
      {
        name: 'age',
        type: 'number',
        label: '年龄',
        unique: 'uniqueGroup',
        max: 100,
        step: 1,
        help: '用户年龄，可以排序',
      },
      {
        name: 'numberMultiple',
        type: 'number',
        label: '数值多值',
        multiple: true,
        min: 10,
        max: 100,
        step: 0.5,
      },
      { name: 'code', type: 'object', label: '代码描述', lovCode: 'LOV_CODE' },
      {
        name: 'code_code',
```

## 自定义行内编辑

自定义行内编辑，可仅提交当前行数据。通过 editor 自定义控制行内编辑。

| 编号 | 姓名 | 年龄 | 性别 | 是否开启 | 操作 |
| --- | --- | --- | --- | --- | --- |
|  | 0 | 彭霞 | 63 | 女 |  |
|  | 1 | 孔秀兰 | 84 | 男 |  |
|  | 2 | 孟艳 | 70 | 男 |  |
|  | 3 | 邱芳 | 86 | 男 |  |
|  | 4 | 叶芳 | 45 | 女 |  |

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, Table, Button, Switch } from 'choerodon-ui/pro';

const { Column } = Table;

class App extends React.Component {
  userDs = new DataSet({
    primaryKey: 'userid',
    transport: {
      read({ params: { page, pagesize } }) {
        return {
          url: `/dataset/user/page/${pagesize}/${page}`,
        };
      },
      create(props) {
        return {
          url: '/dataset/user/mutations',
          method: 'put',
          transformResponse: () => {
            // 新增数据提交成功后，需要返回所有数据以便对 record 回写，如果未返回数据，会重新查询数据
            // mock 接口返回新增数据信息
            const { data } = props;
            const bData = { ...data[0] };
            bData.userid = Date.now();
            return bData;
          },
        };
      },
    },
    name: 'user',
    autoQuery: true,
    pageSize: 5,
    fields: [
      {
        name: 'userid',
        type: 'string',
        label: '编号',
      },
      {
        name: 'name',
        type: 'intl',
        label: '姓名',
```

## 树形数据

树形 Table 的功能展示。 - Tree Pro 组件需求 dataSet 数据形式采用打平的结构，通过 Id 和 parentId 字段声明来帮助组件内部构成树形处理。

官网 mock 源数据https://github.com/open-hand/choerodon-ui/blob/master/site/theme/mock/tree.js

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, Table, Button, Icon } from 'choerodon-ui/pro';
import { observer } from 'mobx-react';

const { Column } = Table;

function iconRenderer({ record, text }) {
  return [
    <Icon key="icon" type={record.get('icon')} />,
    <span key="text">{text}</span>,
  ];
}

function expandedRowRenderer({ record }) {
  return (
    <p>
      功能代码：{record.get('functionCode')} 入口页面：{record.get('url')}
    </p>
  );
}

@observer
class AddChildButton extends React.Component {
  render() {
    const { dataSet, ...otherProps } = this.props;
    const { current } = dataSet;
    return <Button {...otherProps} disabled={!current || !current.get('id')} />;
  }
}

class App extends React.Component {
  ds = new DataSet({
    primaryKey: 'id',
    queryUrl: '/tree.mock',
    submitUrl: '/tree.mock',
    autoQuery: true,
    parentField: 'parentId',
    idField: 'id',
    checkField: 'ischecked',
    combineSort: true,
    fields: [
      { name: 'id', type: 'number' },
      { name: 'text', type: 'string', label: '功能名称' },
      { name: 'url', type: 'string', label: '入口页面' },
      { name: 'expand', type: 'boolean', label: '是否展开' },
      { name: 'ischecked', type: 'boolean', label: '是否开启' },
      { name: 'score', type: 'number', label: '顺序', order: 'asc' },
      { name: 'parentId', type: 'number' },
    ],
    events: {
      indexchange: ({ current }) => console.log('current user', current),
      submit: ({ data }) => console.log('submit tree data', data),
    },
  });
```

## 加载树形结构数据

当接口查询的数据为树形结构时，可以使用此方案。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, Table, Button } from 'choerodon-ui/pro';

const template = {
  creationDate: '2021-09-03 15:57:39',
  createdBy: 25,
  lastUpdateDate: '2021-09-03 15:57:39',
  lastUpdatedBy: 25,
  objectVersionNumber: 1,
  _token:
    'WBNovgcQn7gFNmRPkVWyZmLRG8f1OgTzE8WjA98WlgfrUKjSG3s3RLLZhwBO8UAWlQzWLwBYxJunxnQZtDZ+zFLAISGdg3N0ifurKcejVmoU2QjFc3ACLhKba+Lk8NegCuDKN+6jgKCQ+1CaHjsgcX92opAi3CgKfvJFRk323VA=',
  businessObjectRelationId: '=L8-NXHp_X9x3I6IzxjuscBXkDK-SxU15OW9FONvtouE==',
  businessObjectId: '=ByrKpV7mRrCOXs_A34jIAg7-NJT3OEKaTPvdD8nKgJw==',
  relateBusinessObjectCode: 'heto_contract_trading',
  parentBusinessObjectFieldCode: 'partner',
  relateType: 'LINK',
  orderSeq: '1',
  tenantId: 0,
  relateBusinessObjectFieldCode: null,
  relBusinessObjectName: '交易方',
  relBusinessObjectFieldName: '交易方',
  businessObjectRelationFieldList: [],
  businessObjectRelationList: null,
  relBusinessObjectFieldId: null,
  componentType: null,
};
const fieldTemplate = {
  creationDate: null,
  createdBy: null,
  lastUpdateDate: null,
  lastUpdatedBy: null,
  objectVersionNumber: 1,
  _token:
    'WBNovgcQn7gFNmRPkVWyZmLRG8f1OgTzE8WjA98WlgfrUKjSG3s3RLLZhwBO8UAWlQzWLwBYxJunxnQZtDZ+zPyI8LzB6FeaLBT8GKF09Qpf5LAY3mdvVkgS+bHL2/zvS0NbAkXENtbm6U3k8ClBzhpCDIrrHvoldyLfhaYcx1GZkwCE36qMrTka9tXVb5xt',
  businessObjectRelationFieldId:
    '=BrMInoE3beHbz4Td5n2MFtpAYfAAmRhArZ9toMUEd2g==',
  businessObjectRelationId: '=L8-NXHp_X9x3I6IzxjuscBXkDK-SxU15OW9FONvtouE==',
  businessObjectCode: 'heto_contract_trading',
  businessObjectFieldCode: 'createdBy',
  aliasName: '创建人2',
  displayName: null,
  tenantId: 0,
  businessObjectFieldName: '创建人',
  componentType: 'NUMBER_FIELD',
  businessObjectFieldId: 221555985198661630,
  businessObjectName: '交易方',
};

const App = () => {
  const [editable, setEditable] = React.useState(false);
  const data = React.useMemo(() => {
    // 创建模型
    const list = [];
    for (let i = 0; i < 3; i++) {
```

## 树形数据异步懒加载

点击展开图标时异步加载子数据。

| 功能名称 | 是否开启 | 是否展开 |
| --- | --- | --- |
|  | 组织架构 |  |
|  | 报表管理 |  |
|  | 报表定义 |  |
|  | 报表设计 |  |
|  | 附件管理 |  |
|  | 计划任务 |  |
|  | 工作流 |  |
|  | 流程管理 |  |
|  | 接口管理 |  |
|  | 服务管理 |  |
|  | 任务管理 |  |
|  | 系统管理 |  |

| 功能名称 | 是否开启 | 是否展开 |
| --- | --- | --- |
|  | 组织架构 |  |
|  | 报表管理 |  |
|  | 报表定义 |  |
|  | 报表设计 |  |
|  | 附件管理 |  |
|  | 计划任务 |  |
|  | 工作流 |  |
|  | 流程管理 |  |
|  | 接口管理 |  |
|  | 服务管理 |  |
|  | 任务管理 |  |
|  | 系统管理 |  |

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, Table, Icon, Row, Col } from 'choerodon-ui/pro';
import axios from 'axios';

const { Column } = Table;

// 这里面可以控制node结点的判断来实现是否展示为叶结点
function nodeCover({ record }) {
  const nodeProps = {
    title: record.get('text'),
  };
  if (record.get('text') === '岗位管理') {
    nodeProps.isLeaf = true;
  }
  return nodeProps;
}

function iconRenderer({ record, text }) {
  return [
    <Icon key="icon" type={record.get('icon')} />,
    <span key="text">{text}</span>,
  ];
}

class App extends React.Component {
  ds = new DataSet({
    primaryKey: 'id',
    transport: {
      read({ data: { parentId } }) {
        return {
          url: `/tree-async${parentId ? `-${parentId}` : ''}.mock`,
        };
      },
    },
    submitUrl: '/tree-async.mock',
    autoQuery: true,
    parentField: 'parentId',
    idField: 'id',
    // 配置 expandField 后，展开依据于字段对应值，defaultExpanded 无效
    // expandField: 'expand',
    checkField: 'ischecked',
    cacheSelection: true,
    cacheModified: true,
    fields: [
      { name: 'id', type: 'number' },
```

## 树形数据异步分页

异步加载数据并对父亲节点进行分页处理，树形分页需要根节点 parentId 为 null。

| 功能名称 | 入口页面 | 是否开启 | 是否展开 | 权限设置 |
| --- | --- | --- | --- | --- |
|  | 组织架构 |  |  |  |
|  | 员工管理(react) | hap-core/hr/employee |  |  |
|  | 组织管理 | hr/org_unit.html |  |  |
|  | 公司管理(react) | hap-core/hr/company |  |  |
|  | 组织管理(react) | hap-core/hr/orgunit |  |  |
|  | 岗位管理(react) | hap-core/hr/position |  |  |
|  | 岗位管理 | hr/position.html |  |  |
|  | 员工管理 | hr/employee.html |  |  |
|  | 公司管理 | fnd/company.html |  |  |
|  | 报表管理 |  |  |  |
|  | 附件管理 |  |  |  |
|  | 计划任务 |  |  |  |
|  | 工作流 |  |  |  |

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, Table, Icon } from 'choerodon-ui/pro';

const { Column } = Table;

function iconRenderer({ record, text }) {
  return [
    <Icon key="icon" type={record.get('icon')} />,
    <span key="text">{text}</span>,
  ];
}

class App extends React.Component {
  ds = new DataSet({
    primaryKey: 'id',
    transport: {
      read({ data: { parentId }, params: { page, pagesize } }) {
        return parentId
          ? {
              url: `/tree-async-${parentId}.mock`,
            }
          : {
              url: `/tree-async/${pagesize}/${page}.mock`,
            };
      },
    },
    submitUrl: '/tree-async.mock',
    autoQuery: true,
    paging: 'server',
    pageSize: 5,
    parentField: 'parentId',
    idField: 'id',
    expandField: 'expand',
    checkField: 'ischecked',
    fields: [
      { name: 'id', type: 'number' },
      { name: 'text', type: 'string', label: '功能名称' },
      { name: 'url', type: 'string', label: '入口页面' },
      { name: 'expand', type: 'boolean', label: '是否展开' },
      { name: 'ischecked', type: 'boolean', label: '是否开启' },
      { name: 'score', type: 'number', order: 'asc' },
      { name: 'parentId', type: 'number', parentFieldName: 'id' },
    ],
    events: {
      indexchange: ({ current }) => console.log('current user', current),
```

## 组合列

组合表头展示列信息。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, Table, CheckBox } from 'choerodon-ui/pro';

const { Column } = Table;

class App extends React.Component {
  ds = new DataSet({
    primaryKey: 'userid',
    transport: {
      read({ params: { page, pagesize } }) {
        return {
          url: `/dataset/user/page/${pagesize}/${page}`,
        };
      },
    },
    autoQuery: true,
    pageSize: 5,
    queryFields: [
      { name: 'name', type: 'string', label: '姓名' },
      { name: 'age', type: 'number', label: '年龄' },
      { name: 'code', type: 'object', label: '代码描述', lovCode: 'LOV_CODE' },
      {
        name: 'sex',
        type: 'string',
        label: '性别',
        lookupCode: 'HR.EMPLOYEE_GENDER',
      },
      { name: 'date.startDate', type: 'date', label: '开始日期' },
      {
        name: 'sexMultiple',
        type: 'string',
        label: '性别（多值）',
        lookupCode: 'HR.EMPLOYEE_GENDER',
        multiple: true,
      },
    ],
    fields: [
      { name: 'userid', type: 'string', label: '编号', required: true },
      { name: 'name', type: 'string', label: '姓名' },
      { name: 'age', type: 'number', label: '年龄', max: 100, step: 1 },
      {
        name: 'sex',
        type: 'string',
        label: '性别',
        lookupCode: 'HR.EMPLOYEE_GENDER',
      },
      {
```

## 动态筛选条

Table queryBar 设为 filterBar，查询条件可动态配置筛选条，可单独纯前端使用，也可结合后端标准接口可实现筛选列表保存，参考 demo 代码注释。

更多详细功能教程：https://open.hand-china.com/choerodon-ui/zh/tutorials/dynamic-filter-bar-doc


| 姓名 | 年龄 |
| --- | --- |
| 暂无数据 |  |

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, Table, Button } from 'choerodon-ui/pro';
import { observer } from 'mobx-react';

const menuData = [
  {
    creationDate: '2021-12-07 14:37:23',
    createdBy: 1,
    lastUpdateDate: '2021-12-08 09:25:56',
    lastUpdatedBy: 1,
    objectVersionNumber: 8,
    searchId: '25',
    searchCode: 'HMSG.NOTICE',
    searchName: '公司查询',
    defaultFlag: 0,
    saveFilterValue: 0,
    remark: null,
    userId: '=f0-78Q-PQKkE_PPHh51mxg===',
    tenantId: 0,
    isTenant: 1,
    conditionList: [
      {
        fieldName: 'name',
        comparator: 'EQUAL',
        type: 'string',
        label: '姓名',
      },
      {
        fieldName: 'age',
        comparator: 'EQUAL',
        type: 'number',
        label: '年龄',
        usedFlag: 1,
      },
      {
        fieldName: 'code',
        comparator: 'EQUAL',
        type: 'object',
        label: '代码描述',
        lovCode: 'LOV_CODE',
      },
      {
        fieldName: 'email',
        type: 'email',
        comparator: 'EQUAL',
        label: '邮箱',
      },
      {
        fieldName: 'test',
```

## 自定义搜索条

queryBar 采用钩子类型自定义搜索条，预置搜索条组件可导出配合使用。


| 姓名 | 年龄 |
| --- | --- |
|  | 彭霞 |
|  | 孔秀兰 |
|  | 孟艳 |
|  | 邱芳 |
|  | 叶芳 |
|  | 雷秀兰 |
|  | 唐静 |
|  | 赵秀英 |
|  | 杨军 |
|  | 谢秀兰 |

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, Table, Button, Form } from 'choerodon-ui/pro';

const { FilterBar } = Table;

const optionData = [
  { text: '男', value: 'M' },
  { text: '女', value: 'F' },
];

const QueryBar = (props) => {
  const {
    queryFields,
    queryDataSet,
    queryFieldsLimit,
    dataSet,
    buttons,
    defaultShowMore = true,
  } = props;
  const [showMore, setShowMore] = React.useState(defaultShowMore);
  const toggleShowMore = React.useCallback(() => setShowMore(!showMore), [
    showMore,
  ]);
  const handleQuery = React.useCallback(() => queryDataSet.query(), [
    queryDataSet,
  ]);
  const handleReset = React.useCallback(() => queryDataSet.reset(), [
    queryDataSet,
  ]);
  if (queryDataSet) {
    return (
      <>
        <Form columns={queryFieldsLimit} dataSet={queryDataSet}>
          {showMore ? queryFields : queryFields.slice(0, queryFieldsLimit)}
          <div newLine>
            <Button dataSet={null} onClick={handleQuery}>
              查询
            </Button>
            <Button onClick={handleReset}>重置</Button>
            <Button onClick={toggleShowMore}>显示更多</Button>
            {buttons}
          </div>
        </Form>
        <FilterBar
          {...props}
          // 官网 demo 需要,正常项目内使用无需传 prefixCls
          prefixCls="c7n-pro-table"
          buttons={[]}
        />
      </>
    );
```

## 自定义查询 DataSet

自定义列表头部查询 DataSet，更灵活处理查询数据源逻辑。

| 姓名 | 年龄 | 性别 | 开始日期 | 性别（多值） |
| --- | --- | --- | --- | --- |
|  | 彭霞 | 63 | 女 | 2020-09-01 |
|  | 孔秀兰 | 84 | 男 |  |
|  | 孟艳 | 70 | 男 |  |
|  | 邱芳 | 86 | 男 |  |
|  | 叶芳 | 45 | 女 |  |

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, Table } from 'choerodon-ui/pro';

const { Column } = Table;

class App extends React.Component {
  qds = new DataSet({
    autoQuery: true,
    name: 'user',
    pageSize: 1,
    fields: [
      { name: 'name', type: 'string', label: '姓名' },
      { name: 'age', type: 'number', label: '年龄' },
      {
        name: 'code',
        type: 'object',
        label: '代码描述',
        lovCode: 'LOV_CODE',
      },
      {
        name: 'code_code',
        type: 'string',
        label: '代码',
        maxLength: 20,
        bind: 'code.code',
        ignore: 'always',
      },
      {
        name: 'code_description',
        type: 'string',
        label: '代码描述',
        bind: 'code.description',
        ignore: 'always',
      },
    ],
  });

  ds = new DataSet({
    primaryKey: 'userid',
    name: 'user',
    autoQuery: true,
    pageSize: 5,
    queryDataSet: this.qds,
    selection: 'single',
    fields: [
```

## Spin 受控

Table Spin 受控与自定义渲染展示。

| 编号 | 年龄 | 姓名 |
| --- | --- | --- |
|  | 0 | 63 |
|  | 1 | 84 |
|  | 2 | 70 |
|  | 3 | 86 |
|  | 4 | 45 |

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, Table, Button, message } from 'choerodon-ui/pro';

const { Column } = Table;

class App extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      spinProps: {},
    };
  }

  ds = new DataSet({
    primaryKey: 'userid',
    name: 'user',
    autoQuery: true,
    pageSize: 5,
    fields: [
      {
        name: 'userid',
        type: 'string',
        label: '编号',
        required: true,
        unique: true,
        help: '主键，区分用户',
      },
      { name: 'name', type: 'intl', label: '姓名' },
      {
        name: 'age',
        type: 'number',
        label: '年龄',
        unique: 'uniqueGroup',
        max: 100,
        step: 1,
        help: '用户年龄，可以排序',
      },
    ],
  });

  handleUp = () => {
    this.setState({
      spinProps: { indicator: this.c7nIcon, size: 'large', spinning: true },
    });
    message.success('启用自定义Spin');
```

## 按钮受控

结合 mobx 处理一些按钮状态控制，避免在事件中使用 state 导致性能问题。

| 编号 | 姓名 | 年龄 | 性别 | 是否开启 |
| --- | --- | --- | --- | --- |
|  | 0 | 彭霞 | 63 | 女 |
|  | 1 | 孔秀兰 | 84 | 男 |
|  | 2 | 孟艳 | 70 | 男 |
|  | 3 | 邱芳 | 86 | 男 |
|  | 4 | 叶芳 | 45 | 女 |

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { observer } from 'mobx-react-lite';
import {
  DataSet,
  Table,
  Button,
} from 'choerodon-ui/pro';

const HeaderButtons = observer(props => {
  const isDisabled = props.dataSet.selected.length === 0;

  return (
    <Button icon="delete" disabled={isDisabled}>
      删除
    </Button>
  );
});

const App = observer(() => {
  const userDs = new DataSet({
    primaryKey: 'userid',
    name: 'user',
    autoQuery: true,
    pageSize: 5,
    fields: [
      {
        name: 'userid',
        type: 'string',
        label: '编号',
        required: true,
      },
      {
        name: 'name',
        type: 'intl',
        label: '姓名',
      },
      {
        name: 'age',
        type: 'number',
        label: '年龄',
        max: 100,
        step: 1,
      },
      {
        name: 'sex',
```

## 动态配置字段编辑器

动态切换字段编辑器，根据字段基础的值来改变字段性别编辑器为 lov 或 select。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, Table, Switch, Select } from 'choerodon-ui/pro';

const { Column } = Table;

class App extends React.Component {
  optionDs = new DataSet({
    selection: 'single',
    queryUrl: '/common/code/HR.EMPLOYEE_GENDER/',
    autoQuery: true,
  });

  userDs = new DataSet({
    autoCreate: true,
    primaryKey: 'userid',
    transport: {
      read({ params: { page, pagesize } }) {
        return {
          url: `/dataset/user/page/${pagesize}/${page}`,
        };
      },
    },
    pageSize: 5,
    fields: [
      {
        name: 'base',
        type: 'string',
        label: '基础',
      },
      {
        name: 'sex',
        label: '性别',
        computedProps: {
          type: ({ record }) => {
            return record && record.get('base') === 'Lov' ? 'object' : 'string';
          },
          lovCode: ({ record }) => {
            return record && record.get('base') === 'Lov' ? 'LOV_CODE' : null;
          },
          options: ({ record }) => {
            return record && record.get('base') === 'Lov'
              ? null
              : this.optionDs;
          },
        },
        required: true,
      },
      {
        name: 'userid',
        type: 'string',
```

## 自适应高度

通过 autoHeight 使得表格可以自适应容器高度，内容超出表内滚动，并且保持表头固定。(需要父级元素非仅由 Table 撑开；若存在筛选条，需要将筛选条的高度预留在内)。

autoHeight 属性:

| 类型 | 默认值 / 自定义 |
| --- | --- |
| boolean | false |
| boolean | true = { type: 'minHeight', diff: 80 } |
| object | { type: 'minHeight' \| 'maxHeight', diff: number(Table 自适应底部预留调整参数;单位默认 px) } |

| 编号 | 年龄 | 是否开启 | 姓名 |
| --- | --- | --- | --- |
|  | 0 | 63 |  |
|  | 1 | 84 |  |
|  | 2 | 70 |  |
|  | 3 | 86 |  |
|  | 4 | 45 |  |

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, Table } from 'choerodon-ui/pro';

const { Column } = Table;

class App extends React.Component {
  userDs = new DataSet({
    primaryKey: 'userid',
    name: 'user',
    autoQuery: true,
    pageSize: 5,
    fields: [
      {
        name: 'userid',
        type: 'string',
        label: '编号',
        required: true,
      },
      {
        name: 'name',
        type: 'intl',
        label: '姓名',
      },
      {
        name: 'age',
        type: 'number',
        label: '年龄',
        max: 100,
        step: 1,
      },
      {
        name: 'sex',
        type: 'string',
        label: '性别',
        lookupCode: 'HR.EMPLOYEE_GENDER',
        required: true,
      },
      { name: 'enable', type: 'boolean', label: '是否开启' },
    ],
  });

  demoDs = new DataSet({
    autoCreate: true,
    fields: [{ name: 'autoHeight', defaultValue: true }],
  });

  render() {
    return (
      <div style={{ height: '500px' }}>
        <div style={{ height: '100%' }}>
          <Table
            autoHeight={{ type: 'maxHeight', diff: 20 }}
```

## 虚拟滚动

虚拟滚动，virtual

在大数据量并同时对性能需求很高的情况下建议开启。

详细使用指南：https://open.hand-china.com/choerodon-ui/zh/tutorials/table-virtual

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, Table } from 'choerodon-ui/pro';

class App extends React.Component {
  userDs = new DataSet({
    primaryKey: 'userid',
    name: 'large-user',
    autoQuery: true,
    pageSize: 10,
    fields: [
      {
        name: 'userid',
        type: 'string',
        label: '编号',
        required: true,
        unique: true, // 唯一索引或联合唯一索引组名 设置可编辑只有新增才能编辑,确保该字段或字段组唯一性
        help: '主键，区分用户',
      },
      {
        name: 'name',
        type: 'intl',
        label: '姓名',
      },
      {
        name: 'age',
        type: 'number',
        label: '年龄',
        unique: 'uniqueGroup',
        max: 100,
        step: 1,
        help: '用户年龄，可以排序',
      },
      {
        name: 'numberMultiple',
        type: 'number',
        label: '数值多值',
        multiple: true,
        min: 10,
        max: 100,
        step: 0.5,
      },
      {
        name: 'code',
        type: 'object',
        label: '代码描述',
```

## 鼠标批量选择

在 rowbox 列上鼠标保持按下拖拉,对两个 rowbox 之间的行进行批量勾选。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, Table } from 'choerodon-ui/pro';

const { Column } = Table;

const nameDynamicProps = {
  // 当Sex为M(男)的时候 该属性为必须输入字段 即为 field 中 require = true
  required({ record }) {
    return record && record.get('sex') === 'M';
  },
};

class App extends React.Component {
  options = new DataSet({
    fields: [
      {
        name: 'value',
        type: 'string',
      },
      {
        name: 'meaning',
        type: 'string',
      },
    ],
  });

  userDs = new DataSet({
    primaryKey: 'userid',
    name: 'user',
    autoQuery: true,
    pageSize: 10,
    transport: {
      read: {
        url: '/dataset/user/queries',
      },
      create: {
        url: '/dataset/user/mutations',
        method: 'put',
      },
    },
    fields: [
      {
        name: 'userid',
        type: 'string',
        label: '编号',
        required: true,
        unique: true, // 唯一索引或联合唯一索引组名 设置可编辑只有新增才能编辑,确保该字段或字段组唯一性
        help: '主键，区分用户',
      },
      {
        name: 'name',
        type: 'intl',
        label: '姓名',
        computedProps: nameDynamicProps,
```

## 拖拽集成

拖拽集成，点击对应按钮查看不同类型拖拽示例。

| 编号 | 年龄 | 是否开启 | 姓名 | 操作 |
| --- | --- | --- | --- | --- |
|  | 0 | 63 |  | 彭霞 |
|  | 1 | 84 |  | 孔秀兰 |
|  | 2 | 70 |  | 孟艳 |
|  | 3 | 86 |  | 邱芳 |
|  | 4 | 45 |  | 叶芳 |

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import {
  DataSet,
  Table,
  Form,
  TextField,
  NumberField,
  SelectBox,
  Modal,
  Button,
} from 'choerodon-ui/pro';

const { Column } = Table;

class EditButton extends React.Component {
  handleClick = (e) => {
    const { record, onClick } = this.props;
    onClick(record, e);
  };

  render() {
    return (
      <Button
        funcType="flat"
        icon="mode_edit"
        onClick={this.handleClick}
        size="small"
      />
    );
  }
}

class App extends React.Component {
  userDs = new DataSet({
    primaryKey: 'userid',
    name: 'user',
    autoQuery: true,
    pageSize: 5,
    fields: [
      {
        name: 'userid',
        type: 'string',
        label: '编号',
        required: true,
      },
      {
        name: 'name',
```

## 用户个性化

支持对列的各项属性进行配置并个性化存储。全局配置 customizedSave | customizedLoad 个性化处理钩子，结合后端 API 进行存储或钩子内配置前端缓存。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import {
  DataSet,
  Table,
  Form,
  TextField,
  NumberField,
  SelectBox,
  Modal,
  Button,
  Icon,
} from 'choerodon-ui/pro';

const { Column } = Table;

const EditButton = (props) => {
  const handleClick = (e) => {
    const { record, onClick } = props;
    onClick(record, e);
  };

  return (
    <Button
      funcType="flat"
      icon="mode_edit"
      onClick={handleClick}
      size="small"
    />
  );
};

class App extends React.Component {
  state = { customizedCode: 'customized', heightChangeable: true };

  style = { height: 'calc(100vh - 100px)' };

  userDs = new DataSet({
    primaryKey: 'userid',
    transport: {
      read({ params: { page, pagesize } }) {
        return {
          url: `/dataset/user/page/${pagesize}/${page}`,
        };
      },
    },
    autoQuery: true,
    pageSize: 5,
```

## 拖拽渲染示例

可以通过 rowDragRender 里面方法进行对于整体的拖拽控制，如 droppableProps，draggableProps 控制是否可以放入和拖动等。更多查看 react-beautiful-dnd。在 1.5.7 版本扩展 draggableProps.isDragDisabled 属性支持回调函数：(record?: Record) => boolean，可以更灵活地对每一行进行拖拽控制。

| 编号 | 年龄 | 是否开启 | 姓名 | 操作 |
| --- | --- | --- | --- | --- |
|  |  | 0 | 63 |  |
|  |  | 1 | 84 |  |
|  |  | 2 | 70 |  |
|  |  | 3 | 86 |  |
|  |  | 4 | 45 |  |

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import {
  DataSet,
  Table,
  Form,
  TextField,
  NumberField,
  SelectBox,
  Modal,
  Button,
} from 'choerodon-ui/pro';

const { Column } = Table;

const { TableRow } = Table;

class EditButton extends React.Component {
  handleClick = (e) => {
    const { record, onClick } = this.props;
    onClick(record, e);
  };

  render() {
    return (
      <Button
        funcType="flat"
        icon="mode_edit"
        onClick={this.handleClick}
        size="small"
      />
    );
  }
}

class App extends React.Component {
  userDs = new DataSet({
    primaryKey: 'userid',
    name: 'user',
    autoQuery: true,
    pageSize: 5,
    fields: [
      {
        name: 'userid',
        type: 'string',
        label: '编号',
```

## 头部汇总条

对字段进行头部汇总展示，buttonsLimit 默认为 3。

| 姓名 | 年龄 |
| --- | --- |
|  | 彭霞 |
|  | 孔秀兰 |
|  | 孟艳 |
|  | 邱芳 |
|  | 叶芳 |

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, Table } from 'choerodon-ui/pro';

const optionData = [
  { text: '男', value: 'M' },
  { text: '女', value: 'F' },
];

class App extends React.Component {
  optionDs = new DataSet({
    data: optionData,
    selection: 'single',
  });

  ds = new DataSet({
    primaryKey: 'userid',
    name: 'user',
    autoQuery: true,
    pageSize: 5,
    queryFields: [
      { name: 'name', type: 'string', label: '姓名' },
      { name: 'age', type: 'number', label: '年龄' },
      {
        name: 'sex.text',
        type: 'string',
        label: '性别',
        textField: 'text',
        valueField: 'value',
        options: this.optionDs, // 下拉框组件的菜单数据集
        defaultValue: 'F',
      },
      { name: 'date.startDate', type: 'date', label: '开始日期' },
      {
        name: 'sexMultiple',
        type: 'string',
        label: '性别（多值）',
        lookupCode: 'HR.EMPLOYEE_GENDER',
        multiple: true,
      },
    ],
    fields: [
      { name: 'userid', type: 'string', label: '编号', required: true },
      { name: 'name', type: 'string', label: '姓名' },
```

## 聚合视图

单元格内多字段聚合展示视图。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import isNaN from 'lodash/isNaN';
import moment from 'moment';
import {
  DataSet,
  Button,
  Table,
  NumberField,
  TextArea,
  DateTimePicker,
  SelectBox,
  AutoComplete,
  Row,
  Col,
} from 'choerodon-ui/pro';

const { Column } = Table;

function sexIdRenderer({ record }) {
  // 获取性别codeValueId
  return record.getField('sex').getLookupData().codeValueId;
}

function aggregationRendereer({ text, record }) {
  return (
    <Row>
      <Col span={6}>{record.get('email')}</Col>
      <Col span={18}>{text}</Col>
    </Row>
  );
}

function handleUserDSLoad({ dataSet }) {
  const first = dataSet.get(0);
  if (first) {
    first.selectable = false;
  }
}

function renderColumnFooter(dataset, name) {
  const max = Math.max(
    0,
    ...dataset.data
      .map((record) => record.get(name))
      .filter((value) => !isNaN(value)),
  );
  return `最大年龄：${NumberField.format(max)}`;
}

function renderColumnHeader(dataset, name) {
  const field = dataset.getField(name);
  return (
    <span>
      <i>-=</i>
      {field ? field.get('label') : ''}
      <i>=-</i>
    </span>
  );
}
```

## 数据分组

```javascript
import React from 'react';
import ReactDOM from 'react-dom';

import { useDataSet, Table, Form, SelectBox, Switch } from 'choerodon-ui/pro';

const { Option } = SelectBox;

const App = () => {
  const userDs = useDataSet(
    () => ({
      strictPageSize: false,
      data: [
        { id: 1, name: '张三', code: 'a', company: '汉得', dept: '人事' },
        { id: 2, name: '李四', code: 'b', company: '汉得', dept: '人事' },
        {
          id: 3,
          name: '王五',
          code: 'c',
          company: '汉得',
          dept: '研发',
          parentDept: '人事',
        },
        {
          id: 4,
          name: '赵六',
          code: 'd',
          company: '汉得',
          dept: '研发',
          parentDept: '人事',
        },
        {
          id: 5,
          name: '孙七',
          code: 'e',
          company: '甄云',
          dept: '人事',
          parentCompany: '汉得',
        },
        {
          id: 6,
          name: '周八',
          code: 'f',
          company: '甄云',
          dept: '人事',
```

## 进阶数据分组

更为复杂的数据分组场景。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { action } from 'mobx';
import {
  useDataSet,
  Table,
  CheckBox,
  Row,
  Col,
  Button,
} from 'choerodon-ui/pro';

const App = () => {
  const [bodyExpanded, setBodyExpanded] = React.useState(false);
  // 物料
  const itemDs = useDataSet(
    () => ({
      paging: false,
      data: [
        {
          id: 1,
          company: '厦门XX食品有限公司',
          itemCode: 'A',
          itemName: '188836-笔记本电脑',
          itemSize: '15.9英寸',
          unitPrice: 9000,
          quantity: 10,
          amount: 90000,
          tax: 0.1,
          totalAmount: 1965310000,
          totalAmountNoTax: 1965000000,
          taxAmount: 310000,
        },
        {
          id: 2,
          company: '厦门XX食品有限公司',
          itemCode: 'B',
          itemName: '2984-汽车',
          itemSize: null,
          unitPrice: 80000,
          quantity: 20,
          amount: 1600000,
          tax: 0.1,
          totalAmount: 1965310000,
          totalAmountNoTax: 1965000000,
          taxAmount: 310000,
        },
        {
          id: 3,
          company: '厦门XX食品有限公司',
          itemCode: 'C',
          itemName: '12294-打印机',
          itemSize: null,
          unitPrice: 85000,
          quantity: 20,
```

## 异步计数

查询时通知后端是否自动统计总数。当 autoCount 设为 false 时， 查询的参数默认会带上count=N的参数（通过 configure 设置默认 autoCount 属性时，参数为defaultCount=N，用于区分全局设置和自定义设置），参数名和值可以通过全局配置 generatePageQuery 设置当查询结果中 countKey 对应的值是 Y 时，会发起计数查询的请求，请求地址同 read 的地址， 请求参数会带上 onlyCount=Y 的参数，参数名和值可以通过全局配置 generatePageQuery 设置

| 编号 | 年龄 | 是否开启 | 姓名 |
| --- | --- | --- | --- |
|  | 0 | 63 |  |
|  | 1 | 84 |  |
|  | 2 | 70 |  |
|  | 3 | 86 |  |
|  | 4 | 45 |  |

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, Table } from 'choerodon-ui/pro';

const { Column } = Table;

class App extends React.Component {
  userDs = new DataSet({
    primaryKey: 'userid',
    transport: {
      read({ params: { page, pagesize, count, onlyCount } }) {
        if (onlyCount === 'Y') {
          return {
            url: '/dataset/user/count',
          };
        }
        if (count === 'N') {
          return {
            url: `/dataset/user/page/asynccount/${pagesize}/${page}`,
          };
        }
        return {
          url: `/dataset/user/page/${pagesize}/${page}`,
        };
      },
    },
    autoQuery: true,
    autoCount: false,
    pageSize: 5,
    fields: [
      {
        name: 'userid',
        type: 'string',
        label: '编号',
        required: true,
      },
      {
        name: 'name',
        type: 'intl',
        label: '姓名',
      },
      {
        name: 'age',
        type: 'number',
```

## 组合排序

DataSet 的 combineSort 属性值设置为 true 开启组合排序模式。给 Table 的列设置属性 sortable 来开启具体要排序的列。开启组合排序后，传到后端的排序参数字段 sort 为数组形式，数组值顺序为排序的优先级，例如：sort: ['age,desc', 'name,asc']

| 编号 | 姓名 | 年龄 | 性别 | 性别（多值） |
| --- | --- | --- | --- | --- |
|  | 0 | 彭霞 | 63 | 女 |
|  | 1 | 孔秀兰 | 84 | 男 |
|  | 2 | 孟艳 | 70 | 男 |
|  | 3 | 邱芳 | 86 | 男 |
|  | 4 | 叶芳 | 45 | 女 |

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, Table } from 'choerodon-ui/pro';
import { observer } from 'mobx-react';

const optionData = [
  { text: '男', value: 'M' },
  { text: '女', value: 'F' },
];

@observer
class App extends React.Component {
  optionDs = new DataSet({
    data: optionData,
    selection: 'single',
  });

  ds = new DataSet({
    primaryKey: 'userid',
    name: 'user',
    pageSize: 5,
    autoQuery: true,
    // 配置开启组合排序
    combineSort: true,
    queryFields: [
      { name: 'name', type: 'string', label: '姓名' },
      { name: 'age', type: 'number', label: '年龄' },
      { name: 'code', type: 'object', label: '代码描述', lovCode: 'LOV_CODE' },
      { name: 'email', type: 'email', label: '邮箱' },
    ],
    fields: [
      { name: 'userid', type: 'string', label: '编号', required: true },
      { name: 'name', type: 'string', label: '姓名' },
      { name: 'age', type: 'number', label: '年龄', max: 100, step: 1 },
      {
        name: 'sex',
        type: 'string',
        label: '性别',
        lookupCode: 'HR.EMPLOYEE_GENDER',
      },
      {
        name: 'date.startDate',
        type: 'date',
        label: '开始日期',
```

## 数据复制&粘贴

实现 Table 与 Excel 表格之间的数据复制、粘贴功能。可编辑区域需要按下 shift 进行鼠标框选。

| 姓名 | 部门 | 员工状态 | 年龄 | 性别 | 邮箱 | 是否开启 | 操作 |
| --- | --- | --- | --- | --- | --- | --- | --- |
| 暂无数据 |  |  |  |  |  |  |  |

```javascript
import React, { useMemo } from 'react';
import ReactDOM from 'react-dom';
import { DataSet, Table, Button } from 'choerodon-ui/pro';
import { Tag } from 'choerodon-ui';

const App = () => {
  const ds = useMemo(
    () =>
      new DataSet({
        primaryKey: 'userid',
        queryUrl: 'https://hzero-test.open.hand-china.com/mock/sortUser',
        pageSize: 10,
        dataKey: 'rows',
        autoQuery: true,
        // 配置开启组合排序
        combineSort: true,
        queryFields: [
          { name: 'name', type: 'string', label: '姓名' },
          { name: 'age', type: 'number', label: '年龄' },
          { name: 'email', type: 'email', label: '邮箱' },
        ],
        fields: [
          { name: 'userid', type: 'string', label: '编号', required: true },
          { name: 'name', type: 'string', label: '姓名' },
          { name: 'dept', type: 'string', label: '部门' },
          { name: 'age', type: 'number', label: '年龄', max: 100, step: 1 },
          { name: 'email', type: 'email', label: '邮箱' },
          { name: 'userStatus', type: 'boolean', label: '员工状态' },
          {
            name: 'sex',
            type: 'string',
            label: '性别',
            lookupCode: 'HR.EMPLOYEE_GENDER',
          },
          {
            name: 'date.startDate',
            type: 'date',
            label: '开始日期',
            defaultValue: new Date(),
          },
          { name: 'enable', type: 'boolean', label: '是否开启' },
        ],
        events: {
          query: ({ params, data }) => {
            // 组合排序模式下，排序参数以数组形式传递到后端
            console.log('advanced bar query parameter', params, data);
            return true;
          },
        },
      }),
    [],
  );

  const command = [
    <Button key="edit" funcType="link">
      禁用
    </Button>,
    <Button key="opera" funcType="link">
      启用
    </Button>,
  ];
```

## 多表拖拽

使用 react-beautiful-dnd 扩展多表之间的行拖拽能力。开启 rowDraggable 和 customDragDropContenxt 属性，同时使用 id 属性区分 Table 拖拽标识. 批量拖拽参考：https://github.com/atlassian/react-beautiful-dnd/blob/master/docs/patterns/multi-drag.md

| 编号 | 姓名 |
| --- | --- |
|  | 1 |
|  | 2 |
|  | 3 |
|  | 4 |

| 编号 | 姓名 |
| --- | --- |
|  | 5 |
|  | 6 |

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, Table } from 'choerodon-ui/pro';
import { DragDropContext } from 'react-beautiful-dnd';

const { Column } = Table;

const RenderLeftTable = ({ dataSet }) => {
  return (
    <Table
      name="table"
      id="source"
      dataSet={dataSet}
      rowDraggable
      customDragDropContenxt
    >
      <Column name="userid" />
      <Column name="name" />
    </Table>
  );
};

const RenderRightTable = ({ dataSet }) => {
  return (
    <Table
      name="table"
      id="target"
      dataSet={dataSet}
      rowDraggable
      customDragDropContenxt
    >
      <Column name="userid" />
      <Column name="name" />
    </Table>
  );
};

class App extends React.Component {
  sourceDs = new DataSet({
    primaryKey: 'userid',
    data: [
```

## 排序和筛选

列配置 sortable 即开启排序，配置为函数类型则为前端排序，DataSet 配置 combineSort 开启组合排序，可进一步配置 Table 的 combineSortConfig 属性配置前端或后端排序。列配置 filter 开启列筛选，可进一步配置为函数自定义筛选逻辑。

| 编号 | 年龄 | 是否开启 | 姓名 | 性别 | 代码描述（多值） | 性别（多值） | 开始日期 | 操作 |
| --- | --- | --- | --- | --- | --- | --- | --- | --- |
|  | 0 | 63 |  | 彭霞 | 女 | HR.EMPLOYEE_GENDER | 女男 | 2020-09-01 |
|  | 1 | 84 |  | 孔秀兰 | 男 | HR.EMPLOYEE_GENDER | 女 |  |
|  | 2 | 70 |  | 孟艳 | 男 | HR.EMPLOYEE_GENDER | 女 |  |
|  | 3 | 86 |  | 邱芳 | 男 | HR.EMPLOYEE_GENDER | 女 |  |
|  | 4 | 45 |  | 叶芳 | 女 | HR.EMPLOYEE_GENDER | 女 |  |
|  | 5 | 49 |  | 雷秀兰 | 男 | HR.EMPLOYEE_GENDER | 女 |  |
|  | 6 | 51 |  | 唐静 | 男 | HR.EMPLOYEE_GENDER | 男 |  |
|  | 7 | 36 |  | 赵秀英 | 女 | HR.EMPLOYEE_GENDER | 男 |  |
|  | 8 | 64 |  | 杨军 | 男 | HR.EMPLOYEE_GENDER | 男男 |  |
|  | 9 | 57 |  | 谢秀兰 | 男 | HR.EMPLOYEE_GENDER | 女女 |  |

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import {
  DataSet,
  Table,
  Form,
  TextField,
  NumberField,
  CheckBox,
  SelectBox,
  Modal,
  Button,
} from 'choerodon-ui/pro';
import { runInAction } from 'mobx';

const { Column } = Table;

const EditButton = (props) => {
  const handleClick = (e) => {
    const { record, onClick } = props;
    onClick(record, e);
  };

  return (
    <Button
      funcType="flat"
      icon="mode_edit"
      onClick={handleClick}
      size="small"
    />
  );
};

class App extends React.Component {
  oriRecords;

  userDs = new DataSet({
    primaryKey: 'userid',
    transport: {
      read({ params: { page, pagesize } }) {
        return {
          url: `/dataset/user/page/10/1`,
        };
      },
```

## 功能总和

极其复杂的案例，通过操作了解更多 Table 功能。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import moment from 'moment';
import { action } from 'mobx';
import isNaN from 'lodash/isNaN';
import {
  DataSet,
  Table,
  TextField,
  NumberField,
  TextArea,
  DateTimePicker,
  Select,
  SelectBox,
  Modal,
  Button,
  AutoComplete,
} from 'choerodon-ui/pro';
import { configure } from 'choerodon-ui';

const { Column } = Table;
const { Option } = Select;

// 前端导出配置
configure({
  xlsx: () => import('xlsx'),
});

function sexIdRenderer({ dataSet, record }) {
  // 获取性别codeValueId
  const value = record.get('sex') || [];
  const field = dataSet.getField('sex');
  return value.map((v) => field.getLookupData(v, record).codeValueId).join(',');
}

function renderPhoneEditor(record) {
  const region = (
    <Select record={record} name="phone-region">
      <Option value="+81">+81</Option>
      <Option value="+00">+00</Option>
    </Select>
  );
  return (
    <TextField
      addonBefore={region}
      addonBeforeStyle={{
        border: 'none',
        padding: 0,
        maxWidth: '60px',
        width: '35%',
      }}
    />
  );
}
```

## API

### Table

| 属性名 | 说明 | 类型/默认值/版本 |
| --- | --- | --- |
| columns | 列组， 优先级和性能高于children | 类型ColumnProps[] |
| groups | 分组 | 类型TableGroup[]版本1.5.1 |
| header | 表头 | 类型ReactNode (records) => ReactNode |
| footer | 表脚 | 类型ReactNode (records) => ReactNode |
| border | 是否显示边框 | 类型boolean默认值globalConfig.tableBorder |
| columnEditorBorder | 是否显示编辑器边框 | 类型boolean默认值globalConfig.tableBorder版本1.4.0 |
| selectionMode | 选择记录的模式, 可选值: rowbox \| treebox \| click \| dblclick \| mousedown \| none | 类型string默认值rowbox |
| selectionBoxRenderer | 勾选框渲染器 | 类型({ record, element }) => ReactNode版本1.5.4 |
| alwaysShowRowBox | 是否一直显示 rowbox, 开启后在其他模式下也会显示 rowbox。selectionMode 为 rowbox 和 dblclick 时，勾选框常显 | 类型boolean默认值false |
| onRow | 设置行属性 | 类型({ dataSet, record, index, expandedRow }) => object |
| buttons | 功能按钮，内置按钮可添加 afterClick 钩子，用于执行除了默认行为外的动作，可选值：add \| delete \| remove \| save \| query \| reset \| expandAll \| collapseAll \| export 或 数组 或 自定义按钮，数组为可选值字符串+按钮配置属性对象 | 类型string [string, object] ReactNode object |
| buttonsLimit | 头部显示功能按钮的数量，超出限制放入更多下拉（表格按钮过多的场景） | 类型number版本1.4.5 |
| queryFields | 自定义查询字段组件或默认组件属性（支持替换或扩展查询组件属性的场景），默认会根据 queryDataSet 中定义的 field 类型自动匹配组件 | 类型ReactNode[] object |
| queryFieldsLimit | 头部显示的查询字段的数量，超出限制的查询字段放入弹出窗口 | 类型number |
| queryBar | 查询条, 可选值为钩子或者内置类型：filterBar \| professionalBar \| advancedBar \| normal \| bar \| comboBar \| none | 类型string ({ dataSet, queryDataSet, buttons, pagination, queryFields, queryFieldsLimit }) => ReactNode默认值globalConfig.queryBar |
| queryBarProps | 查询条参数，不同查询条参数配置应对应。当查询条是全局配置的自定义查询条，需要传递自定义参数时可以用此属性。 | 类型object版本1.4.1 |
| summaryBar | 汇总条, 可选值为钩子或者字段 name | 类型string ({ dataSet, summaryFieldsLimit }) => ReactNode |
| summaryBarFieldWidth | 汇总条单字段宽度 | 类型number默认值170 |
| summaryFieldsLimit | 头部显示的汇总字段的数量，超出限制的查询字段收起 | 类型number |
| useMouseBatchChoose | 是否使用鼠标批量选择,开启后在 rowbox 的情况下可以进行鼠标拖动批量选择,在起始的 rowbox 处按下,在结束位置松开 | 类型boolean默认值globalConfig.tableUseMouseBatchChoose |
| rowHeight | 行高，设置为 auto 时，若单元格中内容超长则会换行显示 | 类型number auto ({ size }) => number auto默认值globalConfig.tableRowHeight版本1.5.2(支持钩子) |
| headerRowHeight | 头行高 | 类型number auto ({ size }) => number auto默认值rowHeight版本1.5.1 |
| footerRowHeight | 脚行高 | 类型number auto ({ size }) => number auto默认值rowHeight版本1.5.1 |
| defaultRowExpanded | 默认行是否展开，当 dataSet 没有设置 expandField 时才有效 | 类型boolean默认值false |
| expandRowByClick | 通过点击行来展开子行 | 类型boolean默认值false |
| expandedRowRenderer | 展开行渲染器 | 类型({ dataSet, record }) => ReactNode |
| expandIcon | 自定义展开图标 | 类型({ prefixCls, expanded, expandable, needIndentSpaced, record, onExpand }) => ReactNode |
| expandIconColumnIndex | 展开图标所在列索引 | 类型number |
| expandIconAsCell | 展开图标是否单独单元格展示 | 类型boolean默认值true false(tree mode) |
| indentSize | 展示树形数据时，每层缩进的宽度 | 类型number默认值15 |
| filter | 数据过滤， 返回值 true - 显示 false - 不显示 | 类型(record) => boolean |
| treeFilter | 树形数据过滤, 优先级高于 filter, 返回值 true - 显示 false - 不显示 | 类型(record) => boolean版本1.5.4 |
| mode | 表格展示的模式，tree 需要配合 dataSet 的 idField 和 parentField 来展示，可选值: list \| tree | 类型string默认值list |
| editMode | 表格编辑的模式，可选值: cell \| inline | 类型string默认值cell |
| filterBarFieldName | queryBar为bar时，直接输入的过滤条件的字段名 | 类型string默认值params |
| filterBarPlaceholder | queryBar为bar时输入框的占位符 | 类型string |
| pagination | 分页器，参考配置项或pagination，设为 false 时不展示表格分页 | 类型object false |
| highLightRow | 当前行高亮, 可选值: boolean \| focus \| click, true - 始终显示高亮行, 'click' - 点击行后始终显示高亮行， 'focus' - 表格获焦时显示高亮行 | 类型boolean string默认值globalConfig.tableHighLightRow |
| selectedHighLightRow | 勾选行高亮 | 类型boolean默认值globalConfig.tableSelectedHighLightRow |
| columnResizable | 可调整列宽, 可以传入 xZoom 矫正横向缩放引起的计算误差 | 类型boolean xZoom: number }默认值globalConfig.tableColumnResizable |
| columnHideable | 可调整列显示, customizable 为 true 才起作用 | 类型boolean默认值globalConfig.tableColumnHideable版本1.2.0 |
| columnTitleEditable | 可编辑列标题, customizable 为 true 才起作用 | 类型boolean默认值globalConfig.tableColumnTitleEditable版本1.2.0 |
| columnDraggable | 列拖拽, customizable 为 true 才起作用 | 类型boolean默认值globalConfig.tableColumnDraggable版本1.2.0 |
| rowDraggable | 行拖拽，实现行的拖拽；multiDrag 支持多行拖拽选中记录(树形不支持多拖) | 类型boolean 'multiDrag'默认值globalConfig.tableRowDraggable版本1.2.0 |
| multiDragSelectMode | 多行拖拽时，多选记录的方式: keyboard: ctrl + 点击; checkbox: 使用表格勾选框勾选 | 类型'keyboard' 'checkbox'默认值'keyboard'版本1.6.6 |
| dragColumnAlign | 增加一个可拖拽列，实现行拖拽 | 类型left\|right |
| pristine | 显示原始值（DS 修改内容后，保持表格显示值不变） | 类型boolean默认值false |
| onExpand | 点击展开图标时触发 | 类型(expanded, record) => void |
| virtual | 是否开启虚拟滚动，当设置表格高度时有效 | 类型boolean默认值globalConfig.tableVirtual |
| virtualCell | 虚拟单元格 | 类型boolean默认值globalConfig.tableVirtualCell版本1.3.0 |
| columnBuffer | 列的缓冲区。开启虚拟滚动后，在可见区域之前/之后要呈现的额外列数。且 columnBuffer 的值大于或等于 columnThreshold 的值 | 类型number默认值globalConfig.tableVirtualBuffer版本1.6.2 |
| columnThreshold | 列的阈值。开启虚拟滚动后，在呈现新列之前可见的列数。且 columnThreshold 的值小于或等于 columnBuffer 的值 | 类型number默认值globalConfig.tableVirtualBuffer版本1.6.2 |
| virtualSpin | 是否开启虚拟滚动 Spin | 类型boolean默认值false |
| autoWidth | 是否开启宽度自适应， 功能同 width: 'min-content' | 类型boolean默认值false版本1.4.5 |
| autoHeight | 是否开启高度自适应 | 类型boolean type: 'minHeight' 'maxHeight', diff: number(80) }默认值false |
| autoFootHeight | 是否开启是否单独处理 column footer | 类型boolean默认值false |
| autoFocus | 是否新增行自动获焦至第一个可编辑字段 | 类型boolean默认值false |
| editorNextKeyEnterDown | 是否开启回车跳转下一行编辑 | 类型boolean默认值true |
| onDragEnd | 完成拖拽后的触发事件 | 类型(dataSet, columns, resultDrag, provided) => void |
| columnsDragRender | 控制列的拖拽渲染 | 类型请查看DragRender配置项 |
| rowDragRender | 控制行的拖拽渲染 | 类型请查看DragRender配置项 |
| onDragEndBefore | 完成拖拽后,切换位置之前的触发事件，可以通过 resultDrag.destination.droppableId === 'table' or ‘tableHeader’ 来判断是行拖拽还是列拖拽,返回false阻止拖拽换位置。树形拖拽可通过 recordIndexFromTo 获取到正确的记录索引: [sourceRecordIndex, destinationRecordIndex] | 类型(dataSet, columns, resultDrag, provided, recordIndexFromTo: [number?, number?]) => false void \|resultDrag |
| keyboard | 开启关闭新增的快捷按钮事件 | 类型boolean默认值globalConfig.tableKeyboard |
| treeLoadData | 树形异步加载数据 | 类型({ record, dataSet }) => Promise版本1.1.0 |
| treeAsync | 树形异步加载，需要后端接口配合，对应的数据源会自动调用查询接口，接口参数中会带有 parentField 对应的参数名和 idField 对应的参数值，接口返回的数据会附加到已有的数据之中 | 类型((props: {record?: Record null;dataSet?: DataSet null;}) => TreeNodeRendererProps )默认值() {}版本1.1.0 |
| parityRow | 奇偶行 | 类型boolean默认值globalConfig.tableParityRow版本1.1.0 |
| rowNumber | 显示行号 | 类型boolean ({ record, dataSet, text, pathNumbers }) => ReactNode版本1.1.0 |
| clientExportQuantity | 导出一次轮询数量 | 类型number默认值100版本1.3.0 |
| showSelectionTips | 是否显示选中记录提示 | 类型boolean默认值globalConfig.tableShowSelectionTips版本1.3.0 |
| showCachedTips | 是否显示缓存记录提示， 优先级高于 showSelectionTips | 类型boolean默认值globalConfig.tableShowCachedTipsTips版本1.5.6 |
| showCachedSelection | 是否显示缓存选中记录 | 类型boolean版本1.4.4 |
| onShowCachedSelectionChange | 缓存选中记录显示回调 | 类型(boolean) => void版本1.4.4 |
| showSelectionCachedButton | 是否显示缓存选中记录按钮 | 类型boolean默认值true版本1.4.1 |
| showAllPageSelectionButton | 是否显示切换跨页全选按钮 | 类型boolean版本1.4.0 |
| customizable | 是否显示个性化设置入口按钮 | 类型boolean默认值globalConfig.customizable版本1.3.0 |
| customizedCode | 个性化编码，设置后默认将会存储列拖拽等个性化设置更改到 localStorage，如果要存储到后端, 请重写全局配置中的表格个性化钩子： customizedSave \| customizedLoad | 类型string版本1.2.0 |
| onCustomizedLoad | 表格个性化接口请求回调函数 | 类型(TableCustomized) => Promise版本1.6.3 |
| treeQueryExpanded | 树形结构下queryBar触发查询,自动展开树形结构 | 类型boolean版本1.3.1 |
| aggregation | 是否是聚合视图， 若有个性化则以个性化配置为主 | 类型boolean版本1.4.0 |
| onAggregationChange | 聚合视图变更钩子， 在个性化配置变更时触发 | 类型(aggregation) => void版本1.4.0 |
| cellHighlightRenderer | 单元格高亮渲染器 | 类型({ title, content, dataSet, record, name, className, style }, element) => ReactNode版本1.4.0 |
| showHeader | 是否显示表头 | 类型boolean默认值true版本1.4.2 |
| showRemovedRow | 是否显示临时移除的行，默认置灰显示 | 类型boolean默认值true版本1.4.4 |
| onColumnResize | 列宽改变的回调事件 | 类型({ column, width, index }) => void版本1.4.4 |
| searchCode | 动态筛选条后端接口唯一编码 | 类型string版本1.4.5 |
| rowBoxPlacement | 行选择框位置 | 类型可选值: start, end number默认值start版本1.4.5 |
| dragDropContextProps | react-beautiful-dnd DragDropContextProps | 类型DragDropContextProps版本1.5.1 |
| heightChangeable | 高度设置, customizable 为 true 才起作用 | 类型boolean默认值globalConfig.tableHeightChangeable版本1.5.1 |
| bodyExpandable | 表格体是否可展开 | 类型boolean版本1.5.1 |
| defaultBodyExpanded | 默认表格体是否展开 | 类型boolean默认值true版本1.5.1 |
| bodyExpanded | 表格体是否展开 | 类型boolean默认值true版本1.5.1 |
| onBodyExpand | 点击表格体展开图标时触发 | 类型(expanded) => void版本1.5.1 |
| onScrollTop | 纵向滚动事件(getScrollInfo - 1.5.6) | 类型(scrollTop, getScrollInfo) => void版本1.5.1 |
| onScrollLeft | 横向滚动事件(getScrollInfo - 1.5.6) | 类型(scrollLeft, getScrollInfo) => void版本1.5.1 |
| renderEmpty | 自定义渲染数据为空的状态 | 类型() => ReactNode版本1.5.2 |
| autoValidationLocate | 校验失败自动定位。如果多个组件的定位有冲突， 可以关闭自动定位， 通过手动调用 focus 方法来定位 | 类型boolean默认值true版本1.5.3 |
| boxSizing | 样式高度影响的范围，默认 content， 如果指定为 wrapper, 样式的高度会包括表格前后内容的高度， 且该高度发生变化会自动调整表格高度 | 类型'content' 'wrapper'默认值'content'版本1.5.6 |
| fullColumnWidth | 所有列都设置列宽且没有超出表格宽度时最后一列宽度是否自动填满表格 | 类型boolean默认值true版本1.5.6 |
| clipboard | 配置 Table 是否可复制粘贴，仅支持普通列表下使用，数据分组、虚拟滚动等特殊场景暂不支持。参考配置项 | 类型Clipboard默认值{ copy: false, paste: false }版本1.6.4 |
| customDragDropContenxt | 是否开启自定义 DragDropContenxt, 一般用于自定义 react-beautiful-dnd 的 DragDropContenxt 实现多表拖拽 | 类型boolean默认值false版本1.6.4 |
| selectionColumnProps | 行选择列属性扩展 | 类型ColumnProps版本1.6.4 |
| rowNumberColumnProps | 行号列属性 | 类型ColumnProps ((defaultProps: ColumnProps) => ColumnProps)版本1.6.5 |
| tableFilterBarButtonIcon | Table 动态筛选条按钮是否展示icon。true 展示默认icon，false不展示，对象类型可以分别设置具体icon | 类型boolean saveIconType?: string boolean; saveAsIconType?: resetIconType?: }版本1.6.6 |
| combineColumnFilter | 是否开启前端组合过滤 | 类型boolean默认值true版本1.6.6 |
| combineSortConfig | 组合排序配置, 默认开启前端、后端排序, 显示排序选项; 内置了前端组合排序函数, 如有复杂字段排序请自行实现排序函数。currentDataSort: 当前页排序(前端排序); allDataSort: 所有页排序(后端排序); showSortOption: 是否显示排序选项 | 类型{ currentDataSort?: boolean ((props: dataSet: DataSet, sortInfo: Map<string, SortOrder> }) => void); allDataSort?: boolean; showSortOption?: SortRangeOption; }版本1.6.6 |

更多属性请参考DataSetComponent。

### Table.Column

| 属性名 | 说明 | 类型/默认值/版本 |
| --- | --- | --- |
| children | 子列组， JSX模式下请对应 ReactElement[] | 类型ColumnProps[] ReactElement[]版本1.5.1 |
| name | 列对照的字段名 | 类型string |
| width | 列宽，不推荐给所有列设置宽度，而是给某一列不设置宽度达到自动宽度的效果 | 类型number |
| defaultWidth | 列的默认宽度 | 类型number默认值globalConfig.tableColumnDefaultWidth\|globalConfig.tableAggregationColumnDefaultWidth版本1.5.1 |
| minWidth | 最小列宽 | 类型number默认值globalConfig.tableColumnDefaultMinWidth\|globalConfig.tableAggregationColumnDefaultMinWidth |
| title | 列头文字，优先级高于 header， 便于列头文字通过 header 钩子渲染的情况下可编辑 | 类型string |
| header | 列头 | 类型ReactNode ({ dataSet, name, title, aggregation, group:Group, aggregationTree: ReactElement[] }) => ReactNode |
| footer | 列脚 | 类型ReactNode ({ dataSet, name, aggregationTree: ReactElement[] }) => ReactNode |
| renderer | 单元格渲染回调 | 类型({ value, text, name, record, dataSet, rowGroup:Group, headerGroup:Group, aggregationTree: ReactElement[] }) => ReactNode |
| tagRenderer | 多值 Tag 渲染器 | 类型({ value, text, key, readOnly, invalid, disabled, onClose, className }: TagRendererProps) => ReactNode版本1.6.2 |
| editor | 编辑器, 设为 true 时会根据 field 的 type 自动匹配编辑器。不可编辑请使用 false 值，而不是在控件上加 disabled。如果有对输入框组件二次封装的需求，需要使用 React.forwardRef 转发 ref。 | 类型FormField ((record, name) => FormField boolean) boolean |
| lock | 是否锁定列（固定列）， 可选值 false \| true \| 'left' \| 'right' | 类型boolean\| string默认值false |
| align | 文字对齐方式，可选值： left \| center \| right | 类型string默认值globalConfig.tableColumnAlign |
| resizable | 是否可调整列宽度 | 类型boolean默认值globalConfig.tableColumnResizable |
| sortable | 是否可排序，前端排序(1.6.0)请定义CompareFn: (v1, v2, order) => number | 类型boolean CompareFn默认值false |
| filter | 是否可前端过滤 | 类型boolean ((props: record: Record, filterText?: string }) => boolean)默认值false版本1.6.0 |
| filterPopover | 前端过滤自定义筛选，此函数只负责渲染图层，需要自行编写各种交互 | 类型ReactNode ((props: FilterPopoverProps) => ReactNode)版本1.6.0 |
| hideable | 是否可隐藏 | 类型boolean默认值globalConfig.tableColumnHideable |
| titleEditable | 是否可编辑标题 | 类型boolean默认值globalConfig.tableColumnTitleEditable版本1.2.0 |
| style | 列单元格内链样式 | 类型object |
| className | 列单元格样式名 | 类型string |
| headerStyle | 列头内链样式 | 类型object |
| headerClassName | 列头样式名 | 类型string |
| footerStyle | 列脚内链样式 | 类型object |
| footerClassName | 列脚样式名 | 类型string |
| help | 额外信息，常用于提示 | 类型ReactNode |
| showHelp | 展示提示信息的方式。可选值 tooltip \| newLine \| none | 类型string默认值tooltip |
| onCell | 设置单元格属性 | 类型({ dataSet, record, column }) => object默认值globalConfig.tableColumnOnCell |
| command | 行操作按钮集（操作列），该值为数组 或 返回数组的钩子，内置按钮可添加 afterClick 钩子，用于执行除了默认行为外的动作，数组可选值：edit \| delete 或 [edit\| delete , 按钮配置属性对象] 或 自定义按钮 | 类型(string [string, object] ReactNode)[] ({ dataSet, record, aggregation }) => (string ReactNode object )[] |
| hidden | 隐藏列 | 类型boolean |
| tooltip | 用 Tooltip 显示单元格内容。可选值 none \| always \| overflow | 类型string默认值globalConfig.tooltip |
| tooltipProps | 用于配置 Tooltip 相关参数 | 类型TooltipProps版本1.5.6 |
| aggregation | 是否是聚合列， 平铺视图下不显示 | 类型boolean |
| aggregationLimit | 聚合显示条目数量上限，超过限制的条目可通过展开按钮来显示 | 类型number默认值4 |
| aggregationDefaultExpandedKeys | 默认展开指定的聚合列下的树节点 | 类型(string number)[] |
| aggregationDefaultExpandAll | 默认展开所有聚合列下的树节点 | 类型boolean |
| aggregationTreeIndex | 聚合单元格中的列索引 | 类型number默认值0版本1.5.2 |
| hiddenInAggregation | 在聚合列下是否隐藏 | 类型boolean (record) => boolean |
| highlightRenderer | 单元格高亮渲染器 | 类型({ title, content, dataSet, record, name, className, style }, element) => ReactNode |
| aggregationLimitDefaultExpanded | 聚合超过限制的条目默认是否展开显示 | 类型boolean (record) => boolean版本1.5.1 |
| sortableCallback | 排序结束的回调函数 | 类型(props: dataSet: DataSet, field: Field, order?: string }) => void版本1.6.6 |

### TableGroup

1.5.1 版本新增方法。

| 属性名 | 说明 | 类型/默认值 |
| --- | --- | --- |
| type | 分组类型， 可选值 column \| row \| header \| none | 类型string默认值none |
| name | 分组对照的字段名 | 类型string |
| parentField | 树形分组对照的父字段名 | 类型string |
| hidden | 隐藏组, 只适用于类型为 header 的分组 | 类型boolean |
| columnProps | 列属性 | 类型ColumnProps |

### Table.FilterBar

| 属性名 | 说明 | 类型/默认值 |
| --- | --- | --- |
| paramName | 输入的过滤条件的字段名 | 类型string默认值params |
| placeholder | 输入框的占位符 | 类型string默认值过滤表 |
| queryBarProps.editorProps(1.6.4) | 扩展弹出编辑器属性 | 类型(props: name: string, record?: Record, editor: ReactElement}) => object; |

更多属性请参考TablequeryBar属性的钩子参数。

### Table.AdvancedQueryBar

| 属性名 | 说明 | 类型/默认值 |
| --- | --- | --- |
| queryFieldsLimit | 头部显示的查询字段的数量，超出限制的查询字段放入弹出窗口 | 类型number默认值1 |

更多属性请参考TablequeryBar属性的钩子参数。

### Table.ToolBar

| 属性名 | 说明 | 类型/默认值 |
| --- | --- | --- |
| queryFieldsLimit | 头部显示的查询字段的数量，超出限制的查询字段放入弹出窗口 | 类型number默认值1 |
| pagination | 分页器，参考pagination | 类型PaginationComponent |

更多属性请参考TablequeryBar属性的钩子参数。

### Table.DynamicFilterBar

| 属性名 | 说明 | 类型/默认值/版本 |
| --- | --- | --- |
| queryFieldsLimit | 头部显示的查询字段的数量，超出限制的查询字段放入弹出窗口 | 类型number默认值3 |
| autoQueryAfterReset | 重置后自动查询 | 类型boolean默认值true版本1.4.4 |
| dynamicFilterBar | 筛选条属性配置 | 类型DynamicFilterBarConfig版本1.4.5 |
| fuzzyQuery | 是否开启模糊查询 | 类型boolean默认值true版本1.4.5 |
| fuzzyQueryOnly | 是否仅使用模糊查询 | 类型boolean默认值false版本1.5.1 |
| fuzzyQueryPlaceholder | 模糊查询 placeholder | 类型string版本1.4.5 |
| fuzzyQueryProps | 模糊查询输入框属性 | 类型TextFieldProps版本1.6.6 |
| filterQueryCallback | 筛选接口查询回调 | 类型({ dataSet })=> void版本1.6.6 |
| autoQuery | 条件变更是否自动查询 | 类型boolean默认值true版本1.4.5 |
| refreshBtn | 刷新按钮 | 类型boolean默认值true版本1.5.1 |
| onQuery | 查询回调 | 类型() => void版本1.4.5 |
| onReset | 重置回调 | 类型() => void版本1.4.5 |
| onRefresh | 刷新按钮回调，返回false \| Promise.resolve(false)或Promise.reject()不会刷新查询， 其他自动查询 | 类型() => Promise<boolean>版本1.5.7 |
| onFieldEnterDown | 字段回车回调 | 类型() => void版本1.6.4 |
| showSingleLine | 筛选条是否单行显示 | 类型boolean版本1.6.5 |
| tableFilterBarButtonIcon | Table 动态筛选条按钮是否展示icon。true 展示默认icon，false不展示，对象类型可以分别设置具体icon | 类型boolean saveIconType?: string boolean; saveAsIconType?: resetIconType?: }版本1.6.6 |

#### DynamicFilterBarConfig

| 属性名 | 说明 | 类型/默认值 |
| --- | --- | --- |
| searchText | 模糊查询参数名，参数值可通过 dataSet.getState('__SEARCHTEXT__') 获取 | 类型string默认值params |
| suffixes | 过滤条后缀渲染区 | 类型React.ReactElement[]，数组元素支持 'filter' |
| prefixes | 过滤条前缀渲染区 | 类型React.ReactElement[]，数组元素支持 'filter' |
| tableFilterAdapter | 过滤条请求适配器 | 类型TransportProps |

更多属性请参考TablequeryBar属性的钩子参数。

### Table.ProfessionalBar

| 属性名 | 说明 | 类型/默认值/版本 |
| --- | --- | --- |
| queryFieldsLimit | 头部显示的查询字段的数量，超出限制的查询字段放入弹出窗口 | 类型number默认值3 |
| autoQueryAfterReset | 重置后自动查询 | 类型boolean默认值true版本1.4.4 |
| defaultExpanded | 默认展开 | 类型boolean默认值false版本1.3.1 |
| formProps | 查询条表单属性 | 类型FormProps默认值{ labelTooltip: 'overflow', labelWidth: 80 }版本1.4.4 |
| onQuery | 查询回调 | 类型() => void |
| onReset | 重置回调 | 类型() => void |

更多属性请参考TablequeryBar属性的钩子参数。

### pagination

分页的配置项。

| 属性名 | 说明 | 类型/默认值 |
| --- | --- | --- |
| position | 指定分页显示的位置 | 类型top bottom both默认值bottom |

### dragRender

可以满足自定义更多的渲染需求，注意会覆盖默认值，建议阅读中文地址react-beautiful-dnd以及当前代码示例。
控制 renderClone 拖拽起来的时候会在 body 下面新增加一个 table 会在这个 table 注入元素比如下面的示例可以实现在类名为 c7n-pro-table-drag-container 的 table 里面渲染对应的元素，这里你可以增加样式覆盖完成你想要的拖拽样式，由于拖拽使用的 Fixed 定位所以会导致 table 长度变化，可以根据业务修改合适的 columns 的宽度来让表现更加自然。renderIcon 来渲染拖拽的自定义 Icon。
在 1.5.7 版本扩展 draggableProps.isDragDisabled 属性支持回调函数：(record?: Record) => boolean，可以更灵活地对每一行进行拖拽控制。

可以注意一下设置
新增拖拽例的key值 DRAG_KEY = 'drag-column';
防止拖拽在dom结构外报错的table 类名 c7n-pro-table-drag-container

| 属性名 | 说明 | 类型 |
| --- | --- | --- |
| droppableProps | droppableProps 参考文档 | 类型object |
| draggableProps | DraggableProps 参考文档 | 类型object |
| renderClone | 拖拽起来的时候会在 body 下面新增加一个 table 会在这个 table 注入元素 | 类型(DragTableRowProps DragTableHeaderCellProps) => ReactElement |
| renderIcon | 可以自定义图标 | 类型当为 row 时候（{record}）=> ReactElement为column 时候 （{column，dataSet, snapshot}）=> ReactElement |

### spin

spin 的配置项。

| 属性名 | 说明 | 类型 |
| --- | --- | --- |
| indicator | 加载指示符 | 类型ReactElement |
| spinning | 是否旋转 | 类型boolean |

更多案列和属性请参考Spin。

### instance methods

| 名称 | 说明 | 属性名/返回值类型/版本 |
| --- | --- | --- |
| setScrollLeft(scrollLeft) | 设置横向滚动值。 | 属性名scrollLeft- 横向滚动值版本1.5.1 |
| setScrollTop(scrollTop) | 设置纵向滚动值。 | 属性名scrollTop- 纵向滚动值版本1.5.1 |
| setColumnWidth(width, indexOrKeyOrName, saveToCustomization) | 设置列宽。 | 属性名width- 宽度indexOrKeyOrName- 索引或key或namesaveToCustomization(1.5.6) 是否保存到个性化，默认true版本1.5.2 |
| getHeaderGroups() | 获取所有头分组 | 返回值类型Group[]版本1.5.6 |
| getGroups() | 获取所有列分组 | 返回值类型Group[]版本1.5.6 |

### 分页配置

分页功能配置可以按照如下配置进行全局配置

```js
import { configure } from 'choerodon-ui';

configure({
  pagination: { pageSizeOptions: ['10', '20', '50', '100', '1000'] },
});
```

全局配置操作，建议在初始化的时候进行。更多的配置参考pagination;

### clipboard

剪贴板配置项

| 名称 | 说明 | 参数/返回值类型/版本 |
| --- | --- | --- |
| copy | 是否开启表格复制 | 参数boolean返回值类型false版本- |
| paste | 是否开启表格粘贴，开启后只有可编辑的单元格才能被粘贴数据。 | 参数boolean返回值类型false版本- |
| description | 开启表格复制或粘贴，自定义修改描述信息 | 参数string ReactNode返回值类型- |
| arrangeCalc | 开启范围计数 | 参数boolean ReactNode返回值类型false版本1.6.5 |
| hiddenTip | 关闭提示 | 参数boolean返回值类型false版本1.6.5 |

### 导出配置

可以根据需求进行全局配置，和局部配置

```js
import { configure } from 'choerodon-ui';
import { DataSet } from 'choerodon-ui/pro';

// 全局配置

const basicUrl = ``;

configure({
  transport: {
    exports: ({ dataSet, name: fieldName }) => {
      const _token = dataSet.current.get('_token');
      return {
        url: `${basicUrl}/v1/export`,
        method: 'POST',
        params: { _token, fieldName },
        transformResponse: (res) => {
          try {
            const aLink = document.createElement('a');
            const blob = new Blob([res.data], {
              type: 'application/vnd.ms-excel',
            });
            aLink.href = URL.createObjectURL(blob);
            aLink.download = fieldName;
            aLink.click();
            document.body.appendChild(aLink);
          } catch (e) {
            // do nothing, use default error deal
          }
        },
      };
    },
  },
});

// 局部使用
// eslint-disable-next-line no-unused-vars
const tableDs = new DataSet({
  primaryKey: 'userid',
  name: 'user',
  autoQuery: true,
  pageSize: 5,
  cacheSelection: true,
  transport: {
    exports: ({ dataSet }) => {
      const fileId = dataSet.name;
      return {
        url: `/_api/table/${fileId}`,
        method: 'get',
      };
    },
  },
});
```

### 新增快捷键

keyboard 控制是否开启

- Alt + n，焦点在 table 单元格内（非 querybar 区）时，新增行（代码可配置是首行还是末行新建）
- Ctrl + s，焦点在table单元格，则保存当前 table
- Ctrl + d（或 Command + d）：
- 焦点在 table 单元格，则复制上一行的单元格内容
- 焦点在 table 某行， 则复制上一行的所有单元格内容
- Delete，当前焦点元素内时，删除 1 个字符
- Alt + delete，焦点在 table 单元格内，删除当前行，弹出二次提示框
- Shift + 方向键，焦点在 table 某行，当前 table 可多选的情况，可选择多行

局部的使用 demo 方法参见Table;



================================================================================
文件: Tabs.md
路径: doc\Tabs.md
================================================================================

# Tabs 标签页

选项卡切换组件。

- 个性化，控制页签顺序、重命名等
- 关联数据源，校验提示及定位
- 分组，分组展示不同类 Tabs

## 何时使用

提供平级的区域将大块内容进行收纳和展现，保持界面整洁。

Choerodon UI 依次提供了三级选项卡，分别用于不同的场景。

- 卡片式的页签，提供可关闭的样式，常用于容器顶部。
- 标准线条式页签，用于容器内部的主功能切换，这是最常用的 Tabs。
- RadioButton可作为更次级的页签来使用。

## 代码演示

## 基本

默认选中第一项。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Tabs } from 'choerodon-ui';

const TabPane = Tabs.TabPane;

function callback(key) {
  console.log(key);
}

ReactDOM.render(
  <Tabs defaultActiveKey="1" onChange={callback}>
    <TabPane tab="Tab 1" key="1">
      Content of Tab Pane 1
    </TabPane>
    <TabPane tab="Tab 2" key="2">
      Content of Tab Pane 2
    </TabPane>
    <TabPane tab="Tab 3" key="3">
      Content of Tab Pane 3
    </TabPane>
  </Tabs>,
  document.getElementById('container'),
);
```

## 禁用

禁用某一项。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Tabs } from 'choerodon-ui';

const TabPane = Tabs.TabPane;

ReactDOM.render(
  <Tabs defaultActiveKey="1">
    <TabPane tab="Tab 1" key="1">
      Tab 1
    </TabPane>
    <TabPane tab="Tab 2" disabled key="2">
      Tab 2
    </TabPane>
    <TabPane tab="Tab 3" key="3">
      Tab 3
    </TabPane>
  </Tabs>,
  document.getElementById('container'),
);
```

## 图标

有图标的标签。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Tabs, Icon } from 'choerodon-ui';

const TabPane = Tabs.TabPane;

ReactDOM.render(
  <Tabs defaultActiveKey="2">
    <TabPane
      tab={
        <span>
          <Icon type="apple" />
          Tab 1
        </span>
      }
      key="1"
    >
      Tab 1
    </TabPane>
    <TabPane
      tab={
        <span>
          <Icon type="android" />
          Tab 2
        </span>
      }
      key="2"
    >
      Tab 2
    </TabPane>
```

## 滑动

可以左右、上下滑动，容纳更多标签。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Tabs, Radio } from 'choerodon-ui';

const TabPane = Tabs.TabPane;

class SlidingTabsDemo extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      mode: 'top',
    };
  }

  handleModeChange = e => {
    const mode = e.target.value;
    this.setState({ mode });
  };

  render() {
    const { mode } = this.state;
    return (
      <div>
        <Radio.Group onChange={this.handleModeChange} value={mode} style={{ marginBottom: 8 }}>
          <Radio.Button value="top">Horizontal</Radio.Button>
          <Radio.Button value="left">Vertical</Radio.Button>
        </Radio.Group>
        <Tabs defaultActiveKey="1" tabPosition={mode} style={{ height: 220 }}>
          <TabPane tab="Tab 1" key="1">
            Content of tab 1
          </TabPane>
          <TabPane tab="Tab 2" key="2">
            Content of tab 2
          </TabPane>
          <TabPane tab="Tab 3" key="3">
            Content of tab 3
          </TabPane>
          <TabPane tab="Tab 4" key="4">
            Content of tab 4
```

## 附加内容

可以在页签右边添加附加操作。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Tabs, Button } from 'choerodon-ui';

const TabPane = Tabs.TabPane;

const operations = <Button>Extra Action</Button>;

ReactDOM.render(
  <Tabs tabBarExtraContent={operations}>
    <TabPane tab="Tab 1" key="1">
      Content of tab 1
    </TabPane>
    <TabPane tab="Tab 2" key="2">
      Content of tab 2
    </TabPane>
    <TabPane tab="Tab 3" key="3">
      Content of tab 3
    </TabPane>
  </Tabs>,
  document.getElementById('container'),
);
```

## 大小

大号页签用在页头区域，小号用在弹出框等较狭窄的容器内。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Tabs, Radio } from 'choerodon-ui';

const { TabPane } = Tabs;

class Demo extends React.Component {
  state = { size: 'small' };

  onChange = e => {
    this.setState({ size: e.target.value });
  };

  render() {
    const { size } = this.state;
    return (
      <div>
        <Radio.Group value={size} onChange={this.onChange} style={{ marginBottom: 16 }}>
          <Radio.Button value="small">Small</Radio.Button>
          <Radio.Button value="default">Default</Radio.Button>
          <Radio.Button value="large">Large</Radio.Button>
        </Radio.Group>
        <Tabs defaultActiveKey="1" size={size}>
          <TabPane tab="Tab 1" key="1">
            Content of tab 1
          </TabPane>
          <TabPane tab="Tab 2" key="2">
            Content of tab 2
          </TabPane>
          <TabPane tab="Tab 3" key="3">
            Content of tab 3
          </TabPane>
```

## 位置

有四个位置，tabPosition="left|right|top|bottom"。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Tabs, Select } from 'choerodon-ui';

const TabPane = Tabs.TabPane;
const Option = Select.Option;

class Demo extends React.Component {
  state = {
    tabPosition: 'top',
  };

  changeTabPosition = tabPosition => {
    this.setState({ tabPosition });
  };

  render() {
    return (
      <div>
        <div style={{ marginBottom: 16 }}>
          Tab position：
          <Select
            value={this.state.tabPosition}
            onChange={this.changeTabPosition}
            dropdownMatchSelectWidth={false}
          >
            <Option value="top">top</Option>
            <Option value="bottom">bottom</Option>
            <Option value="left">left</Option>
            <Option value="right">right</Option>
          </Select>
        </div>
        <Tabs tabPosition={this.state.tabPosition}>
          <TabPane tab="Tab 1" key="1">
            Content of Tab 1
          </TabPane>
```

## 卡片式页签

另一种样式的页签，不提供对应的垂直样式。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Tabs } from 'choerodon-ui';

const TabPane = Tabs.TabPane;

function callback(key) {
  console.log(key);
}

ReactDOM.render(
  <Tabs onChange={callback} type="card">
    <TabPane tab="Tab 1" key="1">
      Content of Tab Pane 1
    </TabPane>
    <TabPane tab="Tab 2" key="2">
      Content of Tab Pane 2
    </TabPane>
    <TabPane tab="Tab 3" key="3">
      Content of Tab Pane 3
    </TabPane>
  </Tabs>,
  document.getElementById('container'),
);
```

## 新增和关闭页签

只有卡片样式的页签支持新增和关闭选项。使用closable={false}禁止关闭。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Tabs } from 'choerodon-ui';

const TabPane = Tabs.TabPane;

class Demo extends React.Component {
  constructor(props) {
    super(props);
    this.newTabIndex = 0;
    const panes = [
      { title: 'Tab 1', content: 'Content of Tab 1', key: '1' },
      { title: 'Tab 2', content: 'Content of Tab 2', key: '2' },
      { title: 'Tab 3', content: 'Content of Tab 3', key: '3', closable: false },
    ];
    this.state = {
      activeKey: panes[0].key,
      panes,
    };
  }

  onChange = activeKey => {
    this.setState({ activeKey });
  };

  onEdit = (targetKey, action) => {
    this[action](targetKey);
  };

  add = () => {
```

## 卡片式页签容器

用于容器顶部，需要一点额外的样式覆盖。

Content of Tab Pane 1

Content of Tab Pane 1

Content of Tab Pane 1

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Tabs } from 'choerodon-ui';

const TabPane = Tabs.TabPane;

ReactDOM.render(
  <div className="card-container">
    <Tabs type="card">
      <TabPane tab="Tab Title 1" key="1">
        <p>Content of Tab Pane 1</p>
        <p>Content of Tab Pane 1</p>
        <p>Content of Tab Pane 1</p>
      </TabPane>
      <TabPane tab="Tab Title 2" key="2">
        <p>Content of Tab Pane 2</p>
        <p>Content of Tab Pane 2</p>
        <p>Content of Tab Pane 2</p>
      </TabPane>
      <TabPane tab="Tab Title 3" key="3">
        <p>Content of Tab Pane 3</p>
        <p>Content of Tab Pane 3</p>
        <p>Content of Tab Pane 3</p>
      </TabPane>
    </Tabs>
  </div>,
  document.getElementById('container'),
);
```

## 自定义新增页签触发器

隐藏默认的页签增加图标，给自定义触发器绑定事件。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Tabs, Button } from 'choerodon-ui';

const TabPane = Tabs.TabPane;

class Demo extends React.Component {
  constructor(props) {
    super(props);
    this.newTabIndex = 0;
    const panes = [
      { title: 'Tab 1', content: 'Content of Tab Pane 1', key: '1' },
      { title: 'Tab 2', content: 'Content of Tab Pane 2', key: '2' },
    ];
    this.state = {
      activeKey: panes[0].key,
      panes,
    };
  }

  onChange = activeKey => {
    this.setState({ activeKey });
  };

  onEdit = (targetKey, action) => {
    this[action](targetKey);
  };

  add = () => {
    const panes = this.state.panes;
```

## 分组

分组展示不同类 Tabs。

- Group 1
- Group 2

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Tabs, Radio } from 'choerodon-ui';

const { TabPane, TabGroup } = Tabs;

function callback(key) {
  console.log(key);
}

const App = () => {
  const [mode, setMode] = React.useState('top');
  const handleChange = React.useCallback((e) => setMode(e.target.value), []);
  return (
    <>
      <Radio.Group
        onChange={handleChange}
        value={mode}
        style={{ marginBottom: 8 }}
      >
        <Radio.Button value="top">Horizontal</Radio.Button>
        <Radio.Button value="left">Vertical</Radio.Button>
      </Radio.Group>
      <Tabs
        keyboard={false}
        defaultActiveKey="1"
        onChange={callback}
        tabPosition={mode}
        customizable
        customizedCode="customized-group"
      >
        <TabGroup tab="Group 1" key="group-1" defaultActiveKey="2">
          <TabPane tab="Tab A" key="1" count={117}>
            Content of Tab Pane 1
          </TabPane>
```

## 个性化

支持对 Tabs 的各项属性进行配置并个性化存储。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Tabs } from 'choerodon-ui';

const { TabPane } = Tabs;

function callback(key) {
  console.log(key);
}

const App = () => {
  const tabARender = React.useCallback(
    (title) => <span style={{ color: 'red' }}>{title}</span>,
    [],
  );
  const [activeKey, setActiveKey] = React.useState('1');
  const handleChange = React.useCallback((key) => {
    setActiveKey(key);
    callback(key);
  }, []);
  return (
    <Tabs
      keyboard={false}
      activeKey={activeKey}
      onChange={handleChange}
      customizable
      customizedCode="customized"
    >
      <TabPane tab={tabARender} title="Tab A" key="1" count={117}>
        Content of Tab Pane 1
```

## 绑定数据源

页签结合数据源，控制是否可切换。

- Group 1
- Group 2

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { observer } from 'mobx-react-lite';
import { Tabs } from 'choerodon-ui';
import { useDataSet, Button, Form, TextField } from 'choerodon-ui/pro';

const { TabPane } = Tabs;
const { TabGroup } = Tabs;

const App = observer(() => {
  const ds = useDataSet(
    () => ({
      autoCreate: true,
      fields: [{ name: 'name', required: true, label: '姓名' }],
      events: {
        validate: async ({ dataSet, result }) => {
          dataSet.setState('disabled', !(await result));
        },
      },
    }),
    [],
  );
  return (
    <>
      <Button onClick={() => ds.validate()}>validate</Button>
      <Tabs>
        <TabGroup tab="Group 1">
          <TabPane tab="Auto expand by dataSet" key="1" dataSet={ds}>
            <Form dataSet={ds}>
              <TextField name="name" />
            </Form>
          </TabPane>
          <TabPane
            tab="Auto expand by context but need forceRender"
            key="2"
            disabled={ds.getState('disabled')}
```

## 柔性布局

当为整个Tabs设置固定高度或者使用flex=1撑满整个外部容器时，内部标签头部能固定而内容柔性并出现滚动条。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Tabs, Select } from 'choerodon-ui';

const { TabPane } = Tabs;
const { Option } = Select;

function callback(key) {
  console.log(key);
}

const App = () => {
  const [mode, setMode] = React.useState('top');

  return (
    <div>
      <div style={{ marginBottom: 16 }}>
        Tab position：
        <Select
          value={mode}
          onChange={setMode}
          dropdownMatchSelectWidth={false}
        >
          <Option value="top">top</Option>
          <Option value="bottom">bottom</Option>
          <Option value="left">left</Option>
          <Option value="right">right</Option>
        </Select>
      </div>
      <Tabs
        defaultActiveKey="1"
        onChange={callback}
        flex
        tabPosition={mode}
        style={{ height: 300 }}
      >
        <TabPane tab="Tab 1" key="1">
          <div style={{ height: 400 }}>Content of Tab Pane 1</div>
        </TabPane>
        <TabPane tab="Tab 2" key="2">
          Content of Tab Pane 2
        </TabPane>
        <TabPane tab="Tab 3" key="3">
          Content of Tab Pane 3
```

## 校验限制跳转

结合数据源，校验限制页签跳转的不同交互示例。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { observer } from 'mobx-react-lite';
import { Tabs } from 'choerodon-ui';
import { useDataSet, Button, Form, TextField, message } from 'choerodon-ui/pro';

const { TabPane } = Tabs;

const App = observer(() => {
  const ds = useDataSet(
    () => ({
      autoCreate: true,
      fields: [{ name: 'name', required: true, label: '姓名' }],
      events: {
        validate: async ({ dataSet, result }) => {
          dataSet.setState('disabled', !(await result));
        },
      },
    }),
    [],
  );
  const handleTabClick = React.useCallback((key) => {
    console.log('key', key);
    if (key === '2' && ds.getState('disabled')) {
      const validationMessage = ds.current
        .getValidationErrors()
        .map((error) => error.errors[0].validationMessage)
        .join(' ');
      message.warning(validationMessage);
    } else {
      ds.setState('activeKey', key);
    }
  }, []);
  return (
    <>
      <Button onClick={() => ds.validate()}>validate</Button>
```

## 校验定位页签

结合数据源，校验后设置页签跳转交互示例。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { observer } from 'mobx-react-lite';
import { Tabs } from 'choerodon-ui';
import { useDataSet, Button, Form, TextField } from 'choerodon-ui/pro';

const { TabPane } = Tabs;

const App = observer(() => {
  const ds = useDataSet(
    () => ({
      autoCreate: true,
      fields: [{ name: 'name', required: true, label: '姓名DS-1' }],
    }),
    [],
  );
  const ds2 = useDataSet(
    () => ({
      autoCreate: true,
      fields: [{ name: 'name', required: true, label: '姓名DS-2' }],
    }),
    [],
  );

  const handleTabClick = React.useCallback((key) => {
    console.log('key', key);
    ds.setState('activeKey', key);
  }, []);

  return (
    <>
      <Button
        onClick={async () => {
          const result1 = await ds.validate();
          const result2 = await ds2.validate();
          if (result1 === false) {
```

## 可拖拽标签

使用 renderTabBar 属性 和 dnd-kit 实现标签可拖拽。

```javascript
import React, { useState } from 'react';
import ReactDOM from 'react-dom';
import { Tabs } from 'choerodon-ui';
import { TextField } from 'choerodon-ui/pro';
import {
  DndContext,
  PointerSensor,
  useSensor,
  DragEndEvent,
} from '@dnd-kit/core';
import {
  arrayMove,
  horizontalListSortingStrategy,
  SortableContext,
  useSortable,
} from '@dnd-kit/sortable';
import { CSS } from '@dnd-kit/utilities';

const DraggableTabNode = ({ ...props }) => {
  const {
    attributes,
    listeners,
    setNodeRef,
    transform,
    transition,
  } = useSortable({
    id: props['data-node-key'],
  });

  const style = {
    ...props.style,
    transform: CSS.Transform.toString(transform && { ...transform, scaleX: 1 }),
    transition: transition || 'none',
    cursor: 'move',
  };
```

## API

### Tabs

| 属性名 | 说明 | 类型/默认值/版本 |
| --- | --- | --- |
| activeKey | 当前激活 tab 面板的 key | 类型string默认值无 |
| animated | 是否使用动画切换 Tabs，在tabPosition=top\|bottom时有效 | 类型boolean {inkBar:boolean, tabPane:boolean}默认值true, type="card" 时为 false |
| defaultActiveKey | 初始化选中面板的 key，如果没有设置 activeKey | 类型string默认值第一个面板 |
| hideAdd | 是否隐藏加号图标，在type="editable-card"时有效 | 类型boolean默认值false |
| hideOnlyGroup | 是否隐藏单独的组 | 类型boolean默认值false版本1.4.5 |
| size | 大小，提供largedefault和small三种大小 | 类型string默认值'default' |
| tabBarExtraContent | tab bar 上额外的元素 | 类型React.ReactNode默认值无 |
| tabBarStyle | tab bar 的样式对象 | 类型object |
| inkBarStyle | ink bar 的样式对象 | 类型object版本1.4.5 |
| tabPosition | 页签位置，可选值有toprightbottomleft | 类型string默认值'top' |
| type | 页签的基本样式，可选line、card、editable-card、second-level(1.5.0) 类型 | 类型string默认值'line' |
| onChange | 切换面板的回调 | 类型(activeKey) => void默认值无 |
| onEdit | 新增和删除页签的回调，在type="editable-card"时有效 | 类型(targetKey, action): void默认值无 |
| onTabClick | tab 被点击的回调 | 类型(tabKey) => void默认值无 |
| tabBarGutter | tabs 之间的间隙 | 类型number默认值无 |
| keyboard | keyboard events | 类型boolean默认值true |
| customizable | 是否显示个性化设置入口按钮 | 类型boolean版本1.4.5 |
| customizedCode | 个性化编码，设置后默认将会存储列拖拽等个性化设置更改到 localStorage，如果要存储到后端, 请重写全局配置中的表格个性化钩子：customizedSavecustomizedLoad | 类型string版本1.4.5 |
| tabDraggable | <个性化>是否可拖拽 | 类型boolean默认值true版本1.5.0 |
| tabTitleEditable | <个性化>是否可编辑标题 | 类型boolean默认值true版本1.5.0 |
| tabCountHideable | <个性化>是否可隐藏计数 | 类型boolean默认值true版本1.5.0 |
| defaultChangeable | <个性化>是否可改变默认显示 | 类型boolean默认值true版本1.5.0 |
| restoreDefault | <个性化>是否开启恢复默认 | 类型boolean默认值true版本1.6.3 |
| showMore | 页签超过容器宽度是否显示更多 | 类型boolean默认值false版本1.5.0-beta.0 |
| flex | 是否柔性布局 | 类型boolean版本1.5.4 |
| renderTabBar | 替换 TabBar，用于二次封装标签头。DefaultTabBar 为组件库默认 TabBar 组件，props 为组件默认参数 | 类型(props: TabBarProps, DefaultTabBar: React.ComponentType) => React.ReactElement版本1.6.5 |
| showMorePopupClassName | showMore 下拉 popup 的自定义类名 | 类型string版本1.6.5 |
| showInvalidTips | 是否开启 DataSet 校验 | 类型boolean默认值全局配置tabsShowInvalidTips版本1.6.5 |

### Tabs.TabPane

| 属性名 | 说明 | 类型/默认值/版本 |
| --- | --- | --- |
| forceRender | 被隐藏时是否渲染 DOM 结构 | 类型boolean默认值false |
| key | 对应 activeKey | 类型string默认值无 |
| tab | 选项卡头显示文字或钩子 | 类型string\|ReactNode (title) => ReactNode默认值无版本1.4.5 |
| title | 选项卡头显示文字 | 类型string默认值无版本1.4.5 |
| disabled | 是否禁用 | 类型boolean默认值无 |
| count | 选项卡头内显示数字 | 类型number\| () => number默认值无 |
| countRenderer | 数字渲染器 | 类型({ text, count, overflowCount }) => ReactNode默认值({ text if (text) return text; }版本1.5.0-beta.0 |
| overflowCount | 展示封顶的数字值 | 类型number默认值99 |
| showCount | 显示数字 | 类型boolean默认值true版本1.4.5 |
| dataSet | 数据集对象，当数据集校验失败时会出现提示标记 | 类型DataSet DataSet[]版本1.5.3 |
| hidden | 是否隐藏 | 类型boolean默认值false版本1.5.7 |

### Tabs.TabGroup

1.4.4 版本支持

| 属性名 | 说明 | 类型/默认值 |
| --- | --- | --- |
| tab | 选项组显示文字 | 类型string\|ReactNode默认值无 |
| disabled | 是否禁用 | 类型boolean默认值无 |
| dot | 是否显示小红点 | 类型boolean默认值无 |
| defaultActiveKey | 初始化组时默认展示的 TabPane 对应的 key | 类型string默认值无 |
| hidden | 是否隐藏 | 类型boolean默认值false |



================================================================================
文件: Tag.md
路径: doc\Tag.md
================================================================================

# Tag 标签

进行标记和分类的小标签。

## 何时使用

- 用于标记事物的属性和维度。
- 进行分类。

## 代码演示

## 基本

基本标签的用法，可以通过添加closable变为可关闭标签。可关闭标签具有onCloseafterClose两个事件。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Tag } from 'choerodon-ui';

function log(e) {
  console.log(e);
}

function preventDefault(e) {
  e.preventDefault();
  console.log('Clicked! But prevent default.');
}

ReactDOM.render(
  <div>
    <Tag>Tag 1</Tag>
    <Tag>
      <a href="https://github.com/choerodon/choerodon-ui">Link</a>
    </Tag>
    <Tag closable onClose={log}>
      Tag 2
    </Tag>
    <Tag closable onClose={preventDefault}>
      Prevent Default
    </Tag>
  </div>,
  document.getElementById('container'),
);
```

## 多彩标签

我们添加了多种预设色彩的标签样式，用作不同场景使用。如果预设值不能满足你的需求，可以设置为具体的色值。

#### Presets:

#### Presets inverse:

#### Custom:

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Tag } from 'choerodon-ui';

ReactDOM.render(
  <div>
    <h4 style={{ marginBottom: 16 }}>Presets:</h4>
    <div>
      <Tag color="pink">pink</Tag>
      <Tag color="magenta">magenta</Tag>
      <Tag color="red">red</Tag>
      <Tag color="volcano">volcano</Tag>
      <Tag color="orange">orange</Tag>
      <Tag color="yellow">yellow</Tag>
      <Tag color="gold">gold</Tag>
      <Tag color="cyan">cyan</Tag>
      <Tag color="lime">lime</Tag>
      <Tag color="green">green</Tag>
      <Tag color="blue">blue</Tag>
      <Tag color="geekblue">geekblue</Tag>
      <Tag color="purple">purple</Tag>
      <Tag color="dark">dark</Tag>
      <Tag color="gray">gray</Tag>
    </div>
    <h4 style={{ marginBottom: 16 }}>Presets inverse:</h4>
    <div>
      <Tag color="pink-inverse">pink-inverse</Tag>
      <Tag color="magenta-inverse">magenta-inverse</Tag>
      <Tag color="red-inverse">red-inverse</Tag>
      <Tag color="volcano-inverse">volcano-inverse</Tag>
      <Tag color="orange-inverse">orange-inverse</Tag>
      <Tag color="yellow-inverse">yellow-inverse</Tag>
      <Tag color="gold-inverse">gold-inverse</Tag>
      <Tag color="cyan-inverse">cyan-inverse</Tag>
      <Tag color="lime-inverse">lime-inverse</Tag>
```

## 动态添加和删除

用数组生成一组标签，可以动态添加和删除，通过监听删除动画结束的事件afterClose实现。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Tag, Input, Tooltip, Icon } from 'choerodon-ui';

class EditableTagGroup extends React.Component {
  state = {
    tags: ['Unremovable', 'Tag 2', 'Tag 3'],
    inputVisible: false,
    inputValue: '',
  };

  handleClose = (removedTag) => {
    const tags = this.state.tags.filter(tag => tag !== removedTag);
    console.log(tags);
    this.setState({ tags });
  }

  showInput = () => {
    this.setState({ inputVisible: true }, () => this.input.focus());
  }

  handleInputChange = (e) => {
    this.setState({ inputValue: e.target.value });
  }

  handleInputConfirm = () => {
    const state = this.state;
    const inputValue = state.inputValue;
```

## 可选择

可通过CheckableTag实现类似 Checkbox 的效果，点击切换选中效果。

该组件为完全受控组件，不支持非受控用法。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Tag } from 'choerodon-ui';

const { CheckableTag } = Tag;

class MyTag extends React.Component {
  state = { checked: true };

  handleChange = checked => {
    this.setState({ checked });
  };

  render() {
    return (
      <CheckableTag {...this.props} checked={this.state.checked} onChange={this.handleChange} />
    );
  }
}

ReactDOM.render(
  <div>
    <MyTag>Tag1</MyTag>
    <MyTag>Tag2</MyTag>
    <MyTag>Tag3</MyTag>
  </div>,
  document.getElementById('container'),
);
```

## 热门标签

选择你感兴趣的话题。

###### Categories:

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Tag } from 'choerodon-ui';

const CheckableTag = Tag.CheckableTag;

const tagsFromServer = ['Movies', 'Books', 'Music', 'Sports'];

class HotTags extends React.Component {
  state = {
    selectedTags: [],
  };

  handleChange(tag, checked) {
    const { selectedTags } = this.state;
    const nextSelectedTags = checked ? [...selectedTags, tag] : selectedTags.filter(t => t !== tag);
    console.log('You are interested in: ', nextSelectedTags);
    this.setState({ selectedTags: nextSelectedTags });
  }

  render() {
    const { selectedTags } = this.state;
    return (
      <div>
        <h6 style={{ marginRight: 8, display: 'inline' }}>Categories:</h6>
        {tagsFromServer.map(tag => (
          <CheckableTag
            key={tag}
```

## API

### Tag

| 属性名 | 说明 | 类型/默认值 |
| --- | --- | --- |
| afterClose | 关闭动画完成后的回调 | 类型() => void默认值- |
| closable | 标签是否可以关闭 | 类型boolean默认值false |
| color | 标签色 | 类型string默认值- |
| onClose | 关闭时的回调 | 类型(e) => void默认值- |

### Tag.CheckableTag

| 属性名 | 说明 | 类型/默认值 |
| --- | --- | --- |
| checked | 设置标签的选中状态 | 类型boolean默认值false |
| onChange | 点击标签时触发的回调 | 类型(checked) => void默认值- |



================================================================================
文件: TextArea.md
路径: doc\TextArea.md
================================================================================

# TextArea 文本域

文本域用于多行输入。

## 何时使用

当用户需要多行输入内容时。

## 代码演示

## 基本使用

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { TextArea, Row, Col } from 'choerodon-ui/pro';

ReactDOM.render(
  <Row gutter={10}>
    <Col span={8}>
      <TextArea placeholder="Basic usage" />
    </Col>
    <Col span={8}>
      <TextArea placeholder="readOnly" readOnly />
    </Col>
    <Col span={8}>
      <TextArea placeholder="disabled" disabled />
    </Col>
  </Row>,
  document.getElementById('container'),
);
```

## 受控输入框

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { TextArea } from 'choerodon-ui/pro';

class App extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      value: 'default',
    };
  }

  handleChange = (value, oldValue) => {
    console.log('[newValue]', value, '[oldValue]', oldValue);
    this.setState({
      value,
    });
  };

  handleInput = e => {
    console.log('[textarea]', e.target.value);
  };

  render() {
    return (
      <TextArea value={this.state.value} onChange={this.handleChange} onInput={this.handleInput} />
    );
  }
}
```

## 数据绑定

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { TextArea, DataSet } from 'choerodon-ui/pro';

function handleDataSetChange({ record, name, value, oldValue }) {
  console.log(
    '[dataset newValue]',
    value,
    '[oldValue]',
    oldValue,
    `[record.get('${name}')]`,
    record.get(name),
  );
}

class App extends React.Component {
  ds = new DataSet({
    autoCreate: true,
    fields: [
      {
        name: 'content',
        type: 'string',
        defaultValue: 'textarea',
        required: true,
      },
    ],
    events: {
      update: handleDataSetChange,
    },
  });
```

## 拖拽调整大小

拖拽调整大小

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { TextArea, Row, Col } from 'choerodon-ui/pro';

ReactDOM.render(
  <Row gutter={10}>
    <Col span={8}>
      <TextArea placeholder="resize both" resize="both" cols={40} />
    </Col>
    <Col span={8}>
      <TextArea placeholder="resize vertical" resize="vertical" cols={40} />
    </Col>
    <Col span={8}>
      <TextArea placeholder="resize horizontal" resize="horizontal" cols={40} />
    </Col>
  </Row>,
  document.getElementById('container'),
);
```

## 适应文本高度

autoSize属性默认只有高度会自动变化。另外autoSize可以设定为一个对象，指定最大最小行列数。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { TextArea } from 'choerodon-ui/pro';

class App extends React.Component {

  render() {
    return (
      <TextArea
        placeholder="适应文本高度"
        autoSize={{ minRows: 2, maxRows: 8 }}
      />
    );
  }
}

ReactDOM.render(<App />, document.getElementById('container'));
```

## 清除

可清除输入框

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { TextArea } from 'choerodon-ui/pro';

const App = () => {
  return (
    <TextArea
      defaultValue="默认值"
      placeholder="适应文本高度"
      rows="4"
      resize="both"
      clearButton
      maxLength={50}
      showLengthInfo
    />
  );
};

ReactDOM.render(<App />, document.getElementById('container'));
```

## API

| 属性 | 说明 | 类型/默认值/版本 |
| --- | --- | --- |
| cols | 文本域宽 | 类型number |
| rows | 文本域高 | 类型number |
| resize | 是否能够拖拽调整大小，可选值：none \| both \| vertical \| horizontal | 类型string默认值none |
| autoSize | 自适应内容高度，可设置为 true\| false 或对象：{ minRows: 2, maxRows: 6 } | 类型boolean\| object默认值false |
| onResize | 大小调整回调 | 类型(width, height) => void |
| clearButton | 是否显示清除按钮 | 类型boolean默认值false版本1.5.1 |
| maxLength | 最大长度 | 类型number版本1.5.1 |
| showLengthInfo | 是否显示长度信息 | 类型boolean版本1.5.1 |

更多属性请参考FormField。



================================================================================
文件: TextField.md
路径: doc\TextField.md
================================================================================

# TextField 文本输入框

文本输入框。

## 何时使用

- 需要用户输入表单域内容时。
- 提供组合型输入框，带搜索的输入框，限制输入配置等。

## 代码演示

## 基本使用

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { TextField, Row, Col, Tooltip } from 'choerodon-ui/pro';

function log(value) {
  console.log('[basic]', value);
}

ReactDOM.render(
  <Row gutter={10}>
    <Col span={8}>
      <TextField placeholder="请输入" onChange={log} />
    </Col>
    <Col span={8}>
      <TextField
        placeholder="清除按钮"
        defaultValue="点击清除"
        clearButton
        onChange={log}
      />
    </Col>
    <Col span={8}>
      <Tooltip title="disabled">
        <TextField value="不可用" disabled />
      </Tooltip>
    </Col>
  </Row>,
  document.getElementById('container'),
```

## 受控输入框

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { TextField } from 'choerodon-ui/pro';

class App extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      value: 'default',
    };
  }

  handleChange = (value, oldValue) => {
    console.log('[newValue]', value, '[oldValue]', oldValue);
    this.setState({
      value,
    });
  }

  handleInput = (e) => {
    console.log('[input]', e.target.value);
  }

  render() {
    return <TextField value={this.state.value} onChange={this.handleChange} onInput={this.handleInput} />;
  }
}
```

## 数据源

绑定数据源。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, TextField } from 'choerodon-ui/pro';

function handleDataSetChange({ record, name, value, oldValue }) {
  console.log(
    '[dataset newValue]',
    value,
    '[oldValue]',
    oldValue,
    `[record.get('${name}')]`,
    record.get(name),
  );
}

class App extends React.Component {
  ds = new DataSet({
    autoCreate: true,
    fields: [
      {
        name: 'first-name',
        type: 'string',
        defaultValue: 'Zhangsan',
        readOnly: true,
      },
    ],
    events: {
      update: handleDataSetChange,
```

## Format

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, TextField, Row, Col } from 'choerodon-ui/pro';

function handleDataSetChange({ record, name, value, oldValue }) {
  console.log(
    '[dataset newValue]',
    value,
    '[oldValue]',
    oldValue,
    `[record.get('${name}')]`,
    record.get(name),
  );
}

class App extends React.Component {
  ds = new DataSet({
    autoCreate: true,
    fields: [
      {
        name: 'first-name',
        type: 'string',
        defaultValue: 'zhangsan',
        required: true,
        format: 'uppercase',
      },
      {
        name: 'middle-name',
```

## 只读

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, TextField, Row, Col, Button } from 'choerodon-ui/pro';

class App extends React.Component {
  ds = new DataSet({
    autoCreate: true,
    fields: [{ name: 'bind', readOnly: true, defaultValue: 'zhangsan' }],
  });

  handleClick = () => {
    this.ds.getField('bind').readOnly = false;
  };

  render() {
    return (
      <Row gutter={10}>
        <Col span="12">
          <TextField placeholder="只读" readOnly />
        </Col>
        <Col span="6">
          <TextField
            dataSet={this.ds}
            name="bind"
            placeholder="DataSet限定只读"
            clearButton
          />
        </Col>
```

## 数据索引

使用dataIndex进行指定数据所在数据源的索引，默认取数据源的当前索引。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, TextField, Row, Col } from 'choerodon-ui/pro';

const data = [
  { bind: 'data1' },
  { bind: 'data2' },
  { bind: 'data3' },
];

class App extends React.Component {
  ds = new DataSet({
    fields: [
      { name: 'bind' },
    ],
    data,
  });

  render() {
    return (
      <Row gutter={10}>
        <Col span="8">
          <TextField dataSet={this.ds} name="bind" dataIndex={0} />
        </Col>
        <Col span="8">
          <TextField dataSet={this.ds} name="bind" dataIndex={1} />
        </Col>
        <Col span="8">
```

## 前后缀

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { TextField, Row, Col, Icon } from 'choerodon-ui/pro';

ReactDOM.render(
  <Row gutter={10}>
    <Col span={12}>
      <TextField placeholder="前缀" prefix={<Icon type="person" />} />
    </Col>
    <Col span={12}>
      <TextField placeholder="后缀" suffix={<Icon type="person" />} />
    </Col>
  </Row>,
  document.getElementById('container')
);
```

## 多值

通过属性multiple设置为多值。


- wu

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, TextField, Row, Col } from 'choerodon-ui/pro';

function handleChange(value, oldValue) {
  console.log('[multiple]', value, '[oldValue]', oldValue);
}

function handleDataSetChange({ record, name, value, oldValue }) {
  console.log('[dataset multiple]', value, '[oldValue]', oldValue, `[record.get('${name}')]`, record.get(name));
}

class App extends React.Component {
  ds = new DataSet({
    autoCreate: true,
    fields: [
      { name: 'user', type: 'string', label: '用户', defaultValue: '', required: true, multiple: ',' },
    ],
    events: {
      update: handleDataSetChange,
    },
  });

  render() {
    return (
      <Row gutter={10}>
        <Col span={12}>
          <TextField dataSet={this.ds} name="user" placeholder="数据源多选" />
```

## 渲染器

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, TextField, Icon, Row, Col } from 'choerodon-ui/pro';

function valueRenderer({ value }) {
  return `${value}个`;
}

function colorRenderer({ text }) {
  return <span style={{ color: 'red' }}>{text}</span>;
}

class App extends React.Component {
  ds = new DataSet({
    data: [{ count: '30' }],
    fields: [{ name: 'count' }],
  });

  render() {
    return (
      <Row gutter={10}>
        <Col span="12">
          <TextField value="50" renderer={valueRenderer} />
        </Col>
        <Col span="12">
          <TextField
            dataSet={this.ds}
            name="count"
```

## 限制输入

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { TextField } from 'choerodon-ui/pro';

ReactDOM.render(
  <TextField placeholder="限制数字" restrict="0-9" />,
  document.getElementById('container')
);
```

## 清除-后缀-长度

各种后缀元素组合场景展示，特殊应用下需要自定义样式进行适配。

#### 清除按钮：

#### 文字后缀：

#### 展示长度信息：

#### 文字后缀 & 长度：

#### 清除 & 长度：

#### 清除 & Icon 后缀：

#### 清除 & Icon 后缀 & 长度：

#### 清除 & Icon onClick 后缀 & 长度：

#### 清除 & onClick 后缀：

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { TextField, Row, Col, Icon, Button } from 'choerodon-ui/pro';

function handleCustom() {
  console.log('handleCustom');
}

// <style>
// .custom-suffix-button label .c7n-pro-input-suffix {
//   height: 28px;
// }
// .custom-suffix-text label .c7n-pro-input-suffix {
//   line-height: 20px;
// }
// </style>

const App = () => {
  return (
    <div>
      <Row gutter={10}>
        <Col span={8}>
          <h4>清除按钮：</h4>
          <TextField
            defaultValue="clearButton-clearButton-clearButton"
            clearButton
          />
        </Col>
        <Col span={8}>
          <h4>文字后缀：</h4>
          <TextField
            // custom-suffix-text 用户自定义类名，适配后缀样式
            className="custom-suffix-text"
            defaultValue="suffix-suffix-suffix-suffix-suffix"
            suffix="文字后缀"
          />
        </Col>
```

## API

| 属性名 | 说明 | 类型/默认值/版本 |
| --- | --- | --- |
| placeholder | 占位词。当为 range 时，可以设定两个占位词 | 类型string string[] |
| prefix | 前缀，一般用于放置图标 | 类型ReactNode |
| suffix | 后缀，一般用于放置图标 | 类型ReactNode |
| clearButton | 是否显示清除按钮 | 类型boolean默认值false |
| minLength | 最小长度 | 类型number |
| maxLength | 最大长度 | 类型number |
| pattern | 正则校验 | 类型string RegExp |
| autoComplete | 自动完成，可选值：on \| off | 类型string默认值off |
| addonBefore | 设置前置标签 | 类型string ReactNode |
| addonAfter | 设置后置标签 | 类型string ReactNode |
| addonBeforeStyle | 设置前置标签样式 | 类型CSSProperties |
| addonAfterStyle | 设置后置标签样式 | 类型CSSProperties |
| restrict | 限制可输入的字符 | 类型string RegExp |
| valueChangeAction | 触发值变更的动作, 可选值：blur \| input | 类型blur版本1.1.0 |
| wait | 设置值变更间隔时间，只有在 valueChangeAction 为 input 时起作用 | 类型number版本1.1.0 |
| waitType | 设置值变更间隔类型，可选值：throttle \| debounce | 类型string默认值debounce版本1.1.0 |
| showLengthInfo | 是否显示长度信息 | 类型boolean版本1.4.0 |
| border | 是否显示边框 | 类型boolean默认值true版本1.4.4 |
| isFlat | 自动宽度模式 | 类型boolean默认值false版本1.4.5 |

更多属性请参考FormField。



================================================================================
文件: Timeline.md
路径: doc\Timeline.md
================================================================================

# Timeline 时间轴

垂直展示的时间流信息。

## 何时使用

- 当有一系列信息需按时间排列时，可正序和倒序。
- 需要有一条时间轴进行视觉上的串联时。

## 代码演示

## 基本用法

基本的时间轴。

- Create a services site 2015-09-01
- Solve initial network problems 2015-09-01
- Technical testing 2015-09-01
- Network problems being solved 2015-09-01

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Timeline } from 'choerodon-ui';

ReactDOM.render(
  <Timeline>
    <Timeline.Item>Create a services site 2015-09-01</Timeline.Item>
    <Timeline.Item>Solve initial network problems 2015-09-01</Timeline.Item>
    <Timeline.Item>Technical testing 2015-09-01</Timeline.Item>
    <Timeline.Item>Network problems being solved 2015-09-01</Timeline.Item>
  </Timeline>,
  document.getElementById('container'));
```

## 圆圈颜色

圆圈颜色，绿色用于已完成、成功状态，红色表示告警或错误状态，蓝色可表示正在进行或其他默认状态。

- Create a services site 2015-09-01
- Create a services site 2015-09-01
- Solve initial network problems 1Solve initial network problems 2Solve initial network problems 3 2015-09-01
- Technical testing 1Technical testing 2Technical testing 3 2015-09-01

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Timeline } from 'choerodon-ui';

ReactDOM.render(
  <Timeline>
    <Timeline.Item color="green">Create a services site 2015-09-01</Timeline.Item>
    <Timeline.Item color="green">Create a services site 2015-09-01</Timeline.Item>
    <Timeline.Item color="red">
      <p>Solve initial network problems 1</p>
      <p>Solve initial network problems 2</p>
      <p>Solve initial network problems 3 2015-09-01</p>
    </Timeline.Item>
    <Timeline.Item>
      <p>Technical testing 1</p>
      <p>Technical testing 2</p>
      <p>Technical testing 3 2015-09-01</p>
    </Timeline.Item>
  </Timeline>,
  document.getElementById('container'));
```

## 最后一个

当任务状态正在发生，还在记录过程中，可用幽灵节点来表示当前的时间节点（用于时间正序排列）。当 pending 值为 false ，可用定制元件替换默认时间图点。

- Create a services site 2015-09-01
- Solve initial network problems 2015-09-01
- Technical testing 2015-09-01
- Recording...

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Timeline } from 'choerodon-ui';

ReactDOM.render(
  <Timeline pending="Recording...">
    <Timeline.Item>Create a services site 2015-09-01</Timeline.Item>
    <Timeline.Item>Solve initial network problems 2015-09-01</Timeline.Item>
    <Timeline.Item>Technical testing 2015-09-01</Timeline.Item>
  </Timeline>,
  document.getElementById('container'));
```

## 自定义时间轴点

可以设置为图标或其他自定义元素。

- Create a services site 2015-09-01
- Solve initial network problems 2015-09-01
- Technical testing 2015-09-01
- Network problems being solved 2015-09-01

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Timeline, Icon } from 'choerodon-ui';

ReactDOM.render(
  <Timeline>
    <Timeline.Item>Create a services site 2015-09-01</Timeline.Item>
    <Timeline.Item>Solve initial network problems 2015-09-01</Timeline.Item>
    <Timeline.Item
      dot={<Icon type="note" style={{ fontSize: '16px' }} />}
      color="red"
    >
      Technical testing 2015-09-01
    </Timeline.Item>
    <Timeline.Item>Network problems being solved 2015-09-01</Timeline.Item>
  </Timeline>,
  document.getElementById('container'),
);
```

## API

```jsx
<Timeline>
  <Timeline.Item>创建服务现场 2015-09-01</Timeline.Item>
  <Timeline.Item>初步排除网络异常 2015-09-01</Timeline.Item>
  <Timeline.Item>技术测试异常 2015-09-01</Timeline.Item>
  <Timeline.Item>网络异常正在修复 2015-09-01</Timeline.Item>
</Timeline>
```

### Timeline

| 属性名 | 说明 | 类型/默认值 |
| --- | --- | --- |
| pending | 指定最后一个幽灵节点是否存在或内容 | 类型boolean\|string\|ReactNode默认值false |
| pendingDot | 当最后一个幽灵节点存在時，指定其时间图点 | 类型\|string\|ReactNode默认值<Icon type="loading" /> |

### Timeline.Item

时间轴的每一个节点。

| 属性名 | 说明 | 类型/默认值 |
| --- | --- | --- |
| color | 指定圆圈颜色blue, red, green，或自定义的色值 | 类型string默认值blue |
| dot | 自定义时间轴点 | 类型string\|ReactNode默认值- |



================================================================================
文件: Tooltip.md
路径: doc\Tooltip.md
================================================================================

# Tooltip 文字提示

简单的文字提示气泡框。

- 支持单例模式，优化性能、方便管理控制

## 何时使用

鼠标移入则显示提示，移出消失，气泡浮层不承载复杂文本和操作。

可用来代替系统默认的title提示，提供一个按钮/文字/操作的文案解释。

## 代码演示

## 基本

最简单的用法。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Tooltip } from 'choerodon-ui/pro';

ReactDOM.render(
  <Tooltip title="prompt text" theme="light">
    <span>Tooltip will show when mouse enter.</span>
  </Tooltip>,
  document.getElementById('container'));
```

## 位置

位置有 12 个方向。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Tooltip, Button } from 'choerodon-ui/pro';

const text = <span>prompt text</span>;

const buttonWidth = 70;

const App = () => {
  return (
    <div className="demo">
      <div style={{ marginLeft: buttonWidth, whiteSpace: 'nowrap' }}>
        <Tooltip placement="topLeft" title={text}>
          <Button>TL</Button>
        </Tooltip>
        <Tooltip placement="top" title={text}>
          <Button>Top</Button>
        </Tooltip>
        <Tooltip placement="topRight" title={text}>
          <Button>TR</Button>
        </Tooltip>
      </div>
      <div style={{ width: buttonWidth, float: 'left' }}>
        <Tooltip placement="leftTop" title={text}>
          <Button>LT</Button>
        </Tooltip>
        <Tooltip placement="left" title={text}>
          <Button>Left</Button>
        </Tooltip>
        <Tooltip placement="leftBottom" title={text}>
          <Button>LB</Button>
        </Tooltip>
      </div>
      <div style={{ width: buttonWidth, marginLeft: buttonWidth * 4 + 24 }}>
        <Tooltip placement="rightTop" title={text}>
          <Button>RT</Button>
```

## 箭头指向

设置了arrowPointAtCenter后，箭头将指向目标元素的中心。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Tooltip, Button } from 'choerodon-ui/pro';

ReactDOM.render(
  <div>
    <Tooltip placement="topLeft" title="Prompt Text">
      <Button>Align edge / 边缘对齐</Button>
    </Tooltip>
    <Tooltip placement="topLeft" title="Prompt Text" arrowPointAtCenter>
      <Button>Arrow points to center / 箭头指向中心</Button>
    </Tooltip>
  </div>,
  document.getElementById('container'));
```

## 受控

通过hidden属性控制Tooltip的行为。

设置hidden属性后，将不再监听鼠标悬浮等事件，Tooltip的显示与否完全取决于hidden属性。此特性可用于编程控制错误信息的显示。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Tooltip, Button } from 'choerodon-ui/pro';

class Demo extends React.Component {
  state = {
    hidden: true,
  };

  handleOpen = () => {
    this.setState({
      hidden: false,
    });
  };

  handleClose = () => {
    this.setState({
      hidden: true,
    });
  };

  render() {
    return (
      <div>
        <Button onClick={this.handleOpen}>Open</Button>
        <Button onClick={this.handleClose} color="red">
          Close
        </Button>
        <Tooltip hidden={this.state.hidden} title="Prompt Text">
```

## 主题

通过theme属性控制Tooltip的主题颜色。

显示红色错误信息时，建议使用亮色主题。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Tooltip, Button, Icon } from 'choerodon-ui/pro';

class Demo extends React.Component {
  state = {
    theme: 'dark',
  };

  handleLighten = () => {
    this.setState({
      theme: 'light',
    });
  };

  handleDarken = () => {
    this.setState({
      theme: 'dark',
    });
  };

  render() {
    return (
      <div>
        <Button onClick={this.handleLighten}>Light</Button>
        <Button onClick={this.handleDarken} color="dark">
          Dark
        </Button>
        <Tooltip
```

## 单例模式

单例模式，使用方法调用 Tooltip 开启/隐藏，优化性能。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Tooltip, Row, Col } from 'choerodon-ui/pro';

const App = () => {
  // 注意单例模式修改参数影响当前界面使用的所有单例实例;特别注意挂载节点的修改（getPopupContainer）
  const handleMouseEnter = React.useCallback(
    (e) =>
      Tooltip.show(e.target, {
        title: e.target.textContent,
        placement: 'topLeft',
      }),
    [],
  );
  const handleMouseLeave = React.useCallback(() => Tooltip.hide(), []);
  return (
    <Row>
      <Col span={12}>
        <div onMouseEnter={handleMouseEnter}>mouseEnter</div>
      </Col>
      <Col span={12}>
        <div onMouseEnter={handleMouseEnter} onMouseLeave={handleMouseLeave}>
          mouseEnter & mouseLeave
        </div>
      </Col>
    </Row>
  );
};
```

## API

| 属性名 | 说明 | 类型 |
| --- | --- | --- |
| title | 提示文字 | 类型string\|ReactNode\|() => ReactNode |
| theme | 主题 | 类型dark light |

### 共同的 API

以下 API 为 Tooltip、Popconfirm、Popover 共享的 API。

| 属性名 | 说明 | 类型/默认值/版本 |
| --- | --- | --- |
| arrowPointAtCenter | 箭头是否指向目标元素中心 | 类型boolean默认值false |
| autoAdjustOverflow | 气泡被遮挡时自动调整位置 | 类型boolean默认值true |
| defaultHidden | 默认是否显隐 | 类型boolean默认值true |
| mouseEnterDelay | 鼠标移入后延时多少才显示 Tooltip，单位：秒 | 类型number默认值0 |
| mouseLeaveDelay | 鼠标移出后延时多少才隐藏 Tooltip，单位：秒 | 类型number默认值0.1 |
| popupClassName | 卡片类名 | 类型string |
| popupStyle | 卡片样式 | 类型object |
| popupInnerStyle | 卡片内容样式 | 类型object版本1.6.0 |
| placement | 气泡框位置，可选 top \| left \| right \| bottom \| topLeft \| topRight \| bottomLeft \| bottomRight \| leftTop \| leftBottom \| rightTop \| rightBottom | 类型string默认值top |
| trigger | 触发行为，可选 hover/focus/click/contextMenu | 类型string默认值hover |
| hidden | 用于手动控制浮层显隐 | 类型boolean默认值true |
| onHiddenBeforeChange | 显示隐藏状态改变前的回调， 返回false将阻止该改变 | 类型(hidden) => boolean |
| onHiddenChange | 显示隐藏的回调 | 类型(hidden) => void |

## 注意

请确保Tooltip的子元素能接受onMouseEnter、onMouseLeave、onFocus、onClick事件。

### static Methods

| 名称 | 说明 |
| --- | --- |
| show(target, tooltipProps, duration) | 显示单例 Tooltip， duration 默认 100 |
| hide(duration) | 隐藏单例 Tooltip， duration 默认 100 |



================================================================================
文件: Transfer.md
路径: doc\Transfer.md
================================================================================

# Transfer 穿梭框

双栏穿梭选择框。

## 何时使用

- 需要在多个可选项中进行多选时。
- 比起 Select 和 TreeSelect，穿梭框占据更大的空间，可以展示可选项的更多信息。

穿梭选择框用直观的方式在两栏中移动元素，完成选择行为。

选择一个或以上的选项后，点击对应的方向键，可以把选中的选项移动到另一栏。其中，左边一栏为 source，右边一栏为 target，API 的设计也反映了这两个概念。

## 代码演示

## 基本使用

- Jack
- Lucy
- Wu

- 无匹配结果。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Transfer, Switch } from 'choerodon-ui/pro';

function handleChange(value, oldValue) {
  console.log('[basic new]', value, '[basic old]', oldValue);
}

const { Option } = Transfer;

class App extends React.Component {
  state = { disabled: false };

  handleDisableChange = value => this.setState({ disabled: value });

  render() {
    return (
      <div>
        <Switch onChange={this.handleDisableChange}>disabled</Switch>
        <br />
        <Transfer onChange={handleChange} disabled={this.state.disabled} titles={['Source', 'Target']}>
          <Option value="jack">Jack</Option>
          <Option value="lucy">Lucy</Option>
          <Option value="wu">Wu</Option>
        </Transfer>
      </div>
    );
  }
}

ReactDOM.render(
  <App />,
  document.getElementById('container')
);
```

## 受控穿梭框

受控穿梭框。

- Jack
- Lucy

- Wu

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Transfer } from 'choerodon-ui/pro';

const { Option } = Transfer;

class App extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      value: 'wu',
    };
  }

  handleChange = (value, oldValue) => {
    console.log('[constrolled]', 'newValue', value, '[oldValue]', oldValue);
    this.setState({
      value,
    });
  }

  render() {
    return (
      <Transfer value={this.state.value} onChange={this.handleChange}>
        <Option value="jack">Jack</Option>
        <Option value="lucy">Lucy</Option>
        <Option value="wu">Wu</Option>
      </Transfer>
    );
  }
}

ReactDOM.render(
  <App />,
  document.getElementById('container')
);
```

## 绑定数据源

绑定数据源。

- Jack
- Lucy
- Niu
- Shao

- Zhangsan

- Jack
- Lucy

- Wu

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, Transfer, Row, Col } from 'choerodon-ui/pro';

function handleDataSetChange({ record, name, value, oldValue }) {
  console.log(
    '[dataset newValue]',
    value,
    '[oldValue]',
    oldValue,
    '[record.get(name)]',
    record.get(name),
  );
}

const { Option } = Transfer;

const optionData = [
  { text: 'Jack', value: 'jack' },
  { text: 'Zhangsan', value: 'zhangsan' },
  { text: 'Lucy', value: 'lucy' },
  { text: 'Niu', value: 'jiaqin' },
  { text: 'Shao', value: 'shao' },
];

const data = [
  {
    'first-name': 'zhangsan',
    'last-name': 'wu',
  },
];

class App extends React.Component {
  optionDs = new DataSet({
    data: optionData,
    selection: 'single',
```

## 值列表代码

值列表代码。

- 男

- 女

- 女
- 男

- 无匹配结果。

- 性别
- 员工状态
- 对齐方式
- 验证码策略
- LOV编辑器类型
- 模板优先级
- 资源类型
- 时区
- 用户状态
- 用户状态11
- 用户状态12
- 用户状态13
- 用户状态14
- 用户状态15
- 用户状态16
- 用户状态17
- 用户状态18
- 用户状态19
- 用户状态20

- 配置文件级别

- 性别
- 员工状态
- 对齐方式
- 验证码策略
- LOV编辑器类型
- 模板优先级
- 时区
- 用户状态
- 用户状态11
- 用户状态12
- 用户状态13
- 用户状态14
- 用户状态15
- 用户状态16
- 用户状态17
- 用户状态18
- 用户状态19
- 用户状态20

- 配置文件级别
- 资源类型

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, Transfer, Button, Row, Col } from 'choerodon-ui/pro';

function handleDataSetChange({ record, name, value, oldValue }) {
  console.log('[dataset newValue]', value, '[oldValue]', oldValue, `[record.get('${name}')]`, record.get(name));
}

class App extends React.Component {
  flag = false;

  ds = new DataSet({
    autoCreate: true,
    fields: [
      { name: 'sex', type: 'string', lookupCode: 'HR.EMPLOYEE_GENDER', defaultValue: 'F' },
      { name: 'sex2', type: 'string', lookupUrl: '/common/code/HR.EMPLOYEE_GENDER/' },
      { name: 'lov', type: 'string', lovCode: 'LOV_CODE', defaultValue: 'SYS.PROFILE_LEVEL_ID' },
      { name: 'lov2', type: 'string', lovCode: 'LOV_CODE', defaultValue: ['SYS.PROFILE_LEVEL_ID', 'SYS.RESOURCE_TYPE'], multiple: true },
    ],
    events: {
      update: handleDataSetChange,
    },
  });

  changeLookupCode = () => {
    this.flag = !this.flag;
    this.ds.getField('sex').set('lookupCode', this.flag ? 'SYS.USER_STATUS' : 'HR.EMPLOYEE_GENDER');
  };

  render() {
    return (
      <Row gutter={10}>
        <Col span={18}>
          <Transfer dataSet={this.ds} name="sex" placeholder="请选择" />
        </Col>
        <Col span={6}>
          <Button onClick={this.changeLookupCode}>修改lookupCode</Button>
        </Col>
        <Col span={24}>
          <Transfer dataSet={this.ds} name="sex2" placeholder="请选择" />
        </Col>
        <Col span={24}>
          <Transfer dataSet={this.ds} name="lov" placeholder="请选择" />
        </Col>
        <Col span={24}>
          <Transfer dataSet={this.ds} name="lov2" placeholder="请选择" />
        </Col>
      </Row>
    );
  }
}

ReactDOM.render(
  <App />,
  document.getElementById('container')
);
```

## 可搜索

- Jack
- Lucy

- Zhangsan

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, Transfer } from 'choerodon-ui/pro';

function handleDataSetChange({ record, name, value, oldValue }) {
  console.log(
    '[searchable]',
    value,
    '[oldValue]',
    oldValue,
    `[record.get('${name}')]`,
    record.get(name),
  );
}

const { Option } = Transfer;

const data = [
  {
    'last-name': 'zhangsan',
  },
];

class App extends React.Component {
  ds = new DataSet({
    data,
    fields: [{ name: 'last-name', type: 'string', label: '姓' }],
    events: {
      update: handleDataSetChange,
    },
  });

  render() {
    return (
      <Transfer dataSet={this.ds} name="last-name" searchable>
        <Option value="jack">Jack</Option>
```

## 单选

- Jack
- Lucy
- Wu

- 无匹配结果。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Transfer, Switch } from 'choerodon-ui/pro';

function handleChange(value, oldValue) {
  console.log('[basic new]', value, '[basic old]', oldValue);
}

const { Option } = Transfer;

ReactDOM.render(
  <Transfer multiple={false} onChange={handleChange}>
    <Option value="jack">Jack</Option>
    <Option value="lucy">Lucy</Option>
    <Option value="wu">Wu</Option>
  </Transfer>,
  document.getElementById('container')
);
```

## 单向穿梭

数据项只能单向穿梭。

- Jack
- Huazhen
- Lucy
- Niu
- Shao

- 无匹配结果。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, Transfer } from 'choerodon-ui/pro';

function handleDataSetChange({ record, name, value, oldValue }) {
  console.log(
    '[dataset newValue]',
    value,
    '[oldValue]',
    oldValue,
    '[record.get(name)]',
    record.get(name),
  );
}

const optionData = [
  { text: 'Jack', value: 'jack' },
  { text: 'Huazhen', value: 'huazhen' },
  { text: 'Lucy', value: 'lucy' },
  { text: 'Niu', value: 'jiaqin' },
  { text: 'Shao', value: 'shao' },
];

class App extends React.Component {
  optionDs = new DataSet({
    data: optionData,
    selection: 'single',
  });

  ds = new DataSet({
    fields: [
      {
        name: 'first-name',
        type: 'string',
        label: '名',
        textField: 'text',
        valueField: 'value',
        options: this.optionDs,
```

## 表格穿梭框

使用 Table 组件作为自定义渲染列表。

| 编号 | 姓名 |
| --- | --- |
|  | 1 |
|  | 2 |
|  | 3 |
|  | 4 |

| 编号 | 姓名 |
| --- | --- |
|  | 5 |
|  | 6 |

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, Table, Transfer } from 'choerodon-ui/pro';

const { Column } = Table;

class App extends React.Component {
  sourceDs;

  targetDs;

  dsCommon = (onItemSelect, events = {}) => ({
    primaryKey: 'userid',
    autoQuery: true,
    paging: false,
    fields: [
      {
        name: 'userid',
        type: 'string',
        label: '编号',
      },
      {
        name: 'name',
        type: 'intl',
        label: '姓名',
        required: true,
      },
    ],
    events: {
      batchSelect: ({ dataSet }) => {
        onItemSelect(dataSet.selected);
      },
      batchUnSelect: ({ dataSet }) => {
        onItemSelect(dataSet.selected);
      },
      ...events,
    },
  });

  render() {
    return (
      <Transfer style={{ height: 300, width: 500 }}>
        {({ direction, targetOption, setTargetOption, onItemSelect }) => {
          if (direction === 'right') {
            if (!this.targetDs) {
              const events = {
```

## 树形穿梭框

使用 Tree 组件作为自定义渲染列表。。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, Tree, Transfer } from 'choerodon-ui/pro';

const defaultLeftTreeData = [
  {
    expand: true,
    id: 2,
    text: '组织架构',
  },
  {
    expand: false,
    id: 7,
    text: '员工管理(react)',
    parentId: 2,
  },
  {
    expand: false,
    id: 73,
    text: '组织管理',
    parentId: 2,
  },
  {
    expand: true,
    id: 12,
    text: '公司管理(react)',
    parentId: 2,
  },
  {
    expand: true,
    id: 24,
    text: '报表管理',
  },
  {
    expand: false,
    id: 25,
    text: '报表定义',
    parentId: 24,
```

## API

### Transfer

1.5.0 版本及以上新增属性。

| 属性名 | 说明 | 类型/默认值 |
| --- | --- | --- |
| titles | 标题集合，顺序从左至右 | 类型[ReactNode, ReactNode] |
| footer | 底部渲染函数 | 类型(props) => ReactNode |
| operations | 操作文案集合，顺序从下至上 | 类型string[] ReactNode[]默认值['>', '<'] |
| sortable | 是否显示排序按钮 | 类型boolean默认值false |
| sortOperations | 排序文案集合 | 类型string[] ReactNode[]默认值['∧', '∨'] |
| placeholderOperations(1.6.6) | 搜索文案集合 | 类型string[]\| string默认值Please enter your search |
| oneWay(1.5.1) | 是否单向穿梭 | 类型boolean默认值false |

更多属性请参考Select。

### Transfer.OptGroup

| 属性名 | 说明 | 类型 |
| --- | --- | --- |
| label | 选项组标题 | 类型string |

### Transfer.Option

| 属性名 | 说明 | 类型 |
| --- | --- | --- |
| value | 选项值 | 类型any |

### Render Props

1.5.3 版本新增组件。

- Transfer 支持接收 children 自定义渲染列表，并返回以下参数：

| 属性名 | 说明 | 类型 |
| --- | --- | --- |
| direction | 渲染列表的方向 | 类型left\|right |
| targetOption | 目标数据源 | 类型Record[] |
| setTargetOption(1.5.5) | 设置目标数据源 | 类型(values: any[]) => void |
| onItemSelect | 勾选条目 | 类型(Records: Record[]) |

#### 参考示例

```text
<Transfer {...props}>{({ direction, targetOption, onItemSelect}) => <YourComponent {...listProps} />}</Transfer>
```



================================================================================
文件: Tree.md
路径: doc\Tree.md
================================================================================

# Tree 树形控件

## 何时使用

文件夹、组织架构、生物分类、国家地区等等，世间万物的大多数结构都是树形结构。使用树控件可以完整展现其中的层级关系，并具有展开收起选择等交互功能。

- Tree 组件关联 dataSet，数据形式可采用打平或属性嵌套的结构。打平数据通过 Id 和 parentId 字段声明来帮助组件内部构成树形处理嵌套数据通过 childrenField 字段声明来帮助组件内部构成树形处理字段属性详解：https://open.hand-china.com/choerodon-ui/zh/datasetapi/dataset-props/id-field官网 mock 源数据https://github.com/open-hand/choerodon-ui/blob/master/site/theme/mock/tree.js

## 代码演示

## 绑定数据源

绑定数据源。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, Tree } from 'choerodon-ui/pro';

function nodeRenderer({ record }) {
  return record.get('text');
}

class App extends React.Component {
  ds = new DataSet({
    primaryKey: 'id',
    queryUrl: '/tree.mock',
    autoQuery: true,
    parentField: 'parentId',
    expandField: 'expand',
    idField: 'id',
    fields: [
      { name: 'id', type: 'number' },
      { name: 'expand', type: 'boolean' },
      { name: 'parentId', type: 'number' },
    ],
    events: {
      select: ({ record, dataSet }) => console.log('select', record, dataSet),
      unSelect: ({ record, dataSet }) =>
        console.log('unSelect', record, dataSet),
    },
  });

  render() {
    return (
      <Tree
        showLine={{
          showLeafIcon: false,
        }}
        showIcon={false}
        dataSet={this.ds}
        checkable
        renderer={nodeRenderer}
      />
    );
  }
}

ReactDOM.render(<App />, document.getElementById('container'));
```

## check和expand使用

expand 和 check 可以配合dataSet的使用方法

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, Tree } from 'choerodon-ui/pro';
import { Row, Col } from 'choerodon-ui';

function nodeRenderer({ record }) {
  return record.get('text');
}

class App extends React.Component {
  ds = new DataSet({
    primaryKey: 'id',
    queryUrl: '/tree-less.mock',
    autoQuery: true,
    expandField: 'expand',
    checkField: 'ischecked',
    parentField: 'parentId',
    idField: 'id',
    fields: [
      { name: 'id', type: 'number' },
      { name: 'expand', type: 'boolean' },
      { name: 'parentId', type: 'number' },
    ],
    events: {
      select: ({ record, dataSet }) => console.log('select', record, dataSet),
      unSelect: ({ record, dataSet }) =>
        console.log('unSelect', record, dataSet),
    },
  });

  dsDefault = new DataSet({
    primaryKey: 'id',
    queryUrl: '/tree-less.mock',
    autoQuery: true,
    parentField: 'parentId',
    idField: 'id',
    fields: [
      { name: 'id', type: 'number' },
      { name: 'expand', type: 'boolean' },
      { name: 'parentId', type: 'number' },
    ],
```

## 只使用 check 功能

Tree selectable 属性设置为 false，checkable 为 true 时可实现点击整个节点触发 onCheck 事件及 DataSet select 相关事件。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, Tree, Button } from 'choerodon-ui/pro';
import { Row, Col } from 'choerodon-ui';

function nodeRenderer({ record }) {
  return record.get('text');
}

const onCheck = (checkedKeys, e, oldCheckedKeys) => {
  console.log('onCheck', checkedKeys, e, oldCheckedKeys);
};

class App extends React.Component {
  ds = new DataSet({
    primaryKey: 'id',
    queryUrl: '/tree-less.mock',
    autoQuery: true,
    expandField: 'expand',
    checkField: 'ischecked',
    parentField: 'parentId',
    idField: 'id',
    fields: [
      { name: 'id', type: 'number' },
      { name: 'expand', type: 'boolean' },
      { name: 'parentId', type: 'number' },
    ],
    events: {
      select: ({ record, dataSet }) => console.log('select', record, dataSet),
      unSelect: ({ record, dataSet }) =>
        console.log('unSelect', record, dataSet),
    },
  });

  render() {
    return (
      <>
        <Row>
          <Col span={12}>
            <Tree
              selectable={false}
```

## 异步加载

```javascript
import ReactDOM from 'react-dom';
import { DataSet, Tree, Row, Col } from 'choerodon-ui/pro';
import React, { useMemo, useCallback } from 'react';
import axios from 'axios';

// 这里面可以控制node结点的判断来实现是否展示为叶结点
function nodeCover({ record }) {
  const nodeProps = {
    title: record.get('text'),
  };
  if (record.get('text') === '岗位管理') {
    nodeProps.isLeaf = true;
  }
  return nodeProps;
}

const TreeDs = () => ({
  primaryKey: 'id',
  transport: {
    read({ data: { parentId } }) {
      return {
        url: `/tree-async${parentId ? `-${parentId}` : ''}.mock`,
      };
    },
  },
  autoQuery: true,
  parentField: 'parentId',
  expandField: 'expand',
  idField: 'id',
  fields: [
    { name: 'id', type: 'number' },
    { name: 'expand', type: 'boolean' },
    { name: 'parentId', type: 'number' },
  ],
  events: {
    select: ({ record, dataSet }) => console.log('select', record, dataSet),
    unSelect: ({ record, dataSet }) => console.log('unSelect', record, dataSet),
  },
});

const App = () => {
  const dataSet = useMemo(() => new DataSet(TreeDs()), []);

  const onLoadData = useCallback((record) => {
    const { key, children } = record;
    return new Promise((resolve) => {
      if (!children) {
        axios
          .get(`/tree-async-${key}.mock`)
          .then((res) => {
```

## 连接线

节点之间带连接线的树，常用于文件目录结构展示。使用 showLine 开启，可以用 switcherIcon 修改默认图标。

```javascript
import React, { useState, useMemo } from 'react';
import ReactDOM from 'react-dom';
import { Tree, Switch, Icon, DataSet } from 'choerodon-ui/pro';

function nodeRenderer({ record }) {
  return record.get('text');
}

const Demo = () => {
  const [showLine, setShowLine] = useState(true);
  const [showIcon, setShowIcon] = useState(false);
  const [showLeafIcon, setShowLeafIcon] = useState(true);
  const ds = useMemo(() => {
    return new DataSet({
      primaryKey: 'id',
      queryUrl: '/tree.mock',
      autoQuery: true,
      parentField: 'parentId',
      expandField: 'expand',
      idField: 'id',
      fields: [
        { name: 'id', type: 'number' },
        { name: 'expand', type: 'boolean' },
        { name: 'parentId', type: 'number' },
      ],
      events: {
        select: ({ record, dataSet }) => console.log('select', record, dataSet),
        unSelect: ({ record, dataSet }) =>
          console.log('unSelect', record, dataSet),
      },
    });
  }, []);

  const onSelect = (selectedKeys, info) => {
    console.log('selected', selectedKeys, info);
  };

  const onSetLeafIcon = (checked) => {
    setShowLeafIcon(checked);
    setShowLine({
      showLeafIcon: checked,
    });
  };
```

## 拖拽属性

通过配置draggable属性实现Tree组件整体拖拽、单个树节点拖拽以及拖拽图标的控制。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, Tree, SelectBox, Form } from 'choerodon-ui/pro';

const { Option } = SelectBox;

const draggableValues = [
  {
    title: 'true',
    value: true,
  },
  {
    title: 'false',
    value: false,
  },
  {
    title: "(node) => node.title !== '组织架构'",
    value: (node) => {
      console.log('node info:', node);
      return node.title !== '组织架构';
    },
  },
  {
    title: '{nodeDraggable: true, icon: true}',
    value: {
      // boolean or node => boolean, same to draggable
      nodeDraggable: true,
      // boolean or ReactNode
      icon: true,
    },
  },
  {
    title: '{nodeDraggable: true, icon: ReactNode}',
    value: {
      // boolean or node => boolean, same to draggable
      nodeDraggable: true,
      // boolean or ReactNode
      icon: (
        <div
          style={{
            width: '100%',
            height: '100%',
            lineHeight: '24px',
            textAlign: 'center',
            border: '1px solid green',
          }}
        >
          🌳
        </div>
      ),
    },
```

## 基本

不关联数据源基本使用，最简单的用法，展示可勾选，可选中，禁用，默认展开等功能。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Tree } from 'choerodon-ui/pro';

const TreeNode = Tree.TreeNode;

class Demo extends React.Component {
  onSelect = (selectedKeys, info) => {
    console.log('selected', selectedKeys, info);
  };

  onCheck = (checkedKeys, info) => {
    console.log('onCheck', checkedKeys, info);
  };

  render() {
    return (
      <Tree
        checkable
        defaultExpandedKeys={['0-0-0', '0-0-1']}
        defaultSelectedKeys={['0-0-0', '0-0-1']}
        defaultCheckedKeys={['0-0-0', '0-0-1']}
        onSelect={this.onSelect}
        onCheck={this.onCheck}
      >
        <TreeNode title="parent 1" key="0-0">
          <TreeNode title="parent 1-0" key="0-0-0" disabled>
            <TreeNode title="leaf" key="0-0-0-0" disableCheckbox />
            <TreeNode title="leaf" key="0-0-0-1" />
          </TreeNode>
          <TreeNode title="parent 1-1" key="0-0-1">
            <TreeNode
              title={<span style={{ color: '#1890ff' }}>sss</span>}
              key="0-0-1-0"
            />
```

## 受控操作示例

不关联数据源，受控操作示例

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Tree } from 'choerodon-ui/pro';

const TreeNode = Tree.TreeNode;

const treeData = [
  {
    title: '0-0',
    key: '0-0',
    children: [
      {
        title: '0-0-0',
        key: '0-0-0',
        children: [
          { title: '0-0-0-0', key: '0-0-0-0' },
          { title: '0-0-0-1', key: '0-0-0-1' },
          { title: '0-0-0-2', key: '0-0-0-2' },
        ],
      },
      {
        title: '0-0-1',
        key: '0-0-1',
        children: [
          { title: '0-0-1-0', key: '0-0-1-0' },
          { title: '0-0-1-1', key: '0-0-1-1' },
          { title: '0-0-1-2', key: '0-0-1-2' },
        ],
      },
      {
        title: '0-0-2',
        key: '0-0-2',
      },
    ],
  },
  {
    title: '0-1',
    key: '0-1',
    children: [
      { title: '0-1-0-0', key: '0-1-0-0' },
      { title: '0-1-0-1', key: '0-1-0-1' },
      { title: '0-1-0-2', key: '0-1-0-2' },
    ],
```

## 自定义图标

可以针对不同节点采用样式覆盖的方式定制图标。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Tree, Icon } from 'choerodon-ui/pro';

const TreeNode = Tree.TreeNode;

class Demo extends React.Component {
  onSelect = (selectedKeys, info) => {
    console.log('selected', selectedKeys, info);
  };

  render() {
    return (
      <Tree
        showIcon
        showLine
        defaultExpandedKeys={['0-0-0', '0-0-1']}
        defaultSelectedKeys={['0-0-0', '0-0-1']}
        onSelect={this.onSelect}
      >
        <TreeNode title="parent 1" key="0-0">
          <TreeNode title="parent 1-0" key="0-0-0">
            <TreeNode
              title="leaf"
              key="0-0-0-0"
              icon={<Icon type="airport_shuttle" />}
            />
            <TreeNode title="leaf" key="0-0-0-1" />
          </TreeNode>
          <TreeNode title="parent 1-1" key="0-0-1">
            <TreeNode title="leaf" key="0-0-1-0" />
          </TreeNode>
          <TreeNode title="leaf" key="0-0-2" />
        </TreeNode>
      </Tree>
```

## 目录

内置的目录树，multiple模式支持ctrl(Windows)/command(Mac)复选。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Tree } from 'choerodon-ui';

const { DirectoryTree } = Tree;

const treeData = [
  {
    title: 'parent 0',
    key: '0-0',
    children: [
      { title: 'leaf 0-0', key: '0-0-0', isLeaf: true },
      { title: 'leaf 0-1', key: '0-0-1', isLeaf: true },
    ],
  },
  {
    title: 'parent 1',
    key: '0-1',
    children: [
      { title: 'leaf 1-0', key: '0-1-0', isLeaf: true },
      { title: 'leaf 1-1', key: '0-1-1', isLeaf: true },
    ],
  },
];

const App = () => {
  const onSelect = (keys, event) => {
    console.log('Trigger Select', keys, event);
  };

  const onExpand = () => {
    console.log('Trigger Expand');
  };

  return (
```

## 虚拟滚动

使用height属性则切换为虚拟滚动。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Tree } from 'choerodon-ui/pro';

function dig(path = '0', level = 3) {
  const list = [];
  for (let i = 0; i < 10; i += 1) {
    const key = `${path}-${i}`;
    const treeNode = {
      title: key,
      key,
    };

    if (level > 0) {
      treeNode.children = dig(key, level - 1);
    }

    list.push(treeNode);
  }
  return list;
}

const treeData = dig();

ReactDOM.render(
  <Tree checkable treeData={treeData} height={233} defaultExpandAll />,
  document.getElementById('container'),
);
```

## API

### Tree props

| 属性名 | 说明 | 类型/默认值/版本 |
| --- | --- | --- |
| dataSet | 绑定的数据源 | 类型DataSet |
| renderer | 节点 title 渲染钩子，只在绑定数据源时起效 | 类型({ dataSet, record, text }) => ReactNode |
| titleField | 节点文字对应数据源的字段，只在绑定数据源时起效 | 类型string |
| defaultExpandAll | 默认展开所有树节点当 dataSet 绑定 expandField 时候忽略 | 类型boolean默认值false |
| defaultExpandedKeys | 默认展开指定的树节点当 dataSet 绑定 expandField 时候忽略 | 类型string[]默认值[] |
| defaultCheckedKeys | 默认选中复选框的树节点当 dataSet 绑定 checkField 时候忽略 | 类型string[]默认值[] |
| defaultSelectKeys | 默认选择节点当，默认绑定 dataSet 的 idField | 类型string[]默认值[] |
| onTreeNode(1.1.0) | 对于 TreeNode 结点的属性覆盖 | 类型((props: {record?: Record null;dataSet?: DataSet null;}) => TreeNodeRendererProps )默认值() {} |
| async | 异步加载，需要后端接口配合，对应的数据源会自动调用查询接口，接口参数中会带有 parentField 对应的参数名和 idField 对应的参数值，接口返回的数据会附加到已有的数据之中 | 类型((props: {record?: Record null;dataSet?: DataSet null;}) => TreeNodeRendererProps )默认值() {} |
| selectable(1.4.4) | 是否可选中 | 类型boolean默认值true |
| filter(1.5.0) | 数据过滤， 返回值 true - 显示 false - 不显示 | 类型(record) => boolean |
| autoExpandParent | 是否自动展开父节点 | 类型boolean默认值true |
| blockNode | 是否节点占据一行 | 类型boolean默认值false |
| checkable | 节点前添加 Checkbox 复选框 | 类型boolean默认值false |
| checkedKeys | （受控）选中复选框的树节点（注意：父子节点有关联，如果传入父节点 key，则子节点自动选中；相应当子节点 key 都传入，父节点也自动选中。当设置checkable和checkStrictly，它是一个有checked和halfChecked属性的对象，并且父子节点的选中与否不再关联 | 类型string[] {checked: string[], halfChecked: string[]}默认值[] |
| checkStrictly | checkable 状态下节点选择完全受控（父子节点选中状态不再关联）（如果关联了 DataSet, 且设置了 checkField, 需要在 DataSet 设置 treeCheckStrictly 属性） | 类型boolean默认值false |
| defaultExpandParent | 默认展开父节点 | 类型bool默认值true |
| defaultSelectedKeys | 默认选中的树节点 | 类型string[]默认值[] |
| disabled | 将树禁用 | 类型bool默认值false |
| draggable | 设置节点可拖拽（IE>8） | 类型boolean ((node?: DataNode) => boolean) {nodeDraggable: boolean boolean), ReactNode}默认值false |
| expandedKeys | （受控）展开指定的树节点 | 类型string[]默认值[] |
| filterTreeNode | 按需筛选树节点,配置后返回 true 的会新增类名上去（高亮） | 类型function(node)默认值- |
| loadData | 异步加载数据 | 类型function(node)默认值- |
| loadedKeys | （受控）已经加载的节点，需要配合loadData使用 | 类型string[]默认值[] |
| multiple | 支持点选多个节点（节点本身） | 类型boolean默认值false |
| selectedKeys | （受控）设置选中的树节点 | 类型string[]默认值- |
| showIcon | 是否展示 TreeNode title 前的图标，没有默认样式，如设置为 true，需要自行定义图标相关样式 | 类型boolean默认值false |
| switcherIcon | 自定义树节点的展开/折叠图标 | 类型React.ReactElement默认值- |
| showLine | 是否展示连接线 | 类型boolean {showLeafIcon: boolean}默认值false |
| onCheck | 点击复选框触发(1.4.4新增 oldCheckedKeys参数) | 类型function(checkedKeys, e:{checked: bool, checkedNodes, node, event, halfCheckedKeys}, oldCheckedKeys)默认值- |
| onDragEnd | dragend 触发时调用 | 类型function({event, node})默认值- |
| onDragEnter | dragenter 触发时调用 | 类型function({event, node, expandedKeys})默认值- |
| onDragEnterBefore | dragenter 触发完成前调用。可用于处理是否允许拖到节点上方，拖入节点或者拖入到下方。参数中的 dragNode 是拖拽的节点信息，node 是拖入的节点信息，其中 node 中的 dragOver 代表是否拖入，dragOverGapTop 是否拖入到节点上方，dragOverGapBottom 是否拖入节点下方 | 类型function({event, node, dragNode, dragNodesKeys}) => boolean默认值-版本1.6.6 |
| onDragLeave | dragleave 触发时调用 | 类型function({event, node})默认值- |
| onDragOver | dragover 触发时调用 | 类型function({event, node})默认值- |
| onDragStart | 开始拖拽时调用 | 类型function({event, node})默认值- |
| onDragOverBefore | dragover 触发完成前调用。可用于处理是否允许拖到节点上方，拖入节点或者拖入到下方。参数中的 dragNode 是拖拽的节点信息，node 是拖入的节点信息，其中 node 中的 dragOver 代表是否拖入，dragOverGapTop 是否拖入到节点上方，dragOverGapBottom 是否拖入节点下方 | 类型function({event, node, dragNode, dragNodesKeys}) => boolean默认值-版本1.6.6 |
| onDrop | drop 触发时调用 | 类型function({event, node, dragNode, dragNodesKeys})默认值- |
| onDropBefore(1.5.0) | drop 触发之前时调用 | 类型({event, node, dragNode, dragNodesKeys}) => boolean默认值- |
| onExpand | 展开/收起节点时触发 | 类型function(expandedKeys, {expanded: bool, node})默认值- |
| onLoad | 节点加载完毕时触发 | 类型function(loadedKeys, {event, node})默认值- |
| onRightClick | 响应右键点击 | 类型function({event, node})默认值- |
| onSelect | 点击树节点触发 | 类型function(selectedKeys, e:{selected: bool, selectedNodes, node, event})默认值- |
| treeData | treeNodes 数据，如果设置则不需要手动构造 TreeNode 节点（key 在整个树范围内唯一） | 类型array<{key, title, children, [disabled, selectable]}>默认值- |
| checkboxPosition | checkbox 显示位置：默认显示在折叠 icon 后面；设置 left 显示在最前面左对齐 | 类型'default' 'left'默认值全局配置treeCheckboxPosition版本1.6.5 |

### TreeNodeRenderer Props

| 属性名 | 说明 | 类型/默认值 |
| --- | --- | --- |
| checkable | 当树为 checkable 时，设置独立节点是否展示 Checkbox | 类型boolean |
| disableCheckbox | 禁掉 checkbox | 类型boolean默认值false |
| disabled | 禁掉响应 | 类型boolean默认值false |
| icon | 自定义图标。可接收组件，props 为当前节点 props | 类型ReactNode/Function(props):ReactNode |
| isLeaf | 设置为叶子节点(设置了loadData时有效) | 类型boolean默认值false |
| title | 标题 | 类型string\|ReactNode |
| switcherIcon | 自定义树节点的展开/折叠图标 | 类型React.ReactNode默认值((props: TreeNodeProps) => React.ReactNode) |
| className | 子节点类名 | 类型string |
| style | 子节点样式 | 类型React.CSSProperties |
| key | 被树的 (default)ExpandedKeys / (default)CheckedKeys / (default)SelectedKeys 属性所用。注意：整个树范围内的所有节点的 key 值不能重复！ | 类型string默认值内部计算出的节点位置 |
| selectable | 设置节点是否可被选中 | 类型boolean默认值true |

### DataSet 相关

| 属性名 | 说明 | 类型 |
| --- | --- | --- |
| selection | selection 为 false Tree checkable 为 true 可以实现整个 treenode 点击触发 check | 类型string boolean |

### DirectoryTree props

| 属性名 | 说明 | 类型/默认值 |
| --- | --- | --- |
| expandAction | 目录展开逻辑，可选false'click''doubleClick' | 类型string默认值click |

## 注意

在之前：树节点可以有很多，但在设置checkable时，将会花费更多的计算时间，因此我们缓存了一些计算结果（this.treeNodesStates）来复用，避免多次重复计算，以此提高性能。但这也带来了一些限制，当你异步加载树节点时，你需要这样渲染树：

```jsx
{
  this.state.treeData.length ? (
    <Tree>
      {this.state.treeData.map(data => (
        <TreeNode />
      ))}
    </Tree>
  ) : (
    'loading tree'
  );
}
```

## FAQ

### 在 showLine 时，如何隐藏子节点图标？

文件图标通过 switcherIcon 来实现，如果不需要你可以覆盖对应的样式：https://codesandbox.io/s/883vo47xp8

### defaultExpandedAll 在异步加载数据时为何不生效？

default前缀属性只有在初始化时生效，因而异步加载数据时defaultExpandedAll已经执行完成。你可以通过受控expandedKeys或者在数据加载完成后渲染 Tree 来实现全部展开。



================================================================================
文件: TreeSelect.md
路径: doc\TreeSelect.md
================================================================================

# TreeSelect 树选择

树型选择控件。

## 何时使用

类似 Select 的选择控件，可选择的数据结构是一个树形结构时，可以使用 TreeSelect，例如公司层级、学科系统、分类目录等等。

## 代码演示

## 基本使用

树形下拉选择器。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { TreeSelect, Button, Row, Col } from 'choerodon-ui/pro';

function handleChange(value, oldValue) {
  console.log('[basic new]', value, '[basic old]', oldValue);
}

const { TreeNode } = TreeSelect;

class App extends React.Component {
  state = {
    visible: true,
  };

  handleClick = () => this.setState({ visible: !this.state.visible });

  render() {
    return (
      <Row gutter={10}>
        <Col span={8}>
          <TreeSelect
            placeholder="请选择"
            onChange={handleChange}
            treeDefaultExpandAll
          >
            <TreeNode value="parent 1" title="parent 1">
              <TreeNode value="parent 1-0" title="parent 1-0">
                <TreeNode value="leaf1" title="my leaf" />
```

## 受控下拉选择器

受控下拉选择器。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { TreeSelect } from 'choerodon-ui/pro';

const { TreeNode } = TreeSelect;

class App extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      value: 'parent 1',
      treeDefaultExpandedKeys: ['parent 1', 'parent 1-0'],
    };
  }

  handleChange = (value, oldValue) => {
    console.log('[constrolled]', 'value', value, 'oldValue', oldValue);
    this.setState({
      value,
    });
  };

  render() {
    const { treeDefaultExpandedKeys, value } = this.state;
    return (
      <TreeSelect
        name="last-name"
        placeholder="请选择"
        value={value}
```

## 值列表代码

值列表代码。

- 青浦区
- 徐汇区

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, TreeSelect, Button, Row, Col } from 'choerodon-ui/pro';

function handleDataSetChange({ record, name, value, oldValue }) {
  console.log(
    '[dataset newValue]',
    value,
    '[oldValue]',
    oldValue,
    `[record.get('${name}')]`,
    record.get(name),
  );
}

function handleOption({ record }) {
  return {
    disabled: record.index === 0,
  };
}

class App extends React.Component {
  flag = false;

  ds = new DataSet({
    autoCreate: true,
    fields: [
      { name: 'sex', type: 'string', lookupCode: 'HR.EMPLOYEE_GENDER' },
      {
        name: 'sex2',
        type: 'string',
```

## 绑定数据源

树形下拉选择器。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, TreeSelect } from 'choerodon-ui/pro';

function handleDataSetChange({ record, name, value, oldValue }) {
  console.log(
    '[dataset newValue]',
    value,
    '[oldValue]',
    oldValue,
    `[record.get('${name}')]`,
    record.get(name),
  );
}

const { TreeNode } = TreeSelect;

const data = [
  {
    user: 'leaf1',
  },
];

class App extends React.Component {
  ds = new DataSet({
    data,
    fields: [
      { name: 'user', type: 'string', textField: 'text', label: '用户' },
    ],
```

## 数据源选项

数据源选项。


```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, TreeSelect, Row, Col, Button } from 'choerodon-ui/pro';

function handleDataSetChange({ record, name, value, oldValue }) {
  console.log(
    '[dataset newValue]',
    value,
    '[oldValue]',
    oldValue,
    `[record.get('${name}')]`,
    record.get(name),
  );
}

class App extends React.Component {
  optionDs = new DataSet({
    selection: 'single',
    queryUrl: '/tree.mock',
    autoQuery: true,
    idField: 'id',
    parentField: 'parentId',
  });

  ds = new DataSet({
    fields: [
      {
        name: 'user',
        type: 'number',
```

## 过滤

通过属性optionsFilter过滤选项。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, TreeSelect, Button } from 'choerodon-ui/pro';

const { TreeNode } = TreeSelect;

const data = [
  {
    'last-name': 'huazhen',
  },
];

class App extends React.Component {
  state = {
    key: 'a',
  };

  ds = new DataSet({
    data,
    fields: [{ name: 'last-name', type: 'string', label: '姓' }],
  });

  handleClick = () => {
    this.setState({ key: this.state.key === 'a' ? 'm' : 'a' });
  };

  optionsFilter = (record) => {
    return record.get('meaning').toLowerCase().indexOf(this.state.key) !== -1;
  };
```

## 可搜索

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, TreeSelect, Row, Col } from 'choerodon-ui/pro';

function handleDataSetChange({ record, name, value, oldValue }) {
  console.log(
    '[searchable]',
    value,
    '[oldValue]',
    oldValue,
    `[record.get('${name}')]`,
    record.get(name),
  );
}

const { TreeNode } = TreeSelect;

const data = [
  {
    'last-name': 'huazhen',
  },
];

function searchMatcher({ record, text }) {
  return record.get('value').indexOf(text) !== -1;
}

class App extends React.Component {
  ds = new DataSet({
```

## 只读

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, TreeSelect, Row, Col } from 'choerodon-ui/pro';

const { TreeNode } = TreeSelect;

const data = [
  {
    'first-name': 'huazhen',
  },
];

class App extends React.Component {
  ds = new DataSet({
    data,
    fields: [{ name: 'first-name', readOnly: true }],
  });

  render() {
    return (
      <Row gutter={10}>
        <Col span={12}>
          <TreeSelect
            name="last-name"
            placeholder="请选择"
            readOnly
            defaultValue="jack"
          >
            <TreeNode value="parent 1" title="parent 1">
```

## 复合下拉框

复合下拉框。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, TreeSelect, Row, Col } from 'choerodon-ui/pro';

function handleChange(value) {
  console.log('[combo]', value);
}

const { TreeNode } = TreeSelect;

class App extends React.Component {
  state = {
    value: 'fox',
  };

  ds = new DataSet({
    autoCreate: true,
    fields: [{ name: 'name', defaultValue: 'fox2' }],
  });

  handleChange = (value) => {
    console.log('[combo]', value);
    this.setState({
      value,
    });
    this.ds.current.set('name', value);
  };

  render() {
```

## 多值

通过属性multiple设置为多值。


- sss

- my leaf
- your leaf
- sss




- my leaf
- sss


```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, TreeSelect, Row, Col, SelectBox } from 'choerodon-ui/pro';
const { Option } = SelectBox;

function handleChange(value, oldValue) {
  console.log('[multiple]', value, '[oldValue]', oldValue);
}

function handleDataSetChange({ record, name, value, oldValue }) {
  console.log(
    '[dataset multiple]',
    value,
    '[oldValue]',
    oldValue,
    `[record.get('${name}')]`,
    record.get(name),
  );
}

const { TreeNode } = TreeSelect;

const data = [
  {
    user: ['sss'],
  },
];

class App extends React.Component {
  state = {
    showCheckedStrategy: 'SHOW_ALL',
  };

  ds = new DataSet({
    data,
```

## 选项异步加载

选项异步加载。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import axios from 'axios';
import { DataSet, TreeSelect, Row, Col } from 'choerodon-ui/pro';

// 这里面可以控制node结点的判断来实现是否展示为叶结点
function nodeCover({ record }) {
  const nodeProps = {
    title: record.get('text'),
  };
  if (record.get('text') === '岗位管理') {
    nodeProps.isLeaf = true;
  }
  return nodeProps;
}

function handleDataSetChange({ record, name, value, oldValue }) {
  console.log(
    '[dataset newValue]',
    value,
    '[oldValue]',
    oldValue,
    `[record.get('${name}')]`,
    record.get(name),
  );
}

class App extends React.Component {
  optionDs = new DataSet({
    selection: 'single',
    transport: {
      read({ data: { parentId } }) {
        return {
```

## 自定义渲染选项

使用optionRenderer属性。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import {
  DataSet,
  TreeSelect,
  Button,
  Row,
  Col,
  Menu,
  Tooltip,
  Icon,
} from 'choerodon-ui/pro';

const Item = Menu.Item;

const App = () => {
  const optionDs = new DataSet({
    selection: 'single',
    queryUrl: '/tree-less.mock',
    autoQuery: true,
    idField: 'id',
    parentField: 'parentId',
  });

  const ds = new DataSet({
    fields: [
      {
        name: 'user',
        type: 'string',
```

## API

### TreeSelect

| 属性名 | 说明 | 类型/默认值/版本 |
| --- | --- | --- |
| multiple | 支持多选（当设置 treeCheckable 时自动变为 true） | 类型boolean默认值false版本1.0.0 |
| showCheckedStrategy | 定义选中项回填的方式。SHOWCHILD: 只显示子节点. SHOWPARENT: 只显示父节点(当父节点下所有子节点都选中时). 默认显示所有选中节点(包括父节点). | 类型string默认值SHOW_ALL版本1.4.1 |
| treeCheckable | 显示 checkbox | 类型boolean默认值false版本1.0.0 |
| treeDefaultExpandAll | 默认展开所有树节点 | 类型boolean默认值false版本1.0.0 |
| treeDefaultExpandedKeys | 默认展开的树节点, 对应TreeNode的key或value | 类型string[]默认值-版本1.0.0 |
| checkStrictly | checkable 状态下节点选择完全受控（父子节点选中状态不再关联）。此属性设置后 showCheckedStrategy 属性无效 | 类型boolean版本1.6.4 |

更多属性请参考Select。

### TreeSelect.TreeNode

| 属性名 | 说明 | 类型/默认值 |
| --- | --- | --- |
| disableCheckbox | 禁掉 checkbox | 类型boolean默认值false |
| disabled | 是否禁用 | 类型boolean默认值false |
| isLeaf | 是否是叶子节点 | 类型boolean默认值false |
| title | 树节点显示的内容 | 类型string\|ReactNode |
| value | 默认根据此属性值进行筛选（其值在整个树范围内唯一） | 类型string |



================================================================================
文件: TriggerField.md
路径: doc\TriggerField.md
================================================================================

# TriggerField 抽象下拉表单控件

所有有下拉菜单的表单控件的抽象基类。

## API

### TriggerField

| 属性名 | 说明 | 类型/默认值/版本 |
| --- | --- | --- |
| popupContent | 下拉框的自定义内容 | 类型ReactNode (props) => ReactNode |
| popupCls | 下拉框的自定义样式名 | 类型string |
| popupStyle | 下拉框的内链样式 | 类型CSSProperties |
| popupPlacement | 气泡框位置，可选 top \| left \| right \| bottom \| topLeft \| topRight \| bottomLeft \| bottomRight \| leftTop \| leftBottom \| rightTop \| rightBottom \| | 类型string默认值top |
| trigger | 触发下拉框的方式组，可选值：click \| focus \| hover \| contextMenu | 类型string[] |
| triggerShowDelay | 下拉框显示延迟 | 类型number默认值150 |
| triggerHiddenDelay | 下拉框隐藏延迟 | 类型number默认值50 |
| onPopupHiddenChange | 下拉框变化的钩子 | 类型(hidden: boolean) => void |
| getPopupContainer | 定义浮层的容器，默认为 body | 类型(triggerNode: HTMLElement) => HTMLElement; |
| getPopupAlignTarget | 定义浮层对齐的目标，默认为组件最外层元素 | 类型() => HTMLElement;版本1.4.4 |
| tabIntoPopupContent | 按 Tab 键进入下拉框中可获焦的元素 | 类型boolean默认值false版本1.4.1 |
| viewMode | 内容的显示模式, Lov 默认值是 modal, 且目前只有 Lov 实现了 modal \| drawer | 类型modal popup drawer(1.5.0)默认值popup版本1.4.4 |
| clearButton | 是否显示清除按钮 | 类型boolean默认值true |

更多属性请参考TextField。



================================================================================
文件: Typography.md
路径: doc\Typography.md
================================================================================

# Typography 排版

文本的基本格式。

- 可关联数据源 DataSet 展示
- 提供可点击和可复制等额外的交互能力

## 何时使用

- 当需要展示标题、段落、列表内容时使用，如文章/博客/日志的文本样式。
- 当需要一列基于文本的基础操作时，如拷贝/省略等。

## 代码演示

## 基础

展示文档样例。

# Introduction

## Guidelines and Resources

- Principles
- Patterns
- Resource Download

# 介绍

## 设计资源

- 设计原则
- 主题切换
- 定制主题

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Typography } from 'choerodon-ui/pro';

const { Title, Paragraph, Text, Link } = Typography;

const blockContent = `自汉得宣布开源以来，Choerodon猪齿鱼已被上千个组织所使用，帮助企业完成软件的生命周期管理，从而更快、更频繁地交付更稳定的软件。经过一千一百多天的奋战，2021年06月30日，Choerodon猪齿鱼迎来了1.0先行版正式发布，标志着Choerodon猪齿鱼走向的成熟和稳定，欢迎各位升级体验。`;

ReactDOM.render(
  <Typography>
    <Title>Introduction</Title>
    <Paragraph>
      In the process of internal desktop applications development, many
      different design specs and implementations would be involved, which might
      cause designers and developers difficulties and duplication and reduce the
      efficiency of development.
    </Paragraph>
    <Paragraph>
      After massive project practice and summaries, Choerodon-ui Design, a
      design language for background applications, is refined by Choerodon-ui
      UED Team, which aims to{' '}
      <Text strong>
        uniform the user interface specs for internal background projects, lower
        the unnecessary cost of design differences and implementation and
        liberate the resources of design and front-end development
      </Text>
      .
    </Paragraph>
    <Title level={2}>Guidelines and Resources</Title>
    <Paragraph>
      We supply a series of design principles, practical patterns and high
      quality design resources (<Text code>Sketch</Text> and{' '}
      <Text code>Axure</Text>), to help people create their product prototypes
      beautifully and efficiently.
    </Paragraph>

    <Paragraph>
      <ul>
        <li>
          <Link href="https://open-hand.gitee.io/choerodon-ui/zh/docs/other/introduce">
            Principles
          </Link>
        </li>
        <li>
          <Link href="https://open-hand.gitee.io/choerodon-ui/zh/docs/other/ued-theme">
            Patterns
          </Link>
        </li>
        <li>
          <Link href="https://open-hand.gitee.io/choerodon-ui/zh/docs/other/customize-theme">
            Resource Download
          </Link>
        </li>
      </ul>
    </Paragraph>

    <Paragraph>
      Press <Text keyboard>Esc</Text> to exit...
    </Paragraph>

    <br />

    <Title>介绍</Title>
    <Paragraph>
      自汉得宣布开源以来，Choerodon猪齿鱼已被上千个组织所使用，帮助企业完成软件的生命周期管理，从而更快、更频繁地交付更稳定的软件。经过一千一百多天的奋战，2021年06月30日，Choerodon猪齿鱼迎来了1.0先行版正式发布，标志着Choerodon猪齿鱼走向的成熟和稳定，欢迎各位升级体验。
    </Paragraph>
    <Paragraph>
      拥有开箱即用的高质量 React
      组件，全链路开发和设计工具体系，帮助企业级中后台产品提升开发效率。自V
      0.1.0就开始支撑Choerodon猪齿鱼的前端组件，并在2021年2月4日发布稳定开发正式版
      V
      1.0，支持平滑升级，目前除了Choerodon猪齿鱼还支撑着HZERO、飞搭等产品的前端组件。
      Choerodon-ui 基于<Text mark>『DataSet』和『抽象组件』</Text>
      的设计，通过模块化的解决方案，降低冗余的生产成本，让设计者专注于
      <Text strong>更好的用户体验</Text>。
    </Paragraph>
    <Title level={2}>设计资源</Title>
    <Paragraph>
      我们提供完善的设计原则、最佳实践和设计资源文件（<Text code>Sketch</Text>{' '}
      和<Text code>Axure</Text>），来帮助业务快速设计出高质量的产品原型。
```

## 标题组件

各种标题展示。

# h1. Choerodon-ui

## h2. Choerodon-ui

### h3. Choerodon-ui

#### h4. Choerodon-ui

##### h5. Choerodon-ui

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Typography } from 'choerodon-ui/pro';

const { Title } = Typography;

ReactDOM.render(
  <>
    <Title>h1. Choerodon-ui</Title>
    <Title level={2}>h2. Choerodon-ui</Title>
    <Title level={3}>h3. Choerodon-ui</Title>
    <Title level={4}>h4. Choerodon-ui</Title>
    <Title level={5}>h5. Choerodon-ui</Title>
  </>,
  document.getElementById('container'),
);
```

## 文本与超链接组件

内置不同样式的文本以及超链接组件。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Typography } from 'choerodon-ui/pro';

const { Text, Link } = Typography;

ReactDOM.render(
  <main style={{ display: 'flex', flexDirection: 'column' }}>
    <Text>Choerodon-ui (default)</Text>
    <Text type="secondary">Choerodon-ui (secondary)</Text>
    <Text type="success">Choerodon-ui (success)</Text>
    <Text type="warning">Choerodon-ui (warning)</Text>
    <Text type="danger">Choerodon-ui (danger)</Text>
    <Text disabled>Choerodon-ui (disabled)</Text>
    <Text mark>Choerodon-ui (mark)</Text>
    <Text code>Choerodon-ui (code)</Text>
    <Text keyboard>Choerodon-ui (keyboard)</Text>
    <Text underline>Choerodon-ui (underline)</Text>
    <Text delete>Choerodon-ui (delete)</Text>
    <Text strong>Choerodon-ui (strong)</Text>
    <Text italic>Choerodon-ui (italic)</Text>
    <Link href="https://open-hand.gitee.io/choerodon-ui/zh" target="_blank">
      Choerodon-ui (Link)
    </Link>
  </main>,
  document.getElementById('container'),
);
```

## 绑定数据源

可以绑定数据源在 Form 表单下展示

# 非 Form 下使用

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Typography, DataSet, Form } from 'choerodon-ui/pro';

const { Text, Link, Title, Paragraph } = Typography;

class App extends React.Component {
  ds = new DataSet({
    autoCreate: true,
    fields: [
      { name: 'title0', type: 'string', defaultValue: '非 Form 下使用' },
      {
        name: 'text0',
        type: 'string',
        defaultValue: '这个不在 Form 下的绑定数据源显示',
      },
      { name: 'link0', type: 'string', defaultValue: 'choerodon-ui' },
      {
        name: 'paragraph0',
        type: 'string',
        defaultValue: '这是一段不在 Form 表单下的段落展示。',
      },

      { name: 'title1', type: 'string', defaultValue: 'Introduce' },
      {
        name: 'title2',
        type: 'string',
        defaultValue: 'This is my personal profile',
      },
      {
        name: 'name',
        label: '姓名',
        type: 'string',
        defaultValue: 'LeBron James',
      },
      { name: 'age', label: '年龄', type: 'string', defaultValue: '28' },
      { name: 'sex', label: '性别', type: 'string', defaultValue: 'Male' },
      {
        name: 'habbit',
        label: '爱好',
        type: 'string',
        defaultValue: 'Basketball, rugby and Dancing',
      },
      {
        name: 'website',
        label: '网站',
        type: 'string',
        defaultValue: 'choerodon-ui',
      },
      {
        name: 'introduce',
        label: '个人经历',
        type: 'string',
        defaultValue:
          'Extensive business experience including accounting firms,legal firms,financial firms,insurance companies,transportation companies,medical environments,government agencies and non-profit groups',
      },
    ],
  });
```

## 可交互

提供可点击和可复制等额外的交互能力。

# h1. Choerodon-ui

## h2. Choerodon-ui

### h3. Choerodon-ui

#### h4. Choerodon-ui

##### h5. Choerodon-ui

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Typography } from 'choerodon-ui/pro';
import { Icon } from 'choerodon-ui';

const { Paragraph } = Typography;

const Demo = () => {
  const customIconStr = 'Custom icon and replace tooltip text.';
  const clickTriggerStr = 'Text or icon as trigger - click to start.';
  const customEnterIconStr = ' text with a custom enter icon in field.';
  const noEnterIconStr = 'table text with no enter icon in field.';
  const hideTooltipStr = 'Hide tooltip.';
  const lengthLimitedStr = 'This is text with limited length.';

  return (
    <>
      <Paragraph copyable>{customIconStr}</Paragraph>
      <Paragraph copyable>{clickTriggerStr}</Paragraph>
      <Paragraph copyable>{customEnterIconStr}</Paragraph>
      <Paragraph copyable>{noEnterIconStr}</Paragraph>
      <Paragraph copyable>{hideTooltipStr}</Paragraph>
      <Paragraph copyable>{lengthLimitedStr}</Paragraph>
      <Typography.Title copyable level={1} style={{ margin: 0 }}>
        h1. Choerodon-ui
      </Typography.Title>
      <Typography.Title copyable level={2} style={{ margin: 0 }}>
        h2. Choerodon-ui
      </Typography.Title>
      <Typography.Title copyable level={3} style={{ margin: 0 }}>
        h3. Choerodon-ui
      </Typography.Title>
      <Typography.Title copyable level={4} style={{ margin: 0 }}>
        h4. Choerodon-ui
      </Typography.Title>
      <Typography.Title copyable level={5} style={{ margin: 0 }}>
        h5. Choerodon-ui
      </Typography.Title>
      <br />
      <Paragraph copyable>This is a copyable text.</Paragraph>
      <Paragraph copyable={{ text: 'Hello, Choerodon-ui!' }}>
        Replace copy text.
      </Paragraph>
      <Paragraph
        copyable={{
          icon: [
            <Icon type="face_retouching_natural" key={1} />,
            <Icon type="face_retouching_off" key={2} />,
          ],
```

## 标题与段落

展示不同级别的标题。

# Introduction

## Guidelines and Resources

- Principles
- Patterns
- Resource Download

# 介绍

## 设计资源

- 设计原则
- 主题切换
- 定制主题

- I am an unordered item
- I am an unordered item with an ordered sublistI am orderedI am unordered

- Ordered list item with unordered sublistI am unordered!I am also unordered!

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Typography } from 'choerodon-ui/pro';

const { Title, Paragraph, Text } = Typography;

ReactDOM.render(
  <>
    <Title>Introduction</Title>
    <Paragraph>
      In the process of internal desktop applications development, many
      different design specs and implementations would be involved, which might
      cause designers and developers difficulties and duplication and reduce the
      efficiency of development.
    </Paragraph>
    <Paragraph>
      After massive project practice and summaries, Choerodon-ui, a design
      language for background applications, is refined by Choerodon-ui UED Team,
      which aims to
      <Text strong>
        uniform the user interface specs for internal background projects, lower
        the unnecessary cost of design differences and implementation and
        liberate the resources of design and front-end development
      </Text>
      .
    </Paragraph>
    <Title level={2}>Guidelines and Resources</Title>
    <Paragraph>
      We supply a series of design principles, practical patterns and high
      quality design resources (<Text code>Sketch</Text> and{' '}
      <Text code>Axure</Text>), to help people create their product prototypes
      beautifully and efficiently.
    </Paragraph>

    <Paragraph>
      <ul>
        <li>
          <a href="https://open-hand.gitee.io/choerodon-ui/zh/docs/other/introduce">
            Principles
          </a>
        </li>
        <li>
          <a href="https://open-hand.gitee.io/choerodon-ui/zh/docs/other/ued-theme">
            Patterns
          </a>
        </li>
        <li>
          <a href="https://open-hand.gitee.io/choerodon-ui/zh/docs/other/customize-theme">
            Resource Download
          </a>
        </li>
      </ul>
    </Paragraph>

    <Title id="intro">介绍</Title>
    <Paragraph>
      自汉得宣布开源以来，Choerodon猪齿鱼已被上千个组织所使用，帮助企业完成软件的生命周期管理，从而更快、更频繁地交付更稳定的软件。经过一千一百多天的奋战，2021年06月30日，Choerodon猪齿鱼迎来了1.0先行版正式发布，标志着Choerodon猪齿鱼走向的成熟和稳定，欢迎各位升级体验。
    </Paragraph>
    <Paragraph>
      随着商业化的趋势，越来越多的企业级产品对更好的用户体验有了进一步的要求。带着这样的一个终极目标，我们（组件库开发人员）经过大量的项目实践和总结，逐步打磨出一个服务于企业级产品的设计体系
      Choerodon-ui。基于<Text mark>『DataSet』和『抽象组件』</Text>
      的设计，通过模块化的解决方案，降低冗余的生产成本，让设计者专注于
      <Text strong>更好的用户体验</Text>。
    </Paragraph>
    <Title level={2}>设计资源</Title>
    <Paragraph>
      我们提供完善的设计原则、最佳实践和设计资源文件（<Text code>Sketch</Text>{' '}
      和<Text code>Axure</Text>），来帮助业务快速设计出高质量的产品原型。
    </Paragraph>

    <Paragraph>
      <ul>
        <li>
          <a href="https://open-hand.gitee.io/choerodon-ui/zh/docs/other/introduce">
```

## 省略号

多行文本省略。你可以通过 tooltip 属性配置省略展示内容，大量文本时推荐优先使用 expandable。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Typography, Switch } from 'choerodon-ui/pro';

const { Paragraph, Text } = Typography;

const Demo = () => {
  const [ellipsis, setEllipsis] = React.useState(true);

  return (
    <>
      <Switch
        checked={ellipsis}
        onChange={() => {
          setEllipsis(!ellipsis);
        }}
      />

      <Paragraph ellipsis={ellipsis}>
        Choerodon-ui, a design language for background applications, is refined
        by UED Team. Choerodon-ui Design, a design language for background
        applications, is refined by Choerodon-ui UED Team. Choerodon-ui Design,
        a design language for background applications, is refined by
        Choerodon-ui UED Team. Choerodon-ui Design, a design language for
        background applications, is refined by Choerodon-ui UED Team.
        Choerodon-ui Design, a design language for background applications, is
        refined by Choerodon-ui UED Team. Choerodon-ui Design, a design language
        for background applications, is refined by Choerodon-ui UED Team.
      </Paragraph>

      <Paragraph
        ellipsis={
          ellipsis ? { rows: 2, expandable: true, symbol: 'more' } : false
        }
      >
        Choerodon-ui, a design language for background applications, is refined
        by Choerodon-ui UED Team. Choerodon-ui Design, a design language for
```

## 中间省略号

使用 ellipsis={{ suffix: ... }} 可以封装一个从中间省略内容的组件，适合于需要保留文本末位特征的内容。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Typography } from 'choerodon-ui/pro';

const { Text } = Typography;

const EllipsisMiddle = ({ suffixCount, children }) => {
  const start = children.slice(0, children.length - suffixCount).trim();
  const suffix = children.slice(-suffixCount).trim();
  return (
    <Text style={{ maxWidth: '100%' }} ellipsis={{ suffix }} name="textName">
      {start}
    </Text>
  );
};

ReactDOM.render(
  <EllipsisMiddle suffixCount={12}>
    In the process of internal desktop applications development, many different
    design specs and implementations would be involved, which might cause
    designers and developers difficulties and duplication and reduce the
    efficiency of development.
  </EllipsisMiddle>,
  document.getElementById('container'),
);
```

## 后缀

添加后缀的省略。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Typography, Range } from 'choerodon-ui/pro';

const { Paragraph } = Typography;

class Demo extends React.Component {
  state = {
    rows: 1,
  };

  onChange = (rows) => {
    this.setState({ rows });
  };

  render() {
    const { rows } = this.state;
    const article =
      "To be, or not to be, that is a question: Whether it is nobler in the mind to suffer. The slings and arrows of outrageous fortune Or to take arms against a sea of troubles, And by opposing end them? To die: to sleep; No more; and by a sleep to say we end The heart-ache and the thousand natural shocks That flesh is heir to, 'tis a consummation Devoutly to be wish'd. To die, to sleep To sleep- perchance to dream: ay, there's the rub! For in that sleep of death what dreams may come When we have shuffled off this mortal coil, Must give us pause. There 's the respect That makes calamity of so long life";
    return (
      <>
        <div style={{ height: 50 }}>
          <Range value={rows} min={1} max={10} onChange={this.onChange} />
        </div>
        <br />
        <Paragraph
          ellipsis={{
            rows,
            expandable: true,
            suffix: '--William Shakespeare',
            onEllipsis: (ellipsis) => {
              console.log('Ellipsis changed:', ellipsis);
            },
          }}
          title={`${article}--William Shakespeare`}
        >
          {article}
```

## API

### Typography.Text

| 属性名 | 说明 | 类型/默认值 |
| --- | --- | --- |
| code | 添加代码样式 | 类型boolean默认值false |
| copyable | 是否可拷贝，为对象时可进行各种自定义 | 类型boolean \|copyable默认值false |
| delete | 添加删除线样式 | 类型boolean默认值false |
| disabled | 禁用文本 | 类型boolean默认值false |
| ellipsis | 自动溢出省略，为对象时不能设置省略行数、是否可展开、onExpand 展开事件 | 类型boolean \|ellipsis默认值false |
| keyboard | 添加键盘样式 | 类型boolean默认值false |
| mark | 添加标记样式 | 类型boolean默认值false |
| onClick | 点击 Text 时的回调 | 类型(event) => void默认值- |
| strong | 是否加粗 | 类型boolean默认值false |
| italic | 是否斜体 | 类型boolean默认值false |
| type | 文本类型 | 类型secondary\|success\|warning\|danger默认值- |
| underline | 添加下划线样式 | 类型boolean默认值false |

### Typography.Title

| 属性名 | 说明 | 类型/默认值 |
| --- | --- | --- |
| code | 添加代码样式 | 类型boolean默认值false |
| copyable | 是否可拷贝，为对象时可进行各种自定义 | 类型boolean \|copyable默认值false |
| delete | 添加删除线样式 | 类型boolean默认值false |
| disabled | 禁用文本 | 类型boolean默认值false |
| ellipsis | 自动溢出省略，为对象时可设置省略行数、是否可展开、添加后缀等 | 类型boolean \|ellipsis默认值false |
| level | 重要程度，相当于h1、h2、h3、h4、h5 | 类型number: 1, 2, 3, 4, 5默认值1 |
| mark | 添加标记样式 | 类型boolean默认值false |
| onClick | 点击 Title 时的回调 | 类型(event) => void默认值- |
| italic | 是否斜体 | 类型boolean默认值false |
| type | 文本类型 | 类型secondary\|success\|warning\|danger默认值- |
| underline | 添加下划线样式 | 类型boolean默认值false |

### Typography.Paragraph

| 属性名 | 说明 | 类型/默认值 |
| --- | --- | --- |
| code | 添加代码样式 | 类型boolean默认值false |
| copyable | 是否可拷贝，为对象时可进行各种自定义 | 类型boolean \|copyable默认值false |
| delete | 添加删除线样式 | 类型boolean默认值false |
| disabled | 禁用文本 | 类型boolean默认值false |
| ellipsis | 自动溢出省略，为对象时可设置省略行数、是否可展开、添加后缀等 | 类型boolean \|ellipsis默认值false |
| mark | 添加标记样式 | 类型boolean默认值false |
| onClick | 点击 Paragraph 时的回调 | 类型(event) => void默认值- |
| strong | 是否加粗 | 类型boolean默认值false |
| italic | 是否斜体 | 类型boolean默认值false |
| type | 文本类型 | 类型secondary\|success\|warning\|danger默认值- |
| underline | 添加下划线样式 | 类型boolean默认值false |

### copyable

```text
{
  text: string,
  onCopy: function,
  icon: ReactNode,
  tooltips: false | [ReactNode, ReactNode],
}
```

| 属性名 | 说明 | 类型/默认值 |
| --- | --- | --- |
| icon | 自定义拷贝图标：[默认图标, 拷贝后的图标] | 类型[ReactNode, ReactNode]默认值- |
| text | 拷贝到剪切板里的文本 | 类型string默认值- |
| tooltips | 自定义提示文案，为 false 时隐藏文案 | 类型[ReactNode, ReactNode]默认值[复制,复制成功] |
| onCopy | 拷贝成功的回调函数 | 类型function默认值- |

### ellipsis

```text
{
  rows: number,
  expandable: boolean,
  suffix: string,
  symbol: ReactNode,
  tooltip: boolean | ReactNode,
  onExpand: function(event),
  onEllipsis: function(ellipsis),
}
```

| 属性名 | 说明 | 类型/默认值 |
| --- | --- | --- |
| expandable | 是否可展开 | 类型boolean默认值- |
| rows | 最多显示的行数 | 类型number默认值- |
| suffix | 自定义省略内容后缀 | 类型string默认值- |
| symbol | 自定义展开描述文案 | 类型ReactNode默认值展开 |
| tooltip | 省略时，展示提示信息 | 类型boolean ReactNode默认值- |
| onEllipsis | 触发省略时的回调 | 类型function(ellipsis)默认值- |
| onExpand | 点击展开时的回调 | 类型function(event)默认值- |

更多属性请参考FormField。



================================================================================
文件: Upload.md
路径: doc\Upload.md
================================================================================

# Upload 上传

文件选择上传和拖拽上传控件。

- 附件上传组件区别与选用指南：https://open.hand-china.com/choerodon-ui/zh/tutorials/attachment-upload

## 何时使用

上传是将信息（网页、文字、图片、视频等）通过网页或者上传工具发布到远程服务器上的过程。

- 当需要上传一个或一些文件时。
- 当需要展现上传的进度时。
- 当需要使用拖拽交互时。

## 代码演示

## 点击上传

经典款式，用户点击按钮弹出文件选择框。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Upload, message, Button, Icon } from 'choerodon-ui';

const props = {
  name: 'file',
  action: '//jsonplaceholder.typicode.com/posts/',
  headers: {
    authorization: 'authorization-text',
  },
  onChange(info) {
    if (info.file.status !== 'uploading') {
      console.log(info.file, info.fileList);
    }
    if (info.file.status === 'done') {
      message.success(`${info.file.name} file uploaded successfully`);
    } else if (info.file.status === 'error') {
      message.error(`${info.file.name} file upload failed.`);
    }
  },
  showFileSize: true,
  showUploadList: {
    // showReUploadIcon: Upload 组件文件上传失败后是否显示重新上传按钮。当 listType 为 picture-card: true 为 icon, text 为文字形式; 其他 listType 都为文字形式
    showReUploadIcon: true,
  },
};

ReactDOM.render(
```

## 用户头像

点击上传用户头像，并使用beforeUpload限制用户上传的图片格式和大小。

beforeUpload的返回值可以是一个 Promise 以支持也支持异步检查：示例。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Upload, Icon, message } from 'choerodon-ui';

function getBase64(img, callback) {
  const reader = new FileReader();
  reader.addEventListener('load', () => callback(reader.result));
  reader.readAsDataURL(img);
}

function beforeUpload(file) {
  const isJPG = file.type === 'image/jpeg';
  if (!isJPG) {
    message.error('You can only upload JPG file!');
  }
  const isLt2M = file.size / 1024 / 1024 < 2;
  if (!isLt2M) {
    message.error('Image must smaller than 2MB!');
  }
  return isJPG && isLt2M;
}

class Avatar extends React.Component {
  state = {
    loading: false,
  };

  handleChange = (info) => {
    if (info.file.status === 'uploading') {
      this.setState({ loading: true });
      return;
    }
    if (info.file.status === 'done') {
```

## 已上传的文件列表

使用defaultFileList设置已上传的内容。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Upload, Button, Icon } from 'choerodon-ui';

const props = {
  action: '//jsonplaceholder.typicode.com/posts/',
  onChange({ file, fileList }) {
    if (file.status !== 'uploading') {
      console.log(file, fileList);
    }
  },
  defaultFileList: [
    {
      uid: 1,
      name: 'xxx.png',
      status: 'done',
      reponse: 'Server Error 500', // custom error message to show
      url: 'http://www.baidu.com/xxx.png',
    },
    {
      uid: 2,
      name: 'yyy.png',
      status: 'done',
      url: 'http://www.baidu.com/yyy.png',
    },
    {
      uid: 3,
      name: 'zzz.png',
      status: 'error',
      reponse: 'Server Error 500', // custom error message to show
      url: 'http://www.baidu.com/zzz.png',
    },
```

## 照片墙

用户可以上传图片并在列表中显示缩略图。当上传照片数到达限制后，上传按钮消失。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Upload, Icon, Modal } from 'choerodon-ui';

class PicturesWall extends React.Component {
  state = {
    previewVisible: false,
    previewImage: '',
    previewTitle: '',
    fileList: [
      {
        uid: -1,
        name: 'image1.png',
        status: 'done',
        url:
          'https://zos.alipayobjects.com/rmsportal/jkjgkEfvpUPVyRjUImniVslZfWPnJuuZ.png',
      },
    ],
  };

  handleCancel = () => this.setState({ previewVisible: false });

  handlePreview = (file) => {
    this.setState({
      previewImage: file.url || file.thumbUrl,
      previewVisible: true,
      previewTitle: file.name,
    });
  };

  handleChange = ({ fileList }) => this.setState({ fileList });
```

## 完全控制的上传列表

使用fileList对列表进行完全控制，可以实现各种自定义功能，以下演示三种情况：

- 上传列表数量的限制。
- 读取远程路径并显示链接。
- 按照服务器返回信息筛选成功上传的文件。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Upload, Button, Icon } from 'choerodon-ui';

class MyUpload extends React.Component {
  state = {
    fileList: [
      {
        uid: -1,
        name: 'xxx.png',
        status: 'done',
        url: 'http://www.baidu.com/xxx.png',
      },
    ],
  };

  handleChange = (info) => {
    let fileList = info.fileList;

    // 1. Limit the number of uploaded files
    //    Only to show two recent uploaded files, and old ones will be replaced by the new
    fileList = fileList.slice(-2);

    // 2. read from response and show file link
    fileList = fileList.map((file) => {
      if (file.response) {
        // Component will show file.url as link
        file.url = file.response.url;
      }
```

## 拖拽上传

把文件拖入指定区域，完成上传，同样支持点击上传。

设置multiple后，在IE10+可以一次上传多个文件。

Click or drag file to this area to upload

Support for a single or bulk upload. Strictly prohibit from uploading company data or other band files

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Upload, Icon, message } from 'choerodon-ui';

const Dragger = Upload.Dragger;

const props = {
  name: 'file',
  multiple: true,
  action: '//jsonplaceholder.typicode.com/posts/',
  onChange(info) {
    const status = info.file.status;
    if (status !== 'uploading') {
      console.log(info.file, info.fileList);
    }
    if (status === 'done') {
      message.success(`${info.file.name} file uploaded successfully.`);
    } else if (status === 'error') {
      message.error(`${info.file.name} file upload failed.`);
    }
  },
};

ReactDOM.render(
  <Dragger {...props}>
    <p className="c7n-upload-drag-icon">
      <Icon type="inbox" />
    </p>
    <p className="c7n-upload-text">Click or drag file to this area to upload</p>
    <p className="c7n-upload-hint">
      Support for a single or bulk upload. Strictly prohibit from uploading
      company data or other band files
    </p>
  </Dragger>,
```

## 图片列表样式

上传文件为图片，可展示本地缩略图。IE8/9不支持浏览器本地缩略图展示（Ref），可以写thumbUrl属性来代替。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Upload, Button, Icon } from 'choerodon-ui';

const fileList = [
  {
    uid: -1,
    name: 'xxx.png',
    status: 'done',
    url:
      'https://zos.alipayobjects.com/rmsportal/jkjgkEfvpUPVyRjUImniVslZfWPnJuuZ.png',
    thumbUrl:
      'https://zos.alipayobjects.com/rmsportal/jkjgkEfvpUPVyRjUImniVslZfWPnJuuZ.png',
  },
  {
    uid: -2,
    name: 'yyy.png',
    status: 'done',
    url:
      'https://zos.alipayobjects.com/rmsportal/jkjgkEfvpUPVyRjUImniVslZfWPnJuuZ.png',
    thumbUrl:
      'https://zos.alipayobjects.com/rmsportal/jkjgkEfvpUPVyRjUImniVslZfWPnJuuZ.png',
  },
];

const props = {
  action: '//jsonplaceholder.typicode.com/posts/',
  listType: 'picture',
  defaultFileList: [...fileList],
};

const props2 = {
  action: '//jsonplaceholder.typicode.com/posts/',
  listType: 'picture',
  defaultFileList: [...fileList],
  className: 'upload-list-inline',
};

ReactDOM.render(
  <div>
    <Upload {...props}>
      <Button>
```

## 手动上传

beforeUpload返回false后，手动上传文件。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Upload, Button, Icon, message } from 'choerodon-ui';
import reqwest from 'reqwest';

class Demo extends React.Component {
  state = {
    fileList: [],
    uploading: false,
  };

  handleUpload = () => {
    const { fileList } = this.state;
    const formData = new FormData();
    fileList.forEach((file) => {
      formData.append('files[]', file);
    });

    this.setState({
      uploading: true,
    });

    // You can use any AJAX library you like
    reqwest({
      url: '//jsonplaceholder.typicode.com/posts/',
      method: 'post',
      processData: false,
      data: formData,
      success: () => {
        this.setState({
```

## 可拖拽照片墙

用户可以上传图片并在列表中显示缩略图，可拖拽照片墙。当上传照片数到达限制后，上传按钮消失。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Upload, Icon, Modal } from 'choerodon-ui';

class PicturesWall extends React.Component {
  state = {
    previewVisible: false,
    previewImage: '',
    previewTitle: '',
    fileList: [
      {
        uid: -1,
        name: 'image1.png',
        status: 'done',
        url:
          'https://zos.alipayobjects.com/rmsportal/jkjgkEfvpUPVyRjUImniVslZfWPnJuuZ.png',
      },
      {
        uid: -2,
        name: 'image2.png',
        status: 'done',
        url:
          'https://zos.alipayobjects.com/rmsportal/jkjgkEfvpUPVyRjUImniVslZfWPnJuuZ.png',
      },
      {
        uid: -3,
        name: 'image3.png',
        status: 'done',
        url:
          'https://zos.alipayobjects.com/rmsportal/jkjgkEfvpUPVyRjUImniVslZfWPnJuuZ.png',
      },
      {
```

## API

服务端上传接口实现可以参考jQuery-File-Upload。

| 属性名 | 说明 | 类型/默认值/版本 |
| --- | --- | --- |
| accept | 接受上传的文件类型, 详见input accept Attribute | 类型string默认值无 |
| action | 必选参数, 上传的地址 | 类型string默认值无 |
| beforeUpload | 上传文件之前的钩子，参数为上传的文件，若返回false则停止上传。支持返回一个 Promise 对象，Promise 对象 reject 时则停止上传，resolve 时开始上传。注意：IE9 不支持该方法。 | 类型(file, fileList) =>boolean \\| Promise默认值无 |
| beforeUploadFiles(1.5.6) | 上传文件 List 之前的钩子，若返回false则停止上传。支持返回一个 Promise 对象，Promise 对象 reject 时则停止上传，resolve 时开始上传。注意：IE9 不支持该方法。 | 类型(fileList) =>boolean \\| Promise默认值无 |
| customRequest | 通过覆盖默认的上传行为，可以自定义自己的上传实现 | 类型Function默认值无 |
| data | 上传所需参数或返回上传参数的方法 | 类型object\|function(file)默认值无 |
| defaultFileList | 默认已经上传的文件列表 | 类型object[]默认值无 |
| dragUploadList | 是否开启拖拽picture-card | 类型boolean默认值false |
| disabled | 是否禁用 | 类型boolean默认值false |
| fileList | 已经上传的文件列表（受控） | 类型object[]默认值无 |
| headers | 设置上传的请求头部，IE10 以上有效 | 类型object默认值无 |
| listType | 上传列表的内建样式，支持三种基本样式text,picture和picture-card | 类型string默认值'text' |
| multiple | 是否支持多选文件，ie10+支持。开启后按住 ctrl 可选择多个文件。 | 类型boolean默认值true |
| name | 发到后台的文件参数名 | 类型string默认值'file' |
| showUploadList | 是否展示 uploadList, 可设为一个对象，用于单独设定是否显示 预览按钮、移除按钮、下载按钮、重新上传按钮 等 | 类型boolean \|ShowUploadListInterface默认值true |
| supportServerRender | 服务端渲染时需要打开这个 | 类型boolean默认值false |
| withCredentials | 上传请求时是否携带 cookie | 类型boolean默认值false |
| onChange | 上传文件改变时的状态，详见onChange | 类型Function默认值无 |
| onPreview | 点击文件链接或预览图标时的回调 | 类型Function(file)默认值无 |
| onRemove | 点击移除文件时的回调，返回值为 false 时不移除。支持返回一个 Promise 对象，Promise 对象 resolve(false) 或 reject 时不移除。 | 类型Function(file):boolean \\| Promise默认值无 |
| onSuccess | 上传成功事件 | 类型Function(response, file)默认值无 |
| onProgress | 上传进度中事件 | 类型Function({ percent }, file)默认值无 |
| onError | 上传失败事件 | 类型Function(error, response, file)默认值无 |
| onDragEnd | 拖拽picture-card事件 | 类型Function(fileList)默认值无 |
| requestFileKeys | 可以传输文件上面的一些props信息给后台 | 类型string,string[]默认值无 |
| showFileSize(1.5.0-beta.0) | listType为text时是否显示文件大小 | 类型boolean默认值false |
| onStart | 文件上传开始时 | 类型(file: UploadFile) => void |
| onReUpload | 文件重新上传的实现 | 类型(file: UploadFile) => void boolean |
| renderIcon | 文件列表中渲染图标 | 类型(file: UploadFile, listType: UploadListType, prefixCls?: string) => ReactElement |
| popconfirmProps | 删除和重新上传确认弹框的属性 | 类型PopconfirmProps |
| pictureCardShowName | 设置picture-card类型图片是否显示文件名 | 类型boolean版本1.6.5 |

### ShowUploadListInterface

| 属性名 | 说明 | 类型/默认值 |
| --- | --- | --- |
| showRemoveIcon | 是否显示删除按钮 | 类型boolean\| ((file: UploadFile) => boolean)默认值true |
| showPreviewIcon | 是否显示预览按钮 | 类型boolean ((file: UploadFile) => boolean)默认值picture-card 模式下为 true，其他模式下为 false |
| showDownloadIcon | 是否显示下载按钮 | 类型boolean ((file: UploadFile) => boolean)默认值picture-card 模式下为 true，其他模式下为 false |
| showReUploadIcon | 是否显示重新上传按钮（上传成功状态则重新选择文件上传，上传失败状态则重新上传该文件；当 listType 为 picture-card: true 为 icon, text 为文字形式; 其他 listType 都为文字形式） | 类型boolean 'text' ((file: UploadFile, listType: UploadListType) => (boolean 'text'))默认值uploadShowReUploadIcon |
| removePopConfirmTitle | 删除弹框确认信息 | 类型string |
| reUploadText | 重新上传按钮 title 信息 | 类型string |
| reUploadPopConfirmTitle | 重新上传弹框确认信息 | 类型string |
| getCustomFilenameTitle | 文件名 title 信息 | 类型(file: UploadFile) => string默认值文件名 |

### onChange

上传中、完成、失败都会调用这个函数。

文件状态改变的回调，返回为：

```js
{
  file: { /* ... */ },
  fileList: [ /* ... */ ],
  event: { /* ... */ },
}
```

- file当前操作的文件对象。{uid:'uid',// 文件唯一标识，建议设置为负数，防止和内部产生的 id 冲突name:'xx.png'// 文件名status:'done',// 状态有：uploading done error removedresponse:'{"status": "success"}',// 服务端响应内容linkProps:'{"download": "image"}',// 下载链接额外的 HTML 属性}
- fileList当前的文件列表。
- event上传中的服务端响应内容，包含了上传进度等信息，高级浏览器支持。

## 显示下载链接

请使用 fileList 属性设置数组项的 url 属性进行展示控制。

## customRequest

- https://github.com/react-component/upload#customrequest

## IE note

- https://github.com/react-component/upload#ie89-note



================================================================================
文件: Upload_pro_.md
路径: doc\Upload_pro_.md
================================================================================

# Upload<pro> 上传

文件选择上传控件。

上传回调及渲染交互与基础 Upload 组件有差别，注意根据需求选择使用，建议直接使用功能集成完善的 Attchment 组件。

- 附件上传组件区别与选用指南：https://open.hand-china.com/choerodon-ui/zh/tutorials/attachment-upload

## 何时使用

上传是将信息（网页、文字、图片、视频等）通过网页或者上传工具发布到远程服务器上的过程。

- 当需要上传一个或一些文件时。
- 当需要展现上传的进度时。
- 当需要使用拖拽交互时。

## 代码演示

## 基本使用

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Upload } from 'choerodon-ui/pro';

const props = {
  headers: {
    'Access-Control-Allow-Origin': '*',
  },
  action: 'https://www.mocky.io/v2/5cc8019d300000980a055e76',
  multiple: true,
  accept: ['.deb', '.txt', '.pdf', 'image/*'],
  uploadImmediately: true,
  showUploadList: false,
};

ReactDOM.render(
  <div>
    <Upload {...props} />
  </div>,
  document.getElementById('container'),
);
```

## 点击按钮上传

选择文件后，点击按钮上传。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Upload } from 'choerodon-ui/pro';

const props = {
  headers: {
    'Access-Control-Allow-Origin': '*',
  },
  action: 'https://www.mocky.io/v2/5cc8019d300000980a055e76',
  multiple: true,
  accept: ['.deb', '.txt', '.pdf', 'image/*'],
  uploadImmediately: false,
};

ReactDOM.render(
  <div>
    <Upload {...props} />
  </div>,
  document.getElementById('container'),
);
```

## 追加上传文件列表

以追加形式上传文件列表

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Upload } from 'choerodon-ui/pro';

class App extends React.Component {
  render() {
    const props = {
      headers: {
        'Access-Control-Allow-Origin': '*',
      },
      action: 'https://www.mocky.io/v2/5cc8019d300000980a055e76',
      multiple: true,
      accept: ['.deb', '.txt', '.pdf', 'image/*'],
      uploadImmediately: false,
      withCredentials: false,
      partialUpload: true,
      appendUpload: true,
    };

    return <Upload {...props} />;
  }
}

ReactDOM.render(<App />, document.getElementById('container'));
```

## 上传文件列表控制

使用beforeUpload返回 false 后，控制上传文件列表

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Upload, message } from 'choerodon-ui/pro';

class App extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      uploadFileList: [
        {
          name: 'xxx.jpg',
          type: 'image/jpg',
          status: 'success',
          size: 2800,
          uid: 1,
          url:
            'https://zos.alipayobjects.com/rmsportal/jkjgkEfvpUPVyRjUImniVslZfWPnJuuZ.png',
        },
      ],
    };
  }

  handleBefore = (file, fileList) => {
    const isJPG = file.type === 'image/jpeg';
    if (!isJPG) {
      message.error('You can only upload JPG file!');
    }
    const isLt2M = file.size / 1024 / 1024 < 2;
    if (!isLt2M) {
      message.error('Image must smaller than 2MB!');
    }
    if (isJPG && isLt2M) {
      this.setState({
        uploadFileList: [...this.state.uploadFileList, file],
```

## 数量限制

限制同时上传文件的数量。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Upload, message } from 'choerodon-ui/pro';

const handleBefore = (file, fileList) => {
  const isJPG = file.type === 'image/jpeg';
  if (!isJPG) {
    message.error('You can only upload JPG file!');
  }
  const isLt2M = file.size / 1024 / 1024 < 2;
  if (!isLt2M) {
    message.error('Image must smaller than 2MB!');
  }
  return isJPG && isLt2M;
};

const props = {
  headers: {
    'Access-Control-Allow-Origin': '*',
  },
  action: 'https://www.mocky.io/v2/5cc8019d300000980a055e76',
  multiple: true,
  accept: ['.deb', '.txt', '.pdf', 'image/*'],
  uploadImmediately: false,
  fileListMaxLength: 2,
  beforeUpload: handleBefore,
};
```

## 附加提示信息

在组件右上角显示提示信息，如接受的文件类型等。

请上传图片文件(jpg, jpeg, png...)

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Upload } from 'choerodon-ui/pro';

const props = {
  headers: {
    'Access-Control-Allow-Origin': '*',
  },
  action: 'https://www.mocky.io/v2/5cc8019d300000980a055e76',
  multiple: true,
  accept: ['image/*'],
  uploadImmediately: false,
  extra: <p>请上传图片文件(jpg, jpeg, png...)</p>,
  onUploadSuccess: (response) => console.log(response),
};

ReactDOM.render(
  <div>
    <Upload {...props} />
  </div>,
  document.getElementById('container'),
);
```

## 自定义响应处理方法

可以自定义上传请求得到响应后的处理方式，包括成功和失败。这将覆盖默认的处理行为。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Upload, message } from 'choerodon-ui/pro';

const props = {
  headers: {
    'Access-Control-Allow-Origin': '*',
  },
  action: 'https://www.mocky.io/v2/5cc8019d300000980a055e76',
  multiple: true,
  accept: ['.deb', '.txt', '.pdf', 'image/*'],
  uploadImmediately: false,
  onUploadSuccess: (response) => message.success(response.message),
  onUploadError: (error, response, file) => console.log(error, response, file),
};

ReactDOM.render(
  <div>
    <Upload {...props} />
  </div>,
  document.getElementById('container'),
);
```

## 附加额外数据

为一个文件上传请求追加一个FormData实例。请查看开发者工具中的 Network 标签。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Upload } from 'choerodon-ui/pro';

const props = {
  headers: {
    'Access-Control-Allow-Origin': '*',
  },
  action: 'https://www.mocky.io/v2/5cc8019d300000980a055e76',
  multiple: true,
  accept: ['.deb', '.txt', '.pdf', 'image/*'],
  uploadImmediately: false,
  data: {
    key1: 'value1',
    key2: 'value2',
  },
  onUploadSuccess: (response) => console.log(response),
};

ReactDOM.render(
  <div>
    <Upload {...props} />
  </div>,
  document.getElementById('container'),
);
```

## 文件删除回调

使用onRemoveFile返回 false 后，不移除

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Upload } from 'choerodon-ui/pro';

class App extends React.Component {
  handleRemove = (file) => {
    console.log('remove', file);
    return false;
  };

  render() {
    const props = {
      headers: {
        'Access-Control-Allow-Origin': '*',
      },
      action: 'https://www.mocky.io/v2/5cc8019d300000980a055e76',
      multiple: true,
      accept: ['.deb', '.txt', '.pdf', 'image/*'],
      uploadImmediately: false,
      onRemoveFile: this.handleRemove,
    };

    return <Upload {...props} />;
  }
}

ReactDOM.render(<App />, document.getElementById('container'));
```

## 上传方法

直接调用组件的上传方法，可以使用showUploadBtn={false}使自带的上传按钮消失。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { Upload, Button, Form, Output } from 'choerodon-ui/pro';

const props = {
  headers: {
    'Access-Control-Allow-Origin': '*',
  },
  action: 'https://www.mocky.io/v2/5cc8019d300000980a055e76',
  multiple: true,
  accept: ['.deb', '.txt', '.pdf', 'image/*'],
  uploadImmediately: false,
  showUploadBtn: false,
  showPreviewImage: true,
};

class Demo extends React.Component {
  upload;

  saveUpload = (node) => (this.upload = node);

  handleBtnClick = () => {
    this.upload.startUpload();
  };

  render() {
    return (
      <Form header="文件管理">
        <Output
          label="选择Logo"
          renderer={() => <Upload ref={this.saveUpload} {...props} />}
        />
        <Button
          style={{ marginBottom: 10, width: '100px' }}
```

## API

### Upload 属性说明如下：

| 属性 | 说明 | 类型/默认值 |
| --- | --- | --- |
| accept | 接受上传的文件类型input accept Attribute | 类型string[] |
| action | 上传的地址 | 类型string默认值'' |
| data | 上传所需参数或返回上传参数的方法 | 类型object function(file) |
| headers | 设置上传的请求头部，IE10 以上有效 | 类型object |
| multiple | 是否支持多选，IE10 以上有效 | 类型boolean默认值false |
| name | input元素的 name 字段 | 类型string默认值file |
| uploadImmediately | 是否选择文件后立即上传（若为否，组件自身会提供上传按钮） | 类型boolean默认值true |
| fileListMaxLength | 同时上传文件的最大数量 | 类型number默认值0，表示无限制 |
| defaultFileList | 默认显示的文件列表 | 类型object[] |
| uploadFileList | 显示设定的文件列表（可控） | 类型object[] |
| withCredentials | 上传请求时是否携带 cookie | 类型boolean默认值false |
| appendUpload | 是否以追加形式添加文件至列表中 | 类型boolean默认值false |
| partialUpload | 只上传文件状态不是success的文件 | 类型boolean默认值true |
| beforeUpload | 上传文件之前的钩子，参数为上传的文件，可对文件在上传之前进行校验操作若返回 false 则停止上传。支持返回一个 Promise 对象，Promise 对象 reject 时则停止上传，resolve 时开始上传。 | 类型(file, fileList) => boolean默认值Promise |
| showPreviewImage | 是否显示图片预览 | 类型boolean默认值true |
| showUploadBtn | 是否显示上传按钮 | 类型boolean默认值true |
| showUploadList | 是否显示上传列表 | 类型boolean默认值true |
| previewImageWidth | 预览图片 Img 元素的宽度 | 类型number默认值100 |
| previewImageRenderer(1.6.5) | 自定义预览图片 | 类型(file: UploadFile) => React.ReactNode |
| onFileChange | input 元素内部文件变化的回调 | 类型(fileList: UploadFile[]) => void |
| onRemoveFile | 点击移除文件时的回调，返回值为 false 时不移除。支持返回一个 Promise 对象，Promise 对象 resolve(false) 或 reject 时不移除。 | 类型function(file): boolean默认值Promise |
| onUploadProgress | 上传进度变化的回调 | 类型(percent: number, file: UploadFile) => void |
| onUploadSuccess | 上传成功的回调 | 类型(response: any, file: UploadFile) => void |
| onUploadError | 上传出错的回调 | 类型(error: Error, response: any, file: UploadFile) => void |

更多属性请参考ViewComponent。

### UploadFile 类型接口：

```ts
export interface UploadFile {
  uid: string;
  size: number;
  name: string;
  filename?: string;
  lastModified?: string;
  lastModifiedDate?: Date;
  url?: string;
  status?: 'error' | 'success' | 'uploading' | 'done';
  percent?: number;
  thumbUrl?: string;
  originFileObj?: File;
  response?: any;
  error?: any;
  linkProps?: any;
  type: string;
  msClose?: boolean;
}
```



================================================================================
文件: UrlField.md
路径: doc\UrlField.md
================================================================================

# UrlField Url输入框

Url 输入框。

## 何时使用

当用户需要输入 URL 时。

## 代码演示

## 基本使用

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { UrlField, Row, Col } from 'choerodon-ui/pro';

function log(value) {
  console.log('[basic]', value);
}

ReactDOM.render(
  <Row gutter={10}>
    <Col span={8}>
      <UrlField placeholder="请输入" onChange={log} />
    </Col>
    <Col span={8}>
      <UrlField placeholder="清除按钮" defaultValue="点击清除" clearButton onChange={log} />
    </Col>
    <Col span={8}>
      <UrlField value="不可用" disabled />
    </Col>
  </Row>,
  document.getElementById('container')
);
```

## 受控输入框

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { UrlField } from 'choerodon-ui/pro';

class App extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      value: 'default',
    };
  }

  handleChange = (value, oldValue) => {
    console.log('[newValue]', value, '[oldValue]', oldValue);
    this.setState({
      value,
    });
  }

  handleInput = (e) => {
    console.log('[input]', e.target.value);
  }

  render() {
    return <UrlField value={this.state.value} onChange={this.handleChange} onInput={this.handleInput} />;
  }
}
```

## 数据源

绑定数据源。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { DataSet, UrlField } from 'choerodon-ui/pro';

function handleDataSetChange({ record, name, value, oldValue }) {
  console.log('[dataset newValue]', value, '[oldValue]', oldValue, `[record.get('${name}')]`, record.get(name));
}

class App extends React.Component {
  ds = new DataSet({
    autoCreate: true,
    fields: [
      { name: 'url', type: 'url', defaultValue: 'https://choerodon.io', required: true },
    ],
    events: {
      update: handleDataSetChange,
    },
  });

  render() {
    return <UrlField dataSet={this.ds} name="url" />;
  }
}

ReactDOM.render(
  <App />,
  document.getElementById('container')
);
```

## API

内置 Url 格式校验的输入框。

更多属性请参考TextField。



================================================================================
文件: ViewComponent.md
路径: doc\ViewComponent.md
================================================================================

# ViewComponent 抽象组件基类

所有组件的抽象基类。

## API

### ViewComponent

| 属性名 | 说明 | 类型/默认值 |
| --- | --- | --- |
| id | 组件id | 类型string |
| className | 自定义样式名 | 类型string |
| style | 内链样式 | 类型CSSProperties |
| disabled | 禁用 | 类型boolean默认值false |
| tabIndex | 键盘Tab键焦点序号，设为-1时不会获得焦点，设为0时为节点树的顺序。 | 类型number |
| title | 悬浮提示，建议用[ToolTip]组件 | 类型string |
| hidden | 是否隐藏 | 类型boolean默认值false |
| autoFocus | 自动获取焦点，多个组件同时设置该参数时，以节点树的顺序最末的组件获取焦点 | 类型boolean默认值false |
| accessKey | 快捷键, 通过 Alt + accessKey (或者 Shift + Alt + accessKey) 使组件聚焦 | 类型string |
| contentEditable | 内容可编辑 | 类型boolean 'true' 'false' |
| spellCheck | 拼写检查 | 类型boolean 'true' 'false' |
| draggable | 是否可拖动 | 类型boolean 'true' 'false' |
| dir | 内容的文本方向 | 类型'ltr' 'rtl' |
| size | 组件大小<未实现>，可选值 default \| small \| large | 类型string默认值default |
| onFocus | 获取焦点回调 | 类型Function |
| onBlur | 失去焦点回调 | 类型Function |
| onClick | 单击回调 | 类型Function |
| onDoubleClick | 双击回调 | 类型Function |
| onContextMenu | 右点击回调 | 类型Function |
| onMouseUp | 鼠标抬起回调 | 类型Function |
| onMouseDown | 鼠标点下回调 | 类型Function |
| onMouseMove | 鼠标移动回调 | 类型Function |
| onMouseEnter | 鼠标进入回调 | 类型Function |
| onMouseLeave | 鼠标离开回调 | 类型Function |
| onMouseOver | 鼠标进入回调，与onMouseEnter区别在于鼠标进入子节点时会触发onMouseOut | 类型Function |
| onMouseOut | 鼠标离开回调 | 类型Function |
| onKeyDown | 键盘按下时的回调 | 类型Function |
| onKeyUp | 键盘抬起时的回调 | 类型Function |
| onKeyPress | 键盘敲击后的回调 | 类型Function |

### ViewComponent Methods

| 名称 | 说明 |
| --- | --- |
| blur() | 取消焦点 |
| focus() | 获取焦点 |

注意，有些组件默认不支持获取焦点，请设置tabIndex来开启获取焦点功能

### DataSetComponent

可绑定数据源的组件抽象类。

| 属性名 | 说明 | 类型 |
| --- | --- | --- |
| dataSet | 绑定数据源 | 类型DataSet |

更多属性请参考ViewComponent。



================================================================================
文件: WaterMark.md
路径: doc\WaterMark.md
================================================================================

# WaterMark 水印组件

## 何时使用

一种数字保护的手段，需要能证明本人或者公司的产品版权即可在指定容器上添加水印

## 代码演示

## 文字水印

水印的基础使用。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { WaterMark } from 'choerodon-ui';

ReactDOM.render(
  <>
    <WaterMark content="Choerodon-ui" gapX={100} gapY={100} height={50}>
      <div style={{ height: 500 }} />
    </WaterMark>
  </>,
  document.getElementById('container'),
);
```

## 前置水印

水印组件默认实现为前置水印，即设想水印会显示在内容的上方，zIndex 默认设置为 9，如果你不希望水印遮挡上层内容，可以调整该值到小于上层内容的 zIndex。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { WaterMark } from 'choerodon-ui';
import { Table, DataSet } from 'choerodon-ui/pro';

class App extends React.Component {
  userDs = new DataSet({
    primaryKey: 'userid',
    name: 'user',
    autoQuery: true,
    pageSize: 5,
    fields: [
      {
        name: 'userid',
        type: 'string',
        label: '编号',
        required: true,
      },
      {
        name: 'name',
        type: 'intl',
        label: '姓名',
      },
      {
        name: 'age',
        type: 'number',
        label: '年龄',
        max: 100,
        step: 1,
      },
      {
        name: 'sex',
        type: 'string',
        label: '性别',
        lookupCode: 'HR.EMPLOYEE_GENDER',
        required: true,
      },
      { name: 'enable', type: 'boolean', label: '是否开启' },
    ],
  });

  get columns() {
    return [
      { name: 'userid' },
      { name: 'name', editor: true },
      { name: 'age', editor: true },
```

## 指定容器渲染

使用 getContainer 属性指定容器渲染。

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { WaterMark } from 'choerodon-ui';

ReactDOM.render(
  <>
    <WaterMark
      content="Choerodon-ui"
      getContainer={() => document.getElementById('water-mark')}
    />
    <div style={{ height: 500 }} id="water-mark" />
  </>,
  document.getElementById('container'),
);
```

## 图片水印

显示图片的水印

```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import { WaterMark } from 'choerodon-ui';

ReactDOM.render(
  <WaterMark
    height={200}
    width={200}
    image="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fpic1.zhimg.com%2Fv2-8c8d380247c1b2f6eaaef1cdbe3a3081_xs.jpg%3Fsource%3D172ae18b&refer=http%3A%2F%2Fpic1.zhimg.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1663752192&t=89fab4f5bc22f04a744676288517002c"
    markStyle={{ opacity: 0.2 }}
  >
    <div style={{ height: 500 }}>
      <p>
        Lorem ipsum dolor sit, amet consectetur adipisicing elit. Quisquam
        aliquid perferendis, adipisci dolorum officia odio natus facere cumque
        iusto libero repellendus praesentium ipsa cupiditate iure autem eos
        repudiandae delectus totam?
      </p>
      <p>
        Lorem ipsum dolor sit amet consectetur adipisicing elit. Illo
        praesentium, aperiam numquam voluptatibus asperiores odio? Doloribus
        saepe, eligendi facere inventore culpa, exercitationem explicabo earum
        laborum deleniti reiciendis deserunt accusantium ullam.
      </p>
      <p>
        Lorem ipsum dolor sit amet consectetur adipisicing elit. Officia
        voluptas numquam impedit architecto facilis aliquam at assumenda,
        nostrum explicabo accusantium ipsam error provident voluptate molestias
        magnam quisquam excepturi illum sit!
      </p>
      <p>
        Lorem ipsum dolor sit amet consectetur adipisicing elit. Aperiam,
        accusantium quo corporis fugit possimus quaerat ad consequatur veniam
        voluptatum ut cumque illo beatae. Magni assumenda eligendi itaque eum
        voluptate non!
      </p>
    </div>
  </WaterMark>,
  document.getElementById('container'),
);
```

## API

| 属性名 | 说明 | 类型/默认值 |
| --- | --- | --- |
| width | 水印的宽度 | 类型number默认值120 |
| height | 水印的高度 | 类型number默认值64 |
| rotate | 水印绘制时，旋转的角度，单位 ° | 类型number默认值-22 |
| image | 图片源，建议导出 2 倍或 3 倍图，优先使用图片渲染水印 | 类型string默认值- |
| zIndex | 追加的水印元素的 z-index | 类型number默认值9 |
| content | 水印文字内容 | 类型string默认值- |
| markStyle | 水印文字样式 | 类型{ color: string; fontStyle:none\|normal\|italic\|oblique; fontFamily: fontWeight:normal\|light\|weight\| number; fontSize: size opacity: }默认值{ 'rgba(0,0,0,.15)', fontStyle: 'normal', fontWeight: ... |
| markClassName | 水印层的类名 | 类型string默认值- |
| gapX | 水印之间的水平间距 | 类型number默认值212 |
| gapY | 水印之间的垂直间距 | 类型number默认值222 |
| offsetLeft | 水印在 canvas 画布上绘制的水平偏移量, 正常情况下，水印绘制在中间位置, 即offsetTop = gapX / 2 | 类型number默认值offsetTop gapX |
| offsetTop | 水印在 canvas 画布上绘制的垂直偏移量，正常情况下，水印绘制在中间位置, 即offsetTop = gapY / 2 | 类型number默认值offsetTop gapY |
| enable | 是否启用 | 类型boolean默认值true |
| removeable | 是否可移除，设置为 true 则可以通过浏览器控制台对水印 Dom 节点进行删除或者样式属性进行修改 | 类型boolean默认值false |


